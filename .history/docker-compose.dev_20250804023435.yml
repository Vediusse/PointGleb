version: '3.8'

services:
  # База данных
  postgres:
    image: postgres:15
    container_name: gleb-postgres-dev
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - gleb-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management
    container_name: gleb-rabbitmq-dev
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5673:5672"
      - "15673:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - gleb-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: gleb-prometheus-dev
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - gleb-network
    depends_on:
      - postgres
      - rabbitmq

  # Grafana для визуализации метрик
  grafana:
    image: grafana/grafana:latest
    container_name: gleb-grafana-dev
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - gleb-network
    depends_on:
      - prometheus

  # Микросервисы с volume mounts для разработки
  user-service:
    build:
      context: .
      dockerfile: user/docker/Dockerfile.dev
    container_name: gleb-user-service-dev
    ports:
      - "8090:8090"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DEVTOOLS_RESTART_ENABLED: "true"
      SPRING_DEVTOOLS_LIVERELOAD_ENABLED: "true"
    volumes:
      # Монтируем исходный код для hot reload
      - ./user/src:/app/user/src
      - ./common/src:/app/common/src
      - ./auth/src:/app/auth/src
      # Монтируем Maven cache для ускорения сборки
      - maven_cache:/root/.m2
      # Монтируем target для hot reload
      - ./user/target:/app/user/target
    networks:
      - gleb-network
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  point-service:
    build:
      context: .
      dockerfile: point/docker/Dockerfile.dev
    container_name: gleb-point-service-dev
    ports:
      - "8091:8091"
      - "8062:8062"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    volumes:
      # Монтируем исходный код для hot reload
      - ./point/src:/app/point/src
      - ./common/src:/app/common/src
      - ./auth/src:/app/auth/src
      # Монтируем Maven cache для ускорения сборки
      - maven_cache:/root/.m2
    networks:
      - gleb-network
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  statistic-service:
    build:
      context: .
      dockerfile: statistic/docker/Dockerfile.dev
    container_name: gleb-statistic-service-dev
    ports:
      - "8095:8095"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    volumes:
      # Монтируем исходный код для hot reload
      - ./statistic/src:/app/statistic/src
      - ./common/src:/app/common/src
      - ./auth/src:/app/auth/src
      # Монтируем Maven cache для ускорения сборки
      - maven_cache:/root/.m2
    networks:
      - gleb-network
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:
  maven_cache:

networks:
  gleb-network:
    driver: bridge 