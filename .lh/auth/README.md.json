{
    "sourceFile": "auth/README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1754244998851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1754250213937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,85 +1,32 @@\n-# Auth Module\n+# auth Module\n \n-Модуль авторизации для микросервисной архитектуры.\n+Этот модуль является частью проекта Gleb.\n \n-## Описание\n+## Структура\n \n-Этот модуль предоставляет полную функциональность авторизации на основе JWT токенов. Модуль можно легко подключить к любому сервису для добавления авторизации.\n+- `src/main/java/com/viancis/auth/` - Основной код модуля\n+- `src/main/resources/` - Ресурсы модуля\n+- `src/test/kotlin/com/viancis/auth/` - Тесты модуля\n+- `docker/` - Docker конфигурация\n \n-## Компоненты\n+## Зависимости\n \n-- **JWT Authentication Filter** - фильтр для проверки JWT токенов\n-- **JWT Token Provider** - генерация и валидация JWT токенов\n-- **Security Configuration** - конфигурация Spring Security\n-- **User Management** - управление пользователями и ролями\n-- **Password Encoding** - кодирование паролей\n+- common (базовый модуль)\n \n-## Использование\n+## Порт\n \n-### 1. Добавьте зависимость в pom.xml\n+Сервис работает на порту: 8093\n \n-```xml\n-<dependency>\n-    <groupId>com.viancis</groupId>\n-    <artifactId>auth</artifactId>\n-    <version>0.0.1-SNAPSHOT</version>\n-</dependency>\n-```\n+## Использование\n \n-### 2. Добавьте аннотацию @EnableAuth к главному классу приложения\n+Модуль автоматически подключается к основному проекту через Maven.\n \n-```java\n-import com.viancis.auth.annotation.EnableAuth;\n+### Запуск\n \n-@SpringBootApplication\n-@EnableAuth\n-public class YourApplication {\n-    public static void main(String[] args) {\n-        SpringApplication.run(YourApplication.class, args);\n-    }\n-}\n-```\n+```bash\n+# Создать сервис\n+./scripts/service-generator.sh -n auth-service -p 8093 -m auth -d common\n \n-### 3. Настройте application.properties\n-\n-```properties\n-jwt.secret=your-secret-key\n-jwt.expiration=360000000\n+# Запустить\n+make dev\n ```\n-\n-### 4. Настройте EntityScan и EnableJpaRepositories\n-\n-```java\n-@EntityScan(basePackages = {\"com.viancis.auth.model\"})\n-@EnableJpaRepositories(basePackages = {\"com.viancis.auth.repository\"})\n-```\n-\n-## Модели данных\n-\n-### User\n-- `id` - UUID\n-- `username` - уникальное имя пользователя\n-- `password` - закодированный пароль\n-- `roles` - набор ролей пользователя\n-\n-### Role\n-- `USER` - обычный пользователь\n-- `MODERATOR` - модератор\n-- `ADMIN` - администратор\n-- `ANONYM` - анонимный пользователь\n-\n-## Безопасность\n-\n-Модуль автоматически:\n-- Отключает CSRF для API\n-- Настраивает CORS\n-- Устанавливает stateless сессии\n-- Добавляет JWT фильтр\n-- Настраивает обработку ошибок авторизации\n-\n-## Исключения\n-\n-- `CustomAuthenticationException` - ошибка аутентификации\n-- `InvalidCredentialsException` - неверные учетные данные\n-- `UserNotFoundException` - пользователь не найден\n-- `UserAlreadyExistsException` - пользователь уже существует\n"
                }
            ],
            "date": 1754244998851,
            "name": "Commit-0",
            "content": "# Auth Module\n\nМодуль авторизации для микросервисной архитектуры.\n\n## Описание\n\nЭтот модуль предоставляет полную функциональность авторизации на основе JWT токенов. Модуль можно легко подключить к любому сервису для добавления авторизации.\n\n## Компоненты\n\n- **JWT Authentication Filter** - фильтр для проверки JWT токенов\n- **JWT Token Provider** - генерация и валидация JWT токенов\n- **Security Configuration** - конфигурация Spring Security\n- **User Management** - управление пользователями и ролями\n- **Password Encoding** - кодирование паролей\n\n## Использование\n\n### 1. Добавьте зависимость в pom.xml\n\n```xml\n<dependency>\n    <groupId>com.viancis</groupId>\n    <artifactId>auth</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n</dependency>\n```\n\n### 2. Добавьте аннотацию @EnableAuth к главному классу приложения\n\n```java\nimport com.viancis.auth.annotation.EnableAuth;\n\n@SpringBootApplication\n@EnableAuth\npublic class YourApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(YourApplication.class, args);\n    }\n}\n```\n\n### 3. Настройте application.properties\n\n```properties\njwt.secret=your-secret-key\njwt.expiration=360000000\n```\n\n### 4. Настройте EntityScan и EnableJpaRepositories\n\n```java\n@EntityScan(basePackages = {\"com.viancis.auth.model\"})\n@EnableJpaRepositories(basePackages = {\"com.viancis.auth.repository\"})\n```\n\n## Модели данных\n\n### User\n- `id` - UUID\n- `username` - уникальное имя пользователя\n- `password` - закодированный пароль\n- `roles` - набор ролей пользователя\n\n### Role\n- `USER` - обычный пользователь\n- `MODERATOR` - модератор\n- `ADMIN` - администратор\n- `ANONYM` - анонимный пользователь\n\n## Безопасность\n\nМодуль автоматически:\n- Отключает CSRF для API\n- Настраивает CORS\n- Устанавливает stateless сессии\n- Добавляет JWT фильтр\n- Настраивает обработку ошибок авторизации\n\n## Исключения\n\n- `CustomAuthenticationException` - ошибка аутентификации\n- `InvalidCredentialsException` - неверные учетные данные\n- `UserNotFoundException` - пользователь не найден\n- `UserAlreadyExistsException` - пользователь уже существует\n"
        }
    ]
}