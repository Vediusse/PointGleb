{
    "sourceFile": "auth/src/main/java/com/viancis/auth/model/User.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1754244492941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1754244492941,
            "name": "Commit-0",
            "content": "package com.viancis.auth.model;\n\n\nimport jakarta.persistence.*;\nimport jakarta.validation.constraints.NotBlank;\nimport jakarta.validation.constraints.NotNull;\nimport lombok.*;\nimport org.hibernate.annotations.GenericGenerator;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\n\nimport java.io.Serializable;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n@Entity\n@Table(name = \"users\")\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\npublic class User implements Serializable {\n\n    @Id\n    @GeneratedValue(generator = \"uuid\")\n    @GenericGenerator(name = \"uuid\", strategy = \"uuid2\")\n    private UUID id;\n\n    @Column(nullable = false, unique = true)\n    @NotBlank(message = \"Username обязателен\")\n    @NotNull(message = \"Username обязателен\")\n    private String username;\n\n    @Column(nullable = false)\n    @NotBlank(message = \"Password обязателен\")\n    @NotNull(message = \"Password обязателен\")\n    private String password;\n\n    @ElementCollection(fetch = FetchType.EAGER)\n    @CollectionTable(name = \"user_roles\", joinColumns = @JoinColumn(name = \"user_id\"))\n    @Enumerated(EnumType.STRING)\n    @Column(name = \"role\", nullable = false)\n    private Set<Role> roles = new HashSet<>();\n\n\n\n    public User(UUID id, String username, String password, Set<Role> roles) {\n        this.id = id;\n        this.username = username;\n        this.password = password;\n        this.roles = roles;\n    }\n\n\n    public Set<SimpleGrantedAuthority> getAuthorities() {\n        return roles.stream()\n                .map(Role::getGrantedAuthority)\n                .collect(Collectors.toSet());\n    }\n\n}"
        }
    ]
}