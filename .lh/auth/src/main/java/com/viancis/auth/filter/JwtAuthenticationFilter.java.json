{
    "sourceFile": "auth/src/main/java/com/viancis/auth/filter/JwtAuthenticationFilter.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1754244998851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1754250213938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n package com.viancis.auth.filter;\n \n+import com.viancis.auth.handler.JwtAccessDeniedHandler;\n import com.viancis.auth.service.CustomUserDetails;\n import jakarta.servlet.FilterChain;\n import jakarta.servlet.ServletException;\n import jakarta.servlet.http.HttpServletRequest;\n"
                },
                {
                    "date": 1754250707781,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,14 @@\n                     SecurityContextHolder.getContext().setAuthentication(authenticationToken);\n                 }\n             }\n         } catch (io.jsonwebtoken.security.SignatureException e) {\n-            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, \"Неверный jwt токен\");\n+            if (!response.isCommitted()) {\n+                response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n+                response.setContentType(\"application/json\");\n+                response.setCharacterEncoding(\"UTF-8\");\n+                response.getWriter().write(\"{\\\"error\\\":\\\"Unauthorized\\\",\\\"message\\\":\\\"Invalid JWT token\\\"}\");\n+            }\n         }\n \n         filterChain.doFilter(request, response);\n     }\n"
                }
            ],
            "date": 1754244998851,
            "name": "Commit-0",
            "content": "package com.viancis.auth.filter;\n\nimport com.viancis.auth.service.CustomUserDetails;\nimport jakarta.servlet.FilterChain;\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.web.authentication.WebAuthenticationDetailsSource;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.StringUtils;\nimport org.springframework.web.filter.OncePerRequestFilter;\n\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\n@Component\n@Order(1)\npublic class JwtAuthenticationFilter extends OncePerRequestFilter {\n\n    private final JwtTokenProvider jwtTokenProvider;\n    private final UserDetailsService userDetailsService;\n\n    public JwtAuthenticationFilter(JwtTokenProvider jwtTokenProvider, UserDetailsService userDetailsService) {\n        this.jwtTokenProvider = jwtTokenProvider;\n        this.userDetailsService = userDetailsService;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(JwtAuthenticationFilter.class);\n\n    //Constructor\n\n\n\n    // This method is executed for every request intercepted by the filter.\n    //And, it extract the token from the request header and validate the token.\n    @Override\n    protected void doFilterInternal(HttpServletRequest request,\n                                    HttpServletResponse response,\n                                    FilterChain filterChain) throws ServletException, IOException {\n\n        String token = getTokenFromRequest(request);\n        try {\n            if (StringUtils.hasText(token)) {\n                String username = null;\n                try {\n                    if (jwtTokenProvider.validateToken(token)) {\n                        username = jwtTokenProvider.getUsername(token);\n                    }\n                } catch (io.jsonwebtoken.ExpiredJwtException ex) {\n                    token = jwtTokenProvider.generateTokenFromExpiredClaims(ex.getClaims());\n                    response.setHeader(\"Authorization\", \"Bearer \" + token);\n                    username = ex.getClaims().getSubject();\n                }\n\n                if (username != null) {\n                    Set<String> roles = jwtTokenProvider.getRoles(token);\n                    Collection<GrantedAuthority> authorities = getAuthoritiesFromRoles(roles);\n                    CustomUserDetails userDetails = new CustomUserDetails(jwtTokenProvider.getId(token), username, roles);\n\n                    UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(\n                            userDetails,\n                            null,\n                            authorities\n                    );\n                    authenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));\n                    SecurityContextHolder.getContext().setAuthentication(authenticationToken);\n                }\n            }\n        } catch (io.jsonwebtoken.security.SignatureException e) {\n            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, \"Неверный jwt токен\");\n        }\n\n        filterChain.doFilter(request, response);\n    }\n\n    // Extract the token\n    private String getTokenFromRequest(HttpServletRequest request){\n        String bearerToken = request.getHeader(\"Authorization\");\n\n        if(StringUtils.hasText(bearerToken) && bearerToken.startsWith(\"Bearer \")){\n            return bearerToken.substring(7, bearerToken.length());\n        }\n\n        return null;\n    }\n\n\n    public Collection<GrantedAuthority> getAuthoritiesFromRoles(Set<String> roles) {\n        return roles.stream()\n                .map(SimpleGrantedAuthority::new)\n                .collect(Collectors.toList()); // Возвращаем коллекцию\n    }\n\n    @Override\n    protected boolean shouldNotFilter(HttpServletRequest request) throws ServletException {\n        return HttpMethod.OPTIONS.name().equalsIgnoreCase(request.getMethod());\n    }\n\n} "
        }
    ]
}