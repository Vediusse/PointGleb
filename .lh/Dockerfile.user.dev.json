{
    "sourceFile": "Dockerfile.user.dev",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1754148619653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1754154957062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,11 @@\n FROM openjdk:21-jdk-slim\n \n WORKDIR /app\n \n+# Устанавливаем права на выполнение для mvnw\n+RUN chmod +x mvnw\n \n-\n-\n # Этап 1: Копируем только файлы для зависимостей\n COPY mvnw .\n COPY mvnw.cmd .\n COPY pom.xml .\n@@ -36,6 +36,6 @@\n \n # Открываем порт\n EXPOSE 8090\n \n-# Запускаем приложение\n-CMD [\"java\", \"-jar\", \"/app/target/app.jar\"] \n\\ No newline at end of file\n+# Запускаем приложение с поддержкой hot reload\n+CMD [\"java\", \"-Dspring.devtools.restart.enabled=true\", \"-Dspring.devtools.livereload.enabled=true\", \"-jar\", \"/app/target/app.jar\"] \n\\ No newline at end of file\n"
                },
                {
                    "date": 1754156087840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,41 @@\n+FROM openjdk:21-jdk-slim\n+\n+WORKDIR /app\n+\n+\n+\n+\n+# Этап 1: Копируем только файлы для зависимостей\n+COPY mvnw .\n+COPY mvnw.cmd .\n+COPY pom.xml .\n+COPY .mvn .mvn\n+COPY user/pom.xml ./user/pom.xml\n+COPY point/pom.xml ./point/pom.xml\n+COPY statistic/pom.xml ./statistic/pom.xml\n+COPY common/pom.xml ./common/pom.xml\n+\n+# Этап 2: Скачиваем зависимости (кэшируется отдельно)\n+RUN ./mvnw dependency:go-offline -pl user -am\n+\n+# Этап 3: Копируем исходный код (меняется часто)\n+COPY user/src ./user/src\n+COPY common/src ./common/src\n+\n+# Этап 4: Компилируем (кэшируется отдельно)\n+RUN ./mvnw compile -pl user -am -DskipTests\n+\n+# Этап 5: Создаем JAR (меняется при изменении кода)\n+RUN ./mvnw package -pl user -am -DskipTests\n+\n+# Создаем директорию для приложения\n+RUN mkdir -p /app/target\n+\n+# Копируем собранный JAR файл\n+RUN cp user/target/*.jar /app/target/app.jar\n+\n+# Открываем порт\n+EXPOSE 8090\n+\n+# Запускаем приложение с поддержкой hot reload\n+CMD [\"java\", \"-Dspring.devtools.restart.enabled=true\", \"-Dspring.devtools.livereload.enabled=true\", \"-jar\", \"/app/target/app.jar\"] \n\\ No newline at end of file\n"
                },
                {
                    "date": 1754156730233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,15 @@\n FROM openjdk:21-jdk-slim\n \n WORKDIR /app\n \n+# Устанавливаем необходимые инструменты\n+RUN apt-get update && apt-get install -y \\\n+    curl \\\n+    wget \\\n+    && rm -rf /var/lib/apt/lists/*\n \n-\n-\n-# Этап 1: Копируем только файлы для зависимостей\n+# Копируем Maven wrapper и pom файлы\n COPY mvnw .\n COPY mvnw.cmd .\n COPY pom.xml .\n COPY .mvn .mvn\n@@ -14,69 +17,74 @@\n COPY point/pom.xml ./point/pom.xml\n COPY statistic/pom.xml ./statistic/pom.xml\n COPY common/pom.xml ./common/pom.xml\n \n-# Этап 2: Скачиваем зависимости (кэшируется отдельно)\n+# Скачиваем зависимости (кэшируется отдельно)\n RUN ./mvnw dependency:go-offline -pl user -am\n \n-# Этап 3: Копируем исходный код (меняется часто)\n+# Копируем исходный код\n COPY user/src ./user/src\n COPY common/src ./common/src\n \n-# Этап 4: Компилируем (кэшируется отдельно)\n+# Компилируем приложение\n RUN ./mvnw compile -pl user -am -DskipTests\n \n-# Этап 5: Создаем JAR (меняется при изменении кода)\n+# Создаем JAR файл\n RUN ./mvnw package -pl user -am -DskipTests\n \n-# Создаем директорию для приложения\n-RUN mkdir -p /app/target\n-\n # Копируем собранный JAR файл\n RUN cp user/target/*.jar /app/target/app.jar\n \n-# Открываем порт\n-EXPOSE 8090\n+# Создаем скрипт для hot reload\n+RUN echo '#!/bin/bash\\n\\\n+echo \"Starting hot reload development server...\"\\n\\\n+echo \"Watching for changes in /app/user/src and /app/common/src...\"\\n\\\n+\\n\\\n+# Функция для пересборки\\n\\\n+rebuild() {\\n\\\n+    echo \"Changes detected, rebuilding...\"\\n\\\n+    cd /app\\n\\\n+    ./mvnw compile -pl user -am -DskipTests\\n\\\n+    ./mvnw package -pl user -am -DskipTests\\n\\\n+    cp user/target/*.jar /app/target/app.jar\\n\\\n+    echo \"Rebuild completed!\"\\n\\\n+}\\n\\\n+\\n\\\n+# Запускаем приложение с Spring DevTools\\n\\\n+java -Dspring.devtools.restart.enabled=true \\\\\\n\\\n+     -Dspring.devtools.livereload.enabled=true \\\\\\n\\\n+     -Dspring.devtools.restart.poll-interval=2s \\\\\\n\\\n+     -Dspring.devtools.restart.quiet-period=1s \\\\\\n\\\n+     -Dspring.devtools.restart.additional-paths=/app/user/src,/app/common/src \\\\\\n\\\n+     -Dspring.devtools.restart.exclude=static/**,public/**,templates/** \\\\\\n\\\n+     -jar /app/target/app.jar &\\n\\\n+\\n\\\n+# Сохраняем PID приложения\\n\\\n+APP_PID=$!\\n\\\n+\\n\\\n+# Мониторим изменения файлов\\n\\\n+while true; do\\n\\\n+    # Проверяем изменения в исходном коде\\n\\\n+    if find /app/user/src /app/common/src -name \"*.java\" -newer /app/target/app.jar 2>/dev/null | grep -q .; then\\n\\\n+        echo \"Java files changed, rebuilding...\"\\n\\\n+        kill $APP_PID 2>/dev/null || true\\n\\\n+        sleep 2\\n\\\n+        rebuild\\n\\\n+        java -Dspring.devtools.restart.enabled=true \\\\\\n\\\n+             -Dspring.devtools.livereload.enabled=true \\\\\\n\\\n+             -Dspring.devtools.restart.poll-interval=2s \\\\\\n\\\n+             -Dspring.devtools.restart.quiet-period=1s \\\\\\n\\\n+             -Dspring.devtools.restart.additional-paths=/app/user/src,/app/common/src \\\\\\n\\\n\\ No newline at end of file\n+             -Dspring.devtools.restart.exclude=static/**,public/**,templates/** \\\\\\n\\\n+             -jar /app/target/app.jar &\\n\\\n+        APP_PID=$!\\n\\\n+    fi\\n\\\n+    sleep 1\\n\\\n+done' > /app/start-dev.sh\n \n-# Запускаем приложение с поддержкой hot reload\n-CMD [\"java\", \"-Dspring.devtools.restart.enabled=true\", \"-Dspring.devtools.livereload.enabled=true\", \"-jar\", \"/app/target/app.jar\"] \n-FROM openjdk:21-jdk-slim\n+RUN chmod +x /app/start-dev.sh\n \n-WORKDIR /app\n-\n-# Устанавливаем права на выполнение для mvnw\n-RUN chmod +x mvnw\n-\n-# Этап 1: Копируем только файлы для зависимостей\n-COPY mvnw .\n-COPY mvnw.cmd .\n-COPY pom.xml .\n-COPY .mvn .mvn\n-COPY user/pom.xml ./user/pom.xml\n-COPY point/pom.xml ./point/pom.xml\n-COPY statistic/pom.xml ./statistic/pom.xml\n-COPY common/pom.xml ./common/pom.xml\n-\n-# Этап 2: Скачиваем зависимости (кэшируется отдельно)\n-RUN ./mvnw dependency:go-offline -pl user -am\n-\n-# Этап 3: Копируем исходный код (меняется часто)\n-COPY user/src ./user/src\n-COPY common/src ./common/src\n-\n-# Этап 4: Компилируем (кэшируется отдельно)\n-RUN ./mvnw compile -pl user -am -DskipTests\n-\n-# Этап 5: Создаем JAR (меняется при изменении кода)\n-RUN ./mvnw package -pl user -am -DskipTests\n-\n-# Создаем директорию для приложения\n-RUN mkdir -p /app/target\n-\n-# Копируем собранный JAR файл\n-RUN cp user/target/*.jar /app/target/app.jar\n-\n # Открываем порт\n EXPOSE 8090\n \n-# Запускаем приложение с поддержкой hot reload\n-CMD [\"java\", \"-Dspring.devtools.restart.enabled=true\", \"-Dspring.devtools.livereload.enabled=true\", \"-jar\", \"/app/target/app.jar\"] \n+# Запускаем скрипт разработки\n+CMD [\"/app/start-dev.sh\"] \n\\ No newline at end of file\n"
                }
            ],
            "date": 1754148619653,
            "name": "Commit-0",
            "content": "FROM openjdk:21-jdk-slim\n\nWORKDIR /app\n\n\n\n\n# Этап 1: Копируем только файлы для зависимостей\nCOPY mvnw .\nCOPY mvnw.cmd .\nCOPY pom.xml .\nCOPY .mvn .mvn\nCOPY user/pom.xml ./user/pom.xml\nCOPY point/pom.xml ./point/pom.xml\nCOPY statistic/pom.xml ./statistic/pom.xml\nCOPY common/pom.xml ./common/pom.xml\n\n# Этап 2: Скачиваем зависимости (кэшируется отдельно)\nRUN ./mvnw dependency:go-offline -pl user -am\n\n# Этап 3: Копируем исходный код (меняется часто)\nCOPY user/src ./user/src\nCOPY common/src ./common/src\n\n# Этап 4: Компилируем (кэшируется отдельно)\nRUN ./mvnw compile -pl user -am -DskipTests\n\n# Этап 5: Создаем JAR (меняется при изменении кода)\nRUN ./mvnw package -pl user -am -DskipTests\n\n# Создаем директорию для приложения\nRUN mkdir -p /app/target\n\n# Копируем собранный JAR файл\nRUN cp user/target/*.jar /app/target/app.jar\n\n# Открываем порт\nEXPOSE 8090\n\n# Запускаем приложение\nCMD [\"java\", \"-jar\", \"/app/target/app.jar\"] "
        }
    ]
}