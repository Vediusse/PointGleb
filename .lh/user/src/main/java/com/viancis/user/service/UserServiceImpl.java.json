{
    "sourceFile": "user/src/main/java/com/viancis/user/service/UserServiceImpl.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1754151195789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1754151207977,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,16 +71,8 @@\n \n     @Async\n     @Transactional\n     public CompletableFuture<UserDTO> registerUser(User user) {\n-        // Валидация обязательных полей\n-        if (user.getUsername() == null || user.getUsername().trim().isEmpty()) {\n-            throw new IllegalArgumentException(\"Username обязателен\");\n-        }\n-        if (user.getPassword() == null || user.getPassword().trim().isEmpty()) {\n-            throw new IllegalArgumentException(\"Password обязателен\");\n-        }\n-        \n         return CompletableFuture.supplyAsync(() -> userRepository.findByUsername(user.getUsername()))\n                 .thenCompose(existingUser -> {\n                     if (existingUser.isPresent()) throw new UserAlreadyExistsException(user.getUsername());\n                     user.setRoles(Collections.singleton(Role.USER));\n"
                },
                {
                    "date": 1754151329334,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,8 +71,9 @@\n \n     @Async\n     @Transactional\n     public CompletableFuture<UserDTO> registerUser(User user) {\n+        \n         return CompletableFuture.supplyAsync(() -> userRepository.findByUsername(user.getUsername()))\n                 .thenCompose(existingUser -> {\n                     if (existingUser.isPresent()) throw new UserAlreadyExistsException(user.getUsername());\n                     user.setRoles(Collections.singleton(Role.USER));\n"
                },
                {
                    "date": 1754154705697,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,16 +71,10 @@\n \n     @Async\n     @Transactional\n     public CompletableFuture<UserDTO> registerUser(User user) {\n+        throw new IllegalArgumentException(\"test\");\n         \n-        return CompletableFuture.supplyAsync(() -> userRepository.findByUsername(user.getUsername()))\n-                .thenCompose(existingUser -> {\n-                    if (existingUser.isPresent()) throw new UserAlreadyExistsException(user.getUsername());\n-                    user.setRoles(Collections.singleton(Role.USER));\n-                    user.setPassword(passwordEncoder.encodePassword(user.getPassword()));\n-                    return CompletableFuture.supplyAsync(() -> new UserDTO().fromUserToDTO(userRepository.save(user)));\n-                });\n     }\n \n     @Async\n     @Transactional\n"
                },
                {
                    "date": 1754155187242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,10 +71,15 @@\n \n     @Async\n     @Transactional\n     public CompletableFuture<UserDTO> registerUser(User user) {\n-        throw new IllegalArgumentException(\"test\");\n-        \n+        return CompletableFuture.supplyAsync(() -> userRepository.findByUsername(user.getUsername()))\n+                .thenCompose(existingUser -> {\n+                    if (existingUser.isPresent()) throw new UserAlreadyExistsException(user.getUsername());\n+                    user.setRoles(Collections.singleton(Role.USER));\n+                    user.setPassword(passwordEncoder.encodePassword(user.getPassword()));\n+                    return CompletableFuture.supplyAsync(() -> new UserDTO().fromUserToDTO(userRepository.save(user)));\n+                });\n     }\n \n     @Async\n     @Transactional\n"
                },
                {
                    "date": 1754157585242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,8 +73,9 @@\n     @Transactional\n     public CompletableFuture<UserDTO> registerUser(User user) {\n         return CompletableFuture.supplyAsync(() -> userRepository.findByUsername(user.getUsername()))\n                 .thenCompose(existingUser -> {\n+                    System.out.println(\"existingUser: \" + existingUser);\n                     if (existingUser.isPresent()) throw new UserAlreadyExistsException(user.getUsername());\n                     user.setRoles(Collections.singleton(Role.USER));\n                     user.setPassword(passwordEncoder.encodePassword(user.getPassword()));\n                     return CompletableFuture.supplyAsync(() -> new UserDTO().fromUserToDTO(userRepository.save(user)));\n"
                },
                {
                    "date": 1754157825682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,8 +71,9 @@\n \n     @Async\n     @Transactional\n     public CompletableFuture<UserDTO> registerUser(User user) {\n+        \n         return CompletableFuture.supplyAsync(() -> userRepository.findByUsername(user.getUsername()))\n                 .thenCompose(existingUser -> {\n                     System.out.println(\"existingUser: \" + existingUser);\n                     if (existingUser.isPresent()) throw new UserAlreadyExistsException(user.getUsername());\n"
                },
                {
                    "date": 1754176178801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,136 @@\n+package com.viancis.user.service;\n+\n+import com.viancis.common.component.PasswordEncoderComponent;\n+import com.viancis.common.exception.InvalidCredentialsException;\n+import com.viancis.common.exception.UserAlreadyExistsException;\n+import com.viancis.common.exception.UserNotFoundException;\n+import com.viancis.common.filter.JwtTokenProvider;\n+import com.viancis.common.model.Role;\n+import com.viancis.common.model.User;\n+import com.viancis.common.model.UserDTO;\n+import com.viancis.common.repository.UserRepository;\n+import com.viancis.common.response.LoginResponse;\n+import com.viancis.common.service.CustomUserDetails;\n+import com.viancis.user.controller.LoginRequest;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.scheduling.annotation.Async;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.authentication.AuthenticationManager;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Collectors;\n+\n+@Service\n+public class UserServiceImpl {\n+\n+    @Autowired\n+    private UserRepository userRepository;\n+\n+    @Autowired\n+    private JwtTokenProvider jwtTokenProvider;\n+\n+    @Autowired\n+    private PasswordEncoderComponent passwordEncoder;\n+\n+    @Autowired\n+    private AuthenticationManager authenticationManager;\n+\n+    @Async\n+    @Transactional\n+    public CompletableFuture<List<UserDTO>> getAllUsers() {\n+        return CompletableFuture\n+                .supplyAsync(() -> userRepository.findAllWithPoints().stream()\n+                .map(UserDTO::fromUser)\n+                .collect(Collectors.toList()));\n+    }\n+\n+    @Async\n+    @Transactional\n+    public CompletableFuture<UserDTO> getUserById(UUID id) {  // UUID вместо String\n+        return CompletableFuture\n+                .supplyAsync(() -> userRepository.findById(id)\n+                .map(existingUser -> new UserDTO().fromUserToDTO(userRepository.save(existingUser)))\n+                .orElseThrow(() -> new UserNotFoundException(id.toString())));\n+    }\n+\n+    @Async\n+    @Transactional\n+    public CompletableFuture<UserDTO> getUserByUsername(String username) {\n+        return CompletableFuture\n+                .supplyAsync(() -> userRepository.findByUsername(username)\n+                .map(existingUser -> new UserDTO().fromUserToDTO(userRepository.save(existingUser)))\n+                .orElseThrow(() -> new UserNotFoundException(username)));\n+    }\n+\n+    @Async\n+    @Transactional\n+    public CompletableFuture<UserDTO> registerUser(User user) {\n+        return CompletableFuture.supplyAsync(() -> userRepository.findByUsername(user.getUsername()))\n+                .thenCompose(existingUser -> {\n+                    System.out.println(\"existingUser: \" + existingUser);\n+                    if (existingUser.isPresent()) throw new UserAlreadyExistsException(user.getUsername());\n+                    user.setRoles(Collections.singleton(Role.USER));\n+                    user.setPassword(passwordEncoder.encodePassword(user.getPassword()));\n+                    return CompletableFuture.supplyAsync(() -> new UserDTO().fromUserToDTO(userRepository.save(user)));\n+                });\n+    }\n+\n+    @Async\n+    @Transactional\n+    public CompletableFuture<LoginResponse> loginUser(LoginRequest userBody) {\n+        System.out.println(\"LoginRequest: \" + userBody);\n+\n+        return CompletableFuture\n+                .supplyAsync(() -> authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(userBody.getUsername(), userBody.getPassword())))\n+                .thenApply(authResult -> {\n+                    if (!authResult.isAuthenticated()) throw new InvalidCredentialsException();\n+                    return new LoginResponse(jwtTokenProvider.generateToken((CustomUserDetails) authResult.getPrincipal()));\n+                })\n+                .exceptionally(ex -> {\n+                    throw new InvalidCredentialsException();\n+                });\n+    }\n+\n+    @Async\n+    @Transactional\n+    public CompletableFuture<UserDTO> getMe(CustomUserDetails userDetails) {\n+        return CompletableFuture.supplyAsync(() -> new UserDTO().toDTO(userDetails));\n+    }\n+\n+    @Async\n+    public CompletableFuture<UserDTO> updateUserBySelf(CustomUserDetails user, UserDTO updatedUser) {\n+        return CompletableFuture.supplyAsync(() -> userRepository.findById(user.getUser().getId())  // UUID вместо String\n+                .map(existingUser -> {\n+                    existingUser.setUsername(updatedUser.getUsername());\n+                    return new UserDTO().fromUserToDTO(userRepository.save(existingUser));\n+                })\n+                .orElseThrow(() -> new UserNotFoundException(user.getUser().getId().toString())));\n+    }\n+\n+    @Async\n+    public CompletableFuture<UserDTO> updateUserByAdmin(CustomUserDetails admin, UUID targetUserId, UserDTO updatedUser) {  // UUID вместо String\n+        return CompletableFuture.supplyAsync(() -> userRepository.findById(targetUserId).orElseThrow(() -> new UserNotFoundException(targetUserId.toString())))\n+                .thenApply(targetUser -> {\n+                    if (!admin.getUser().getRoles().stream().allMatch(role -> role.getLevel() > targetUser.getRoles().stream().mapToInt(Role::getLevel).max().orElse(0))) throw new AccessDeniedException(\"Как ты это ваще сделал, гнида\");\n+                    targetUser.setUsername(updatedUser.getUsername());\n+                    targetUser.setRoles(updatedUser.getRoles());\n+                    return targetUser;\n+                })\n+                .thenApply(targetUser -> new UserDTO().fromUserToDTO(userRepository.save(targetUser)));\n+    }\n+\n+    @Async\n+    public CompletableFuture<Void> deleteUser(UUID id) {  // UUID вместо String\n+        return CompletableFuture.runAsync(() -> {\n+            if (!userRepository.existsById(id)) throw new UserNotFoundException(id.toString());\n+            userRepository.deleteById(id);\n+        });\n+    }\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1754151195789,
            "name": "Commit-0",
            "content": "package com.viancis.user.service;\n\nimport com.viancis.common.component.PasswordEncoderComponent;\nimport com.viancis.common.exception.InvalidCredentialsException;\nimport com.viancis.common.exception.UserAlreadyExistsException;\nimport com.viancis.common.exception.UserNotFoundException;\nimport com.viancis.common.filter.JwtTokenProvider;\nimport com.viancis.common.model.Role;\nimport com.viancis.common.model.User;\nimport com.viancis.common.model.UserDTO;\nimport com.viancis.common.repository.UserRepository;\nimport com.viancis.common.response.LoginResponse;\nimport com.viancis.common.service.CustomUserDetails;\nimport com.viancis.user.controller.LoginRequest;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.scheduling.annotation.Async;\nimport org.springframework.security.access.AccessDeniedException;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.UUID;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.stream.Collectors;\n\n@Service\npublic class UserServiceImpl {\n\n    @Autowired\n    private UserRepository userRepository;\n\n    @Autowired\n    private JwtTokenProvider jwtTokenProvider;\n\n    @Autowired\n    private PasswordEncoderComponent passwordEncoder;\n\n    @Autowired\n    private AuthenticationManager authenticationManager;\n\n    @Async\n    @Transactional\n    public CompletableFuture<List<UserDTO>> getAllUsers() {\n        return CompletableFuture\n                .supplyAsync(() -> userRepository.findAllWithPoints().stream()\n                .map(UserDTO::fromUser)\n                .collect(Collectors.toList()));\n    }\n\n    @Async\n    @Transactional\n    public CompletableFuture<UserDTO> getUserById(UUID id) {  // UUID вместо String\n        return CompletableFuture\n                .supplyAsync(() -> userRepository.findById(id)\n                .map(existingUser -> new UserDTO().fromUserToDTO(userRepository.save(existingUser)))\n                .orElseThrow(() -> new UserNotFoundException(id.toString())));\n    }\n\n    @Async\n    @Transactional\n    public CompletableFuture<UserDTO> getUserByUsername(String username) {\n        return CompletableFuture\n                .supplyAsync(() -> userRepository.findByUsername(username)\n                .map(existingUser -> new UserDTO().fromUserToDTO(userRepository.save(existingUser)))\n                .orElseThrow(() -> new UserNotFoundException(username)));\n    }\n\n    @Async\n    @Transactional\n    public CompletableFuture<UserDTO> registerUser(User user) {\n        // Валидация обязательных полей\n        if (user.getUsername() == null || user.getUsername().trim().isEmpty()) {\n            throw new IllegalArgumentException(\"Username обязателен\");\n        }\n        if (user.getPassword() == null || user.getPassword().trim().isEmpty()) {\n            throw new IllegalArgumentException(\"Password обязателен\");\n        }\n        \n        return CompletableFuture.supplyAsync(() -> userRepository.findByUsername(user.getUsername()))\n                .thenCompose(existingUser -> {\n                    if (existingUser.isPresent()) throw new UserAlreadyExistsException(user.getUsername());\n                    user.setRoles(Collections.singleton(Role.USER));\n                    user.setPassword(passwordEncoder.encodePassword(user.getPassword()));\n                    return CompletableFuture.supplyAsync(() -> new UserDTO().fromUserToDTO(userRepository.save(user)));\n                });\n    }\n\n    @Async\n    @Transactional\n    public CompletableFuture<LoginResponse> loginUser(LoginRequest userBody) {\n        System.out.println(\"LoginRequest: \" + userBody);\n\n        return CompletableFuture\n                .supplyAsync(() -> authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(userBody.getUsername(), userBody.getPassword())))\n                .thenApply(authResult -> {\n                    if (!authResult.isAuthenticated()) throw new InvalidCredentialsException();\n                    return new LoginResponse(jwtTokenProvider.generateToken((CustomUserDetails) authResult.getPrincipal()));\n                })\n                .exceptionally(ex -> {\n                    throw new InvalidCredentialsException();\n                });\n    }\n\n    @Async\n    @Transactional\n    public CompletableFuture<UserDTO> getMe(CustomUserDetails userDetails) {\n        return CompletableFuture.supplyAsync(() -> new UserDTO().toDTO(userDetails));\n    }\n\n    @Async\n    public CompletableFuture<UserDTO> updateUserBySelf(CustomUserDetails user, UserDTO updatedUser) {\n        return CompletableFuture.supplyAsync(() -> userRepository.findById(user.getUser().getId())  // UUID вместо String\n                .map(existingUser -> {\n                    existingUser.setUsername(updatedUser.getUsername());\n                    return new UserDTO().fromUserToDTO(userRepository.save(existingUser));\n                })\n                .orElseThrow(() -> new UserNotFoundException(user.getUser().getId().toString())));\n    }\n\n    @Async\n    public CompletableFuture<UserDTO> updateUserByAdmin(CustomUserDetails admin, UUID targetUserId, UserDTO updatedUser) {  // UUID вместо String\n        return CompletableFuture.supplyAsync(() -> userRepository.findById(targetUserId).orElseThrow(() -> new UserNotFoundException(targetUserId.toString())))\n                .thenApply(targetUser -> {\n                    if (!admin.getUser().getRoles().stream().allMatch(role -> role.getLevel() > targetUser.getRoles().stream().mapToInt(Role::getLevel).max().orElse(0))) throw new AccessDeniedException(\"Как ты это ваще сделал, гнида\");\n                    targetUser.setUsername(updatedUser.getUsername());\n                    targetUser.setRoles(updatedUser.getRoles());\n                    return targetUser;\n                })\n                .thenApply(targetUser -> new UserDTO().fromUserToDTO(userRepository.save(targetUser)));\n    }\n\n    @Async\n    public CompletableFuture<Void> deleteUser(UUID id) {  // UUID вместо String\n        return CompletableFuture.runAsync(() -> {\n            if (!userRepository.existsById(id)) throw new UserNotFoundException(id.toString());\n            userRepository.deleteById(id);\n        });\n    }\n}"
        }
    ]
}