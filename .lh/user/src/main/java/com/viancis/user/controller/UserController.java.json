{
    "sourceFile": "user/src/main/java/com/viancis/user/controller/UserController.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1754150474148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1754150508990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n import com.viancis.common.response.LoginResponse;\n import com.viancis.common.service.CustomUserDetails;\n import com.viancis.user.service.UserServiceImpl;\n import com.viancis.user.controller.RegisterRequest;\n+import com.viancis.user.controller.LoginRequest;\n import io.swagger.v3.oas.annotations.Operation;\n import io.swagger.v3.oas.annotations.Parameter;\n import io.swagger.v3.oas.annotations.media.Content;\n import io.swagger.v3.oas.annotations.media.ExampleObject;\n@@ -87,9 +88,9 @@\n             description = \"This endpoint registers a new user with provided data.\",\n             requestBody = @io.swagger.v3.oas.annotations.parameters.RequestBody(\n                     description = \"User registration data\",\n                     content = @Content(\n-                            schema = @Schema(implementation = User.class),\n+                            schema = @Schema(implementation = RegisterRequest.class),\n                             examples = @ExampleObject(value = \"{\\n  \\\"username\\\": \\\"john_doe\\\",\\n  \\\"password\\\": \\\"password123\\\" }\")\n                     )\n             )\n     )\n@@ -115,9 +116,9 @@\n             description = \"This endpoint allows a user to login using username and password.\",\n             requestBody = @io.swagger.v3.oas.annotations.parameters.RequestBody(\n                     description = \"User login data\",\n                     content = @Content(\n-                            schema = @Schema(implementation = User.class),\n+                            schema = @Schema(implementation = LoginRequest.class),\n                             examples = @ExampleObject(value = \"{\\n  \\\"username\\\": \\\"john_doe\\\",\\n  \\\"password\\\": \\\"password123\\\" }\")\n                     )\n             )\n     )\n"
                },
                {
                    "date": 1754151195792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,8 @@\n import com.viancis.common.model.UserDTO;\n import com.viancis.common.response.LoginResponse;\n import com.viancis.common.service.CustomUserDetails;\n import com.viancis.user.service.UserServiceImpl;\n-import com.viancis.user.controller.RegisterRequest;\n import com.viancis.user.controller.LoginRequest;\n import io.swagger.v3.oas.annotations.Operation;\n import io.swagger.v3.oas.annotations.Parameter;\n import io.swagger.v3.oas.annotations.media.Content;\n@@ -88,9 +87,9 @@\n             description = \"This endpoint registers a new user with provided data.\",\n             requestBody = @io.swagger.v3.oas.annotations.parameters.RequestBody(\n                     description = \"User registration data\",\n                     content = @Content(\n-                            schema = @Schema(implementation = RegisterRequest.class),\n+                            schema = @Schema(implementation = User.class),\n                             examples = @ExampleObject(value = \"{\\n  \\\"username\\\": \\\"john_doe\\\",\\n  \\\"password\\\": \\\"password123\\\" }\")\n                     )\n             )\n     )\n@@ -100,16 +99,17 @@\n             @ApiResponse(responseCode = \"500\", description = \"Internal Server Error\")\n     })\n     @PostMapping(\"/auth/register\")\n     @PreAuthorize(\"permitAll()\")\n-    public CompletableFuture<ResponseEntity<UserDTO>> registerUser(@RequestBody @Valid RegisterRequest registerRequest) {\n-        User user = new User();\n-        user.setUsername(registerRequest.getUsername());\n-        user.setPassword(registerRequest.getPassword());\n-        \n+    public CompletableFuture<ResponseEntity<UserDTO>> registerUser(@RequestBody User user) {\n         return userService.registerUser(user)\n                 .thenApply(ResponseEntity::ok)\n-                .exceptionally(ex -> ResponseEntity.badRequest().body(null));\n+                .exceptionally(ex -> {\n+                    if (ex.getCause() instanceof IllegalArgumentException) {\n+                        return ResponseEntity.badRequest().body(null);\n+                    }\n+                    return ResponseEntity.status(500).body(null);\n+                });\n     }\n \n     @Operation(\n             summary = \"Login user\",\n@@ -128,9 +128,9 @@\n             @ApiResponse(responseCode = \"500\", description = \"Internal Server Error\")\n     })\n     @PreAuthorize(\"permitAll()\")\n     @PostMapping(\"/auth/login\")\n-    public CompletableFuture<ResponseEntity<LoginResponse>> loginUser(@RequestBody @Valid LoginRequest loginRequest) {\n+    public CompletableFuture<ResponseEntity<LoginResponse>> loginUser(@RequestBody LoginRequest loginRequest) {\n         return userService.loginUser(loginRequest)\n                 .thenApply(ResponseEntity::ok)\n                 .exceptionally(ex -> ResponseEntity.badRequest().body(new LoginResponse(\"Ошибка: \" + ex.getMessage())));\n     }\n"
                },
                {
                    "date": 1754155187241,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,16 +100,9 @@\n     })\n     @PostMapping(\"/auth/register\")\n     @PreAuthorize(\"permitAll()\")\n     public CompletableFuture<ResponseEntity<UserDTO>> registerUser(@RequestBody User user) {\n-        return userService.registerUser(user)\n-                .thenApply(ResponseEntity::ok)\n-                .exceptionally(ex -> {\n-                    if (ex.getCause() instanceof IllegalArgumentException) {\n-                        return ResponseEntity.badRequest().body(null);\n-                    }\n-                    return ResponseEntity.status(500).body(null);\n-                });\n+        throw new IllegalArgumentException(\"Not implemented\");\n     }\n \n     @Operation(\n             summary = \"Login user\",\n"
                },
                {
                    "date": 1754155230730,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,8 +100,9 @@\n     })\n     @PostMapping(\"/auth/register\")\n     @PreAuthorize(\"permitAll()\")\n     public CompletableFuture<ResponseEntity<UserDTO>> registerUser(@RequestBody User user) {\n+        \n         throw new IllegalArgumentException(\"Not implemented\");\n     }\n \n     @Operation(\n"
                },
                {
                    "date": 1754155356623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,10 +100,16 @@\n     })\n     @PostMapping(\"/auth/register\")\n     @PreAuthorize(\"permitAll()\")\n     public CompletableFuture<ResponseEntity<UserDTO>> registerUser(@RequestBody User user) {\n-        \n-        throw new IllegalArgumentException(\"Not implemented\");\n+        return userService.registerUser(user)\n+                .thenApply(ResponseEntity::ok)\n+                .exceptionally(ex -> {\n+                    if (ex.getCause() instanceof IllegalArgumentException) {\n+                        return ResponseEntity.badRequest().body(null);\n+                    }\n+                    return ResponseEntity.status(500).body(null);\n+                });\n     }\n \n     @Operation(\n             summary = \"Login user\",\n"
                },
                {
                    "date": 1754155538234,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,8 +100,9 @@\n     })\n     @PostMapping(\"/auth/register\")\n     @PreAuthorize(\"permitAll()\")\n     public CompletableFuture<ResponseEntity<UserDTO>> registerUser(@RequestBody User user) {\n+        \n         return userService.registerUser(user)\n                 .thenApply(ResponseEntity::ok)\n                 .exceptionally(ex -> {\n                     if (ex.getCause() instanceof IllegalArgumentException) {\n"
                },
                {
                    "date": 1754155871999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,163 @@\n+package com.viancis.user.controller;\n+\n+import com.viancis.common.model.User;\n+import com.viancis.common.model.UserDTO;\n+import com.viancis.common.response.LoginResponse;\n+import com.viancis.common.service.CustomUserDetails;\n+import com.viancis.user.service.UserServiceImpl;\n+import com.viancis.user.controller.LoginRequest;\n+import io.swagger.v3.oas.annotations.Operation;\n+import io.swagger.v3.oas.annotations.Parameter;\n+import io.swagger.v3.oas.annotations.media.Content;\n+import io.swagger.v3.oas.annotations.media.ExampleObject;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n+import jakarta.validation.Valid;\n+import lombok.AllArgsConstructor;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.security.core.annotation.AuthenticationPrincipal;\n+import org.springframework.web.bind.annotation.*;\n+\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+\n+@AllArgsConstructor\n+@RestController\n+@RequestMapping(\"/api/users\")\n+public class UserController {\n+\n+    @Autowired\n+    private UserServiceImpl userService;\n+\n+    @Operation(\n+            summary = \"Get all users\",\n+            description = \"This endpoint returns a list of all users.\"\n+    )\n+    @ApiResponses(value = {\n+            @ApiResponse(responseCode = \"200\", description = \"List of users retrieved successfully\",\n+                    content = @Content(mediaType = \"application/json\",\n+                            schema = @Schema(implementation = UserDTO.class))),\n+            @ApiResponse(responseCode = \"500\", description = \"Internal Server Error\")\n+    })\n+    @GetMapping\n+    @PreAuthorize(\"permitAll()\")\n+    public CompletableFuture<ResponseEntity<List<UserDTO>>> getAllUsers() {\n+        return userService.getAllUsers()\n+                .thenApply(ResponseEntity::ok);\n+    }\n+\n+    @Operation(\n+            summary = \"Get user by ID\",\n+            description = \"This endpoint returns the user details based on the provided ID.\"\n+    )\n+    @ApiResponses(value = {\n+            @ApiResponse(responseCode = \"200\", description = \"User found successfully\"),\n+            @ApiResponse(responseCode = \"404\", description = \"User not found\"),\n+            @ApiResponse(responseCode = \"500\", description = \"Internal Server Error\")\n+    })\n+    @GetMapping(\"/{id}\")\n+    @PreAuthorize(\"permitAll()\")\n+    public CompletableFuture<ResponseEntity<UserDTO>> getUserById(@PathVariable UUID id) {\n+        return userService.getUserById(id)\n+                .thenApply(ResponseEntity::ok);\n+    }\n+\n+    @Operation(\n+            summary = \"Delete user\",\n+            description = \"This endpoint deletes a user by ID.\"\n+    )\n+    @ApiResponses(value = {\n+            @ApiResponse(responseCode = \"200\", description = \"User deleted successfully\"),\n+            @ApiResponse(responseCode = \"404\", description = \"User not found\"),\n+            @ApiResponse(responseCode = \"500\", description = \"Internal Server Error\")\n+    })\n+    @DeleteMapping(\"/delete/{id}\")\n+    @PreAuthorize(value = \"hasAuthority('ADMIN')\")\n+    public CompletableFuture<ResponseEntity<Void>> deleteUser(@PathVariable UUID id) {\n+        return userService.deleteUser(id)\n+                .thenApply(aVoid -> ResponseEntity.noContent().build());\n+    }\n+\n+    @Operation(\n+            summary = \"Register a new user\",\n+            description = \"This endpoint registers a new user with provided data.\",\n+            requestBody = @io.swagger.v3.oas.annotations.parameters.RequestBody(\n+                    description = \"User registration data\",\n+                    content = @Content(\n+                            schema = @Schema(implementation = User.class),\n+                            examples = @ExampleObject(value = \"{\\n  \\\"username\\\": \\\"john_doe\\\",\\n  \\\"password\\\": \\\"password123\\\" }\")\n+                    )\n+            )\n+    )\n+    @ApiResponses(value = {\n+            @ApiResponse(responseCode = \"200\", description = \"User successfully registered\"),\n+            @ApiResponse(responseCode = \"400\", description = \"User already exists\"),\n+            @ApiResponse(responseCode = \"500\", description = \"Internal Server Error\")\n+    })\n+    @PostMapping(\"/auth/register\")\n+    @PreAuthorize(\"permitAll()\")\n+    public CompletableFuture<ResponseEntity<UserDTO>> registerUser(@RequestBody User user) {\n+        return userService.registerUser(user)\n+                .thenApply(ResponseEntity::ok)\n+                .exceptionally(ex -> {\n+                    if (ex.getCause() instanceof IllegalArgumentException) {\n+                        return ResponseEntity.badRequest().body(null);\n+                    }\n+                    return ResponseEntity.status(500).body(null);\n+                });\n+    }\n+\n+    @Operation(\n+            summary = \"Login user\",\n+            description = \"This endpoint allows a user to login using username and password.\",\n+            requestBody = @io.swagger.v3.oas.annotations.parameters.RequestBody(\n+                    description = \"User login data\",\n+                    content = @Content(\n+                            schema = @Schema(implementation = LoginRequest.class),\n+                            examples = @ExampleObject(value = \"{\\n  \\\"username\\\": \\\"john_doe\\\",\\n  \\\"password\\\": \\\"password123\\\" }\")\n+                    )\n+            )\n+    )\n+    @ApiResponses(value = {\n+            @ApiResponse(responseCode = \"200\", description = \"Login successful\"),\n+            @ApiResponse(responseCode = \"401\", description = \"Invalid credentials\"),\n+            @ApiResponse(responseCode = \"500\", description = \"Internal Server Error\")\n+    })\n+    @PreAuthorize(\"permitAll()\")\n+    @PostMapping(\"/auth/login\")\n+    public CompletableFuture<ResponseEntity<LoginResponse>> loginUser(@RequestBody LoginRequest loginRequest) {\n+        return userService.loginUser(loginRequest)\n+                .thenApply(ResponseEntity::ok)\n+                .exceptionally(ex -> ResponseEntity.badRequest().body(new LoginResponse(\"Ошибка: \" + ex.getMessage())));\n+    }\n+\n+    @GetMapping(\"/me\")\n+    @PreAuthorize(\"isAuthenticated()\")\n+    public CompletableFuture<ResponseEntity<UserDTO>> getMe(@AuthenticationPrincipal CustomUserDetails userDetails) {\n+        return userService.getMe(userDetails)\n+                .thenApply(ResponseEntity::ok);\n+    }\n+\n+    @PatchMapping(\"/update\")\n+    @PreAuthorize(\"hasAuthority('ADMIN')\")\n+    public CompletableFuture<ResponseEntity<UserDTO>> updateUser(\n+            @Parameter(description = \"User ID\", required = true) @RequestParam(name = \"id\", required = true) UUID id,\n+            @RequestBody UserDTO updatedUser,\n+            @AuthenticationPrincipal CustomUserDetails adminDetails) {\n+        return userService.updateUserByAdmin(adminDetails, id, updatedUser)\n+                .thenApply(ResponseEntity::ok);\n+    }\n+\n+    @PutMapping(\"/update\")\n+    @PreAuthorize(\"isAuthenticated()\")\n+    public CompletableFuture<ResponseEntity<UserDTO>> updateMe(\n+            @AuthenticationPrincipal CustomUserDetails userDetails,\n+            @RequestBody UserDTO updatedUser) {\n+        return userService.updateUserBySelf(userDetails, updatedUser)\n+                .thenApply(ResponseEntity::ok);\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754157098787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -159,169 +159,5 @@\n             @RequestBody UserDTO updatedUser) {\n         return userService.updateUserBySelf(userDetails, updatedUser)\n                 .thenApply(ResponseEntity::ok);\n     }\n-}\n-package com.viancis.user.controller;\n-\n-import com.viancis.common.model.User;\n-import com.viancis.common.model.UserDTO;\n-import com.viancis.common.response.LoginResponse;\n-import com.viancis.common.service.CustomUserDetails;\n-import com.viancis.user.service.UserServiceImpl;\n-import com.viancis.user.controller.LoginRequest;\n-import io.swagger.v3.oas.annotations.Operation;\n-import io.swagger.v3.oas.annotations.Parameter;\n-import io.swagger.v3.oas.annotations.media.Content;\n-import io.swagger.v3.oas.annotations.media.ExampleObject;\n-import io.swagger.v3.oas.annotations.media.Schema;\n-import io.swagger.v3.oas.annotations.responses.ApiResponse;\n-import io.swagger.v3.oas.annotations.responses.ApiResponses;\n-import jakarta.validation.Valid;\n-import lombok.AllArgsConstructor;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.security.core.annotation.AuthenticationPrincipal;\n-import org.springframework.web.bind.annotation.*;\n-\n-import java.util.List;\n-import java.util.UUID;\n-import java.util.concurrent.CompletableFuture;\n-\n-@AllArgsConstructor\n-@RestController\n-@RequestMapping(\"/api/users\")\n-public class UserController {\n-\n-    @Autowired\n-    private UserServiceImpl userService;\n-\n-    @Operation(\n-            summary = \"Get all users\",\n-            description = \"This endpoint returns a list of all users.\"\n-    )\n-    @ApiResponses(value = {\n-            @ApiResponse(responseCode = \"200\", description = \"List of users retrieved successfully\",\n-                    content = @Content(mediaType = \"application/json\",\n-                            schema = @Schema(implementation = UserDTO.class))),\n-            @ApiResponse(responseCode = \"500\", description = \"Internal Server Error\")\n-    })\n-    @GetMapping\n-    @PreAuthorize(\"permitAll()\")\n-    public CompletableFuture<ResponseEntity<List<UserDTO>>> getAllUsers() {\n-        return userService.getAllUsers()\n-                .thenApply(ResponseEntity::ok);\n-    }\n-\n-    @Operation(\n-            summary = \"Get user by ID\",\n-            description = \"This endpoint returns the user details based on the provided ID.\"\n-    )\n-    @ApiResponses(value = {\n-            @ApiResponse(responseCode = \"200\", description = \"User found successfully\"),\n-            @ApiResponse(responseCode = \"404\", description = \"User not found\"),\n-            @ApiResponse(responseCode = \"500\", description = \"Internal Server Error\")\n-    })\n-    @GetMapping(\"/{id}\")\n-    @PreAuthorize(\"permitAll()\")\n-    public CompletableFuture<ResponseEntity<UserDTO>> getUserById(@PathVariable UUID id) {\n-        return userService.getUserById(id)\n-                .thenApply(ResponseEntity::ok);\n-    }\n-\n-    @Operation(\n-            summary = \"Delete user\",\n-            description = \"This endpoint deletes a user by ID.\"\n-    )\n-    @ApiResponses(value = {\n-            @ApiResponse(responseCode = \"200\", description = \"User deleted successfully\"),\n-            @ApiResponse(responseCode = \"404\", description = \"User not found\"),\n-            @ApiResponse(responseCode = \"500\", description = \"Internal Server Error\")\n-    })\n-    @DeleteMapping(\"/delete/{id}\")\n-    @PreAuthorize(value = \"hasAuthority('ADMIN')\")\n-    public CompletableFuture<ResponseEntity<Void>> deleteUser(@PathVariable UUID id) {\n-        return userService.deleteUser(id)\n-                .thenApply(aVoid -> ResponseEntity.noContent().build());\n-    }\n-\n-    @Operation(\n-            summary = \"Register a new user\",\n-            description = \"This endpoint registers a new user with provided data.\",\n-            requestBody = @io.swagger.v3.oas.annotations.parameters.RequestBody(\n-                    description = \"User registration data\",\n-                    content = @Content(\n-                            schema = @Schema(implementation = User.class),\n-                            examples = @ExampleObject(value = \"{\\n  \\\"username\\\": \\\"john_doe\\\",\\n  \\\"password\\\": \\\"password123\\\" }\")\n-                    )\n-            )\n-    )\n-    @ApiResponses(value = {\n-            @ApiResponse(responseCode = \"200\", description = \"User successfully registered\"),\n-            @ApiResponse(responseCode = \"400\", description = \"User already exists\"),\n-            @ApiResponse(responseCode = \"500\", description = \"Internal Server Error\")\n-    })\n-    @PostMapping(\"/auth/register\")\n-    @PreAuthorize(\"permitAll()\")\n-    public CompletableFuture<ResponseEntity<UserDTO>> registerUser(@RequestBody User user) {\n-        \n-        return userService.registerUser(user)\n-                .thenApply(ResponseEntity::ok)\n-                .exceptionally(ex -> {\n-                    if (ex.getCause() instanceof IllegalArgumentException) {\n-                        return ResponseEntity.badRequest().body(null);\n-                    }\n-                    return ResponseEntity.status(500).body(null);\n-                });\n-    }\n-\n-    @Operation(\n-            summary = \"Login user\",\n-            description = \"This endpoint allows a user to login using username and password.\",\n-            requestBody = @io.swagger.v3.oas.annotations.parameters.RequestBody(\n-                    description = \"User login data\",\n-                    content = @Content(\n-                            schema = @Schema(implementation = LoginRequest.class),\n-                            examples = @ExampleObject(value = \"{\\n  \\\"username\\\": \\\"john_doe\\\",\\n  \\\"password\\\": \\\"password123\\\" }\")\n-                    )\n-            )\n-    )\n-    @ApiResponses(value = {\n-            @ApiResponse(responseCode = \"200\", description = \"Login successful\"),\n-            @ApiResponse(responseCode = \"401\", description = \"Invalid credentials\"),\n-            @ApiResponse(responseCode = \"500\", description = \"Internal Server Error\")\n-    })\n-    @PreAuthorize(\"permitAll()\")\n-    @PostMapping(\"/auth/login\")\n-    public CompletableFuture<ResponseEntity<LoginResponse>> loginUser(@RequestBody LoginRequest loginRequest) {\n-        return userService.loginUser(loginRequest)\n-                .thenApply(ResponseEntity::ok)\n-                .exceptionally(ex -> ResponseEntity.badRequest().body(new LoginResponse(\"Ошибка: \" + ex.getMessage())));\n-    }\n-\n-    @GetMapping(\"/me\")\n-    @PreAuthorize(\"isAuthenticated()\")\n-    public CompletableFuture<ResponseEntity<UserDTO>> getMe(@AuthenticationPrincipal CustomUserDetails userDetails) {\n-        return userService.getMe(userDetails)\n-                .thenApply(ResponseEntity::ok);\n-    }\n-\n-    @PatchMapping(\"/update\")\n-    @PreAuthorize(\"hasAuthority('ADMIN')\")\n-    public CompletableFuture<ResponseEntity<UserDTO>> updateUser(\n-            @Parameter(description = \"User ID\", required = true) @RequestParam(name = \"id\", required = true) UUID id,\n-            @RequestBody UserDTO updatedUser,\n-            @AuthenticationPrincipal CustomUserDetails adminDetails) {\n-        return userService.updateUserByAdmin(adminDetails, id, updatedUser)\n-                .thenApply(ResponseEntity::ok);\n-    }\n-\n-    @PutMapping(\"/update\")\n-    @PreAuthorize(\"isAuthenticated()\")\n-    public CompletableFuture<ResponseEntity<UserDTO>> updateMe(\n-            @AuthenticationPrincipal CustomUserDetails userDetails,\n-            @RequestBody UserDTO updatedUser) {\n-        return userService.updateUserBySelf(userDetails, updatedUser)\n-                .thenApply(ResponseEntity::ok);\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754157175336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,8 +99,9 @@\n             @ApiResponse(responseCode = \"500\", description = \"Internal Server Error\")\n     })\n     @PostMapping(\"/auth/register\")\n     @PreAuthorize(\"permitAll()\")\n+    \n     public CompletableFuture<ResponseEntity<UserDTO>> registerUser(@RequestBody User user) {\n         return userService.registerUser(user)\n                 .thenApply(ResponseEntity::ok)\n                 .exceptionally(ex -> {\n"
                },
                {
                    "date": 1754157185045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,9 +99,8 @@\n             @ApiResponse(responseCode = \"500\", description = \"Internal Server Error\")\n     })\n     @PostMapping(\"/auth/register\")\n     @PreAuthorize(\"permitAll()\")\n-    \n     public CompletableFuture<ResponseEntity<UserDTO>> registerUser(@RequestBody User user) {\n         return userService.registerUser(user)\n                 .thenApply(ResponseEntity::ok)\n                 .exceptionally(ex -> {\n"
                },
                {
                    "date": 1754157235732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,8 +99,9 @@\n             @ApiResponse(responseCode = \"500\", description = \"Internal Server Error\")\n     })\n     @PostMapping(\"/auth/register\")\n     @PreAuthorize(\"permitAll()\")\n+    \n     public CompletableFuture<ResponseEntity<UserDTO>> registerUser(@RequestBody User user) {\n         return userService.registerUser(user)\n                 .thenApply(ResponseEntity::ok)\n                 .exceptionally(ex -> {\n"
                },
                {
                    "date": 1754157329177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,18 +99,13 @@\n             @ApiResponse(responseCode = \"500\", description = \"Internal Server Error\")\n     })\n     @PostMapping(\"/auth/register\")\n     @PreAuthorize(\"permitAll()\")\n-    \n+\n     public CompletableFuture<ResponseEntity<UserDTO>> registerUser(@RequestBody User user) {\n         return userService.registerUser(user)\n                 .thenApply(ResponseEntity::ok)\n-                .exceptionally(ex -> {\n-                    if (ex.getCause() instanceof IllegalArgumentException) {\n-                        return ResponseEntity.badRequest().body(null);\n-                    }\n-                    return ResponseEntity.status(500).body(null);\n-                });\n+                \n     }\n \n     @Operation(\n             summary = \"Login user\",\n"
                },
                {
                    "date": 1754157338954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,10 +102,10 @@\n     @PreAuthorize(\"permitAll()\")\n \n     public CompletableFuture<ResponseEntity<UserDTO>> registerUser(@RequestBody User user) {\n         return userService.registerUser(user)\n-                .thenApply(ResponseEntity::ok)\n-                \n+                .thenApply(ResponseEntity::ok);\n+              \n     }\n \n     @Operation(\n             summary = \"Login user\",\n"
                },
                {
                    "date": 1754157449567,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,9 +103,8 @@\n \n     public CompletableFuture<ResponseEntity<UserDTO>> registerUser(@RequestBody User user) {\n         return userService.registerUser(user)\n                 .thenApply(ResponseEntity::ok);\n-              \n     }\n \n     @Operation(\n             summary = \"Login user\",\n"
                },
                {
                    "date": 1754177410798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,158 @@\n+package com.viancis.user.controller;\n+\n+import com.viancis.common.model.User;\n+import com.viancis.common.model.UserDTO;\n+import com.viancis.common.response.LoginResponse;\n+import com.viancis.common.service.CustomUserDetails;\n+import com.viancis.user.service.UserServiceImpl;\n+import com.viancis.user.controller.LoginRequest;\n+import io.swagger.v3.oas.annotations.Operation;\n+import io.swagger.v3.oas.annotations.Parameter;\n+import io.swagger.v3.oas.annotations.media.Content;\n+import io.swagger.v3.oas.annotations.media.ExampleObject;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n+import jakarta.validation.Valid;\n+import lombok.AllArgsConstructor;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.security.core.annotation.AuthenticationPrincipal;\n+import org.springframework.web.bind.annotation.*;\n+\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+\n+@AllArgsConstructor\n+@RestController\n+@RequestMapping(\"/api/users\")\n+public class UserController {\n+\n+    @Autowired\n+    private UserServiceImpl userService;\n+\n+    @Operation(\n+            summary = \"Get all users\",\n+            description = \"This endpoint returns a list of all users.\"\n+    )\n+    @ApiResponses(value = {\n+            @ApiResponse(responseCode = \"200\", description = \"List of users retrieved successfully\",\n+                    content = @Content(mediaType = \"application/json\",\n+                            schema = @Schema(implementation = UserDTO.class))),\n+            @ApiResponse(responseCode = \"500\", description = \"Internal Server Error\")\n+    })\n+    @GetMapping\n+    @PreAuthorize(\"permitAll()\")\n+    public CompletableFuture<ResponseEntity<List<UserDTO>>> getAllUsers() {\n+        return userService.getAllUsers()\n+                .thenApply(ResponseEntity::ok);\n+    }\n+\n+    @Operation(\n+            summary = \"Get user by ID\",\n+            description = \"This endpoint returns the user details based on the provided ID.\"\n+    )\n+    @ApiResponses(value = {\n+            @ApiResponse(responseCode = \"200\", description = \"User found successfully\"),\n+            @ApiResponse(responseCode = \"404\", description = \"User not found\"),\n+            @ApiResponse(responseCode = \"500\", description = \"Internal Server Error\")\n+    })\n+    @GetMapping(\"/{id}\")\n+    @PreAuthorize(\"permitAll()\")\n+    public CompletableFuture<ResponseEntity<UserDTO>> getUserById(@PathVariable UUID id) {\n+        return userService.getUserById(id)\n+                .thenApply(ResponseEntity::ok);\n+    }\n+\n+    @Operation(\n+            summary = \"Delete user\",\n+            description = \"This endpoint deletes a user by ID.\"\n+    )\n+    @ApiResponses(value = {\n+            @ApiResponse(responseCode = \"200\", description = \"User deleted successfully\"),\n+            @ApiResponse(responseCode = \"404\", description = \"User not found\"),\n+            @ApiResponse(responseCode = \"500\", description = \"Internal Server Error\")\n+    })\n+    @DeleteMapping(\"/delete/{id}\")\n+    @PreAuthorize(value = \"hasAuthority('ADMIN')\")\n+    public CompletableFuture<ResponseEntity<Void>> deleteUser(@PathVariable UUID id) {\n+        return userService.deleteUser(id)\n+                .thenApply(aVoid -> ResponseEntity.noContent().build());\n+    }\n+\n+    @Operation(\n+            summary = \"Register a new user\",\n+            description = \"This endpoint registers a new user with provided data.\",\n+            requestBody = @io.swagger.v3.oas.annotations.parameters.RequestBody(\n+                    description = \"User registration data\",\n+                    content = @Content(\n+                            schema = @Schema(implementation = User.class),\n+                            examples = @ExampleObject(value = \"{\\n  \\\"username\\\": \\\"john_doe\\\",\\n  \\\"password\\\": \\\"password123\\\" }\")\n+                    )\n+            )\n+    )\n+    @ApiResponses(value = {\n+            @ApiResponse(responseCode = \"200\", description = \"User successfully registered\"),\n+            @ApiResponse(responseCode = \"400\", description = \"User already exists\"),\n+            @ApiResponse(responseCode = \"500\", description = \"Internal Server Error\")\n+    })\n+    @PostMapping(\"/auth/register\")\n+    @PreAuthorize(\"permitAll()\")\n+\n+    public CompletableFuture<ResponseEntity<UserDTO>> registerUser(@RequestBody User user) {\n+        return userService.registerUser(user)\n+                .thenApply(ResponseEntity::ok);\n+    }\n+\n+    @Operation(\n+            summary = \"Login user\",\n+            description = \"This endpoint allows a user to login using username and password.\",\n+            requestBody = @io.swagger.v3.oas.annotations.parameters.RequestBody(\n+                    description = \"User login data\",\n+                    content = @Content(\n+                            schema = @Schema(implementation = LoginRequest.class),\n+                            examples = @ExampleObject(value = \"{\\n  \\\"username\\\": \\\"john_doe\\\",\\n  \\\"password\\\": \\\"password123\\\" }\")\n+                    )\n+            )\n+    )\n+    @ApiResponses(value = {\n+            @ApiResponse(responseCode = \"200\", description = \"Login successful\"),\n+            @ApiResponse(responseCode = \"401\", description = \"Invalid credentials\"),\n+            @ApiResponse(responseCode = \"500\", description = \"Internal Server Error\")\n+    })\n+    @PreAuthorize(\"permitAll()\")\n+    @PostMapping(\"/auth/login\")\n+    public CompletableFuture<ResponseEntity<LoginResponse>> loginUser(@RequestBody LoginRequest loginRequest) {\n+        return userService.loginUser(loginRequest)\n+                .thenApply(ResponseEntity::ok)\n+                .exceptionally(ex -> ResponseEntity.badRequest().body(new LoginResponse(\"Ошибка: \" + ex.getMessage())));\n+    }\n+\n+    @GetMapping(\"/me\")\n+    @PreAuthorize(\"isAuthenticated()\")\n+    public CompletableFuture<ResponseEntity<UserDTO>> getMe(@AuthenticationPrincipal CustomUserDetails userDetails) {\n+        return userService.getMe(userDetails)\n+                .thenApply(ResponseEntity::ok);\n+    }\n+\n+    @PatchMapping(\"/update\")\n+    @PreAuthorize(\"hasAuthority('ADMIN')\")\n+    public CompletableFuture<ResponseEntity<UserDTO>> updateUser(\n+            @Parameter(description = \"User ID\", required = true) @RequestParam(name = \"id\", required = true) UUID id,\n+            @RequestBody UserDTO updatedUser,\n+            @AuthenticationPrincipal CustomUserDetails adminDetails) {\n+        return userService.updateUserByAdmin(adminDetails, id, updatedUser)\n+                .thenApply(ResponseEntity::ok);\n+    }\n+\n+    @PutMapping(\"/update\")\n+    @PreAuthorize(\"isAuthenticated()\")\n+    public CompletableFuture<ResponseEntity<UserDTO>> updateMe(\n+            @AuthenticationPrincipal CustomUserDetails userDetails,\n+            @RequestBody UserDTO updatedUser) {\n+        return userService.updateUserBySelf(userDetails, updatedUser)\n+                .thenApply(ResponseEntity::ok);\n+    }\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1754150474148,
            "name": "Commit-0",
            "content": "package com.viancis.user.controller;\n\nimport com.viancis.common.model.User;\nimport com.viancis.common.model.UserDTO;\nimport com.viancis.common.response.LoginResponse;\nimport com.viancis.common.service.CustomUserDetails;\nimport com.viancis.user.service.UserServiceImpl;\nimport com.viancis.user.controller.RegisterRequest;\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.Parameter;\nimport io.swagger.v3.oas.annotations.media.Content;\nimport io.swagger.v3.oas.annotations.media.ExampleObject;\nimport io.swagger.v3.oas.annotations.media.Schema;\nimport io.swagger.v3.oas.annotations.responses.ApiResponse;\nimport io.swagger.v3.oas.annotations.responses.ApiResponses;\nimport jakarta.validation.Valid;\nimport lombok.AllArgsConstructor;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.access.prepost.PreAuthorize;\nimport org.springframework.security.core.annotation.AuthenticationPrincipal;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\nimport java.util.UUID;\nimport java.util.concurrent.CompletableFuture;\n\n@AllArgsConstructor\n@RestController\n@RequestMapping(\"/api/users\")\npublic class UserController {\n\n    @Autowired\n    private UserServiceImpl userService;\n\n    @Operation(\n            summary = \"Get all users\",\n            description = \"This endpoint returns a list of all users.\"\n    )\n    @ApiResponses(value = {\n            @ApiResponse(responseCode = \"200\", description = \"List of users retrieved successfully\",\n                    content = @Content(mediaType = \"application/json\",\n                            schema = @Schema(implementation = UserDTO.class))),\n            @ApiResponse(responseCode = \"500\", description = \"Internal Server Error\")\n    })\n    @GetMapping\n    @PreAuthorize(\"permitAll()\")\n    public CompletableFuture<ResponseEntity<List<UserDTO>>> getAllUsers() {\n        return userService.getAllUsers()\n                .thenApply(ResponseEntity::ok);\n    }\n\n    @Operation(\n            summary = \"Get user by ID\",\n            description = \"This endpoint returns the user details based on the provided ID.\"\n    )\n    @ApiResponses(value = {\n            @ApiResponse(responseCode = \"200\", description = \"User found successfully\"),\n            @ApiResponse(responseCode = \"404\", description = \"User not found\"),\n            @ApiResponse(responseCode = \"500\", description = \"Internal Server Error\")\n    })\n    @GetMapping(\"/{id}\")\n    @PreAuthorize(\"permitAll()\")\n    public CompletableFuture<ResponseEntity<UserDTO>> getUserById(@PathVariable UUID id) {\n        return userService.getUserById(id)\n                .thenApply(ResponseEntity::ok);\n    }\n\n    @Operation(\n            summary = \"Delete user\",\n            description = \"This endpoint deletes a user by ID.\"\n    )\n    @ApiResponses(value = {\n            @ApiResponse(responseCode = \"200\", description = \"User deleted successfully\"),\n            @ApiResponse(responseCode = \"404\", description = \"User not found\"),\n            @ApiResponse(responseCode = \"500\", description = \"Internal Server Error\")\n    })\n    @DeleteMapping(\"/delete/{id}\")\n    @PreAuthorize(value = \"hasAuthority('ADMIN')\")\n    public CompletableFuture<ResponseEntity<Void>> deleteUser(@PathVariable UUID id) {\n        return userService.deleteUser(id)\n                .thenApply(aVoid -> ResponseEntity.noContent().build());\n    }\n\n    @Operation(\n            summary = \"Register a new user\",\n            description = \"This endpoint registers a new user with provided data.\",\n            requestBody = @io.swagger.v3.oas.annotations.parameters.RequestBody(\n                    description = \"User registration data\",\n                    content = @Content(\n                            schema = @Schema(implementation = User.class),\n                            examples = @ExampleObject(value = \"{\\n  \\\"username\\\": \\\"john_doe\\\",\\n  \\\"password\\\": \\\"password123\\\" }\")\n                    )\n            )\n    )\n    @ApiResponses(value = {\n            @ApiResponse(responseCode = \"200\", description = \"User successfully registered\"),\n            @ApiResponse(responseCode = \"400\", description = \"User already exists\"),\n            @ApiResponse(responseCode = \"500\", description = \"Internal Server Error\")\n    })\n    @PostMapping(\"/auth/register\")\n    @PreAuthorize(\"permitAll()\")\n    public CompletableFuture<ResponseEntity<UserDTO>> registerUser(@RequestBody @Valid RegisterRequest registerRequest) {\n        User user = new User();\n        user.setUsername(registerRequest.getUsername());\n        user.setPassword(registerRequest.getPassword());\n        \n        return userService.registerUser(user)\n                .thenApply(ResponseEntity::ok)\n                .exceptionally(ex -> ResponseEntity.badRequest().body(null));\n    }\n\n    @Operation(\n            summary = \"Login user\",\n            description = \"This endpoint allows a user to login using username and password.\",\n            requestBody = @io.swagger.v3.oas.annotations.parameters.RequestBody(\n                    description = \"User login data\",\n                    content = @Content(\n                            schema = @Schema(implementation = User.class),\n                            examples = @ExampleObject(value = \"{\\n  \\\"username\\\": \\\"john_doe\\\",\\n  \\\"password\\\": \\\"password123\\\" }\")\n                    )\n            )\n    )\n    @ApiResponses(value = {\n            @ApiResponse(responseCode = \"200\", description = \"Login successful\"),\n            @ApiResponse(responseCode = \"401\", description = \"Invalid credentials\"),\n            @ApiResponse(responseCode = \"500\", description = \"Internal Server Error\")\n    })\n    @PreAuthorize(\"permitAll()\")\n    @PostMapping(\"/auth/login\")\n    public CompletableFuture<ResponseEntity<LoginResponse>> loginUser(@RequestBody @Valid LoginRequest loginRequest) {\n        return userService.loginUser(loginRequest)\n                .thenApply(ResponseEntity::ok)\n                .exceptionally(ex -> ResponseEntity.badRequest().body(new LoginResponse(\"Ошибка: \" + ex.getMessage())));\n    }\n\n    @GetMapping(\"/me\")\n    @PreAuthorize(\"isAuthenticated()\")\n    public CompletableFuture<ResponseEntity<UserDTO>> getMe(@AuthenticationPrincipal CustomUserDetails userDetails) {\n        return userService.getMe(userDetails)\n                .thenApply(ResponseEntity::ok);\n    }\n\n    @PatchMapping(\"/update\")\n    @PreAuthorize(\"hasAuthority('ADMIN')\")\n    public CompletableFuture<ResponseEntity<UserDTO>> updateUser(\n            @Parameter(description = \"User ID\", required = true) @RequestParam(name = \"id\", required = true) UUID id,\n            @RequestBody UserDTO updatedUser,\n            @AuthenticationPrincipal CustomUserDetails adminDetails) {\n        return userService.updateUserByAdmin(adminDetails, id, updatedUser)\n                .thenApply(ResponseEntity::ok);\n    }\n\n    @PutMapping(\"/update\")\n    @PreAuthorize(\"isAuthenticated()\")\n    public CompletableFuture<ResponseEntity<UserDTO>> updateMe(\n            @AuthenticationPrincipal CustomUserDetails userDetails,\n            @RequestBody UserDTO updatedUser) {\n        return userService.updateUserBySelf(userDetails, updatedUser)\n                .thenApply(ResponseEntity::ok);\n    }\n}"
        }
    ]
}