{
    "sourceFile": "user/src/main/java/com/viancis/statistic/controller/UserController.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1754147885522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1754148619670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,9 +122,9 @@\n     })\n     @PreAuthorize(\"permitAll()\")\n     @PostMapping(\"/auth/login\")\n     public CompletableFuture<ResponseEntity<LoginResponse>> loginUser(@RequestBody @Valid LoginRequest loginRequest) {\n-        return userService.loginUser(user)\n+        return userService.loginUser(loginRequest)\n                 .thenApply(ResponseEntity::ok)\n                 .exceptionally(ex -> ResponseEntity.badRequest().body(new LoginResponse(\"Ошибка: \" + ex.getMessage())));\n     }\n \n"
                }
            ],
            "date": 1754147885522,
            "name": "Commit-0",
            "content": "package com.viancis.statistic.controller;\n\nimport com.viancis.common.model.User;\nimport com.viancis.common.model.UserDTO;\nimport com.viancis.common.response.LoginResponse;\nimport com.viancis.common.service.CustomUserDetails;\nimport com.viancis.statistic.service.UserServiceImpl;\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.Parameter;\nimport io.swagger.v3.oas.annotations.media.Content;\nimport io.swagger.v3.oas.annotations.media.ExampleObject;\nimport io.swagger.v3.oas.annotations.media.Schema;\nimport io.swagger.v3.oas.annotations.responses.ApiResponse;\nimport io.swagger.v3.oas.annotations.responses.ApiResponses;\nimport jakarta.validation.Valid;\nimport lombok.AllArgsConstructor;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.access.prepost.PreAuthorize;\nimport org.springframework.security.core.annotation.AuthenticationPrincipal;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\nimport java.util.UUID;\nimport java.util.concurrent.CompletableFuture;\n\n@AllArgsConstructor\n@RestController\n@RequestMapping(\"/api/users\")\npublic class UserController {\n\n    @Autowired\n    private UserServiceImpl userService;\n\n    @Operation(\n            summary = \"Get all users\",\n            description = \"This endpoint returns a list of all users.\"\n    )\n    @ApiResponses(value = {\n            @ApiResponse(responseCode = \"200\", description = \"List of users retrieved successfully\",\n                    content = @Content(mediaType = \"application/json\",\n                            schema = @Schema(implementation = UserDTO.class))),\n            @ApiResponse(responseCode = \"500\", description = \"Internal Server Error\")\n    })\n    @GetMapping\n    @PreAuthorize(\"permitAll()\")\n    public CompletableFuture<ResponseEntity<List<UserDTO>>> getAllUsers() {\n        return userService.getAllUsers()\n                .thenApply(ResponseEntity::ok);\n    }\n\n    @Operation(\n            summary = \"Get user by ID\",\n            description = \"This endpoint returns the user details based on the provided ID.\"\n    )\n    @ApiResponses(value = {\n            @ApiResponse(responseCode = \"200\", description = \"User found successfully\"),\n            @ApiResponse(responseCode = \"404\", description = \"User not found\"),\n            @ApiResponse(responseCode = \"500\", description = \"Internal Server Error\")\n    })\n    @GetMapping(\"/{id}\")\n    @PreAuthorize(\"permitAll()\")\n    public CompletableFuture<ResponseEntity<UserDTO>> getUserById(@PathVariable UUID id) {\n        return userService.getUserById(id)\n                .thenApply(ResponseEntity::ok);\n    }\n\n    @Operation(\n            summary = \"Delete user\",\n            description = \"This endpoint deletes a user by ID.\"\n    )\n    @ApiResponses(value = {\n            @ApiResponse(responseCode = \"200\", description = \"User deleted successfully\"),\n            @ApiResponse(responseCode = \"404\", description = \"User not found\"),\n            @ApiResponse(responseCode = \"500\", description = \"Internal Server Error\")\n    })\n    @DeleteMapping(\"/delete/{id}\")\n    @PreAuthorize(value = \"hasAuthority('ADMIN')\")\n    public CompletableFuture<ResponseEntity<Void>> deleteUser(@PathVariable UUID id) {\n        return userService.deleteUser(id)\n                .thenApply(aVoid -> ResponseEntity.noContent().build());\n    }\n\n    @Operation(\n            summary = \"Register a new user\",\n            description = \"This endpoint registers a new user with provided data.\",\n            requestBody = @io.swagger.v3.oas.annotations.parameters.RequestBody(\n                    description = \"User registration data\",\n                    content = @Content(\n                            schema = @Schema(implementation = User.class),\n                            examples = @ExampleObject(value = \"{\\n  \\\"username\\\": \\\"john_doe\\\",\\n  \\\"password\\\": \\\"password123\\\" }\")\n                    )\n            )\n    )\n    @ApiResponses(value = {\n            @ApiResponse(responseCode = \"200\", description = \"User successfully registered\"),\n            @ApiResponse(responseCode = \"400\", description = \"User already exists\"),\n            @ApiResponse(responseCode = \"500\", description = \"Internal Server Error\")\n    })\n    @PostMapping(\"/auth/register\")\n    @PreAuthorize(\"permitAll()\")\n    public CompletableFuture<ResponseEntity<UserDTO>> registerUser(@RequestBody User user) {\n        return userService.registerUser(user)\n                .thenApply(ResponseEntity::ok);\n    }\n\n    @Operation(\n            summary = \"Login user\",\n            description = \"This endpoint allows a user to login using username and password.\",\n            requestBody = @io.swagger.v3.oas.annotations.parameters.RequestBody(\n                    description = \"User login data\",\n                    content = @Content(\n                            schema = @Schema(implementation = User.class),\n                            examples = @ExampleObject(value = \"{\\n  \\\"username\\\": \\\"john_doe\\\",\\n  \\\"password\\\": \\\"password123\\\" }\")\n                    )\n            )\n    )\n    @ApiResponses(value = {\n            @ApiResponse(responseCode = \"200\", description = \"Login successful\"),\n            @ApiResponse(responseCode = \"401\", description = \"Invalid credentials\"),\n            @ApiResponse(responseCode = \"500\", description = \"Internal Server Error\")\n    })\n    @PreAuthorize(\"permitAll()\")\n    @PostMapping(\"/auth/login\")\n    public CompletableFuture<ResponseEntity<LoginResponse>> loginUser(@RequestBody @Valid LoginRequest loginRequest) {\n        return userService.loginUser(user)\n                .thenApply(ResponseEntity::ok)\n                .exceptionally(ex -> ResponseEntity.badRequest().body(new LoginResponse(\"Ошибка: \" + ex.getMessage())));\n    }\n\n    @GetMapping(\"/me\")\n    @PreAuthorize(\"isAuthenticated()\")\n    public CompletableFuture<ResponseEntity<UserDTO>> getMe(@AuthenticationPrincipal CustomUserDetails userDetails) {\n        return userService.getMe(userDetails)\n                .thenApply(ResponseEntity::ok);\n    }\n\n    @PatchMapping(\"/update\")\n    @PreAuthorize(\"hasAuthority('ADMIN')\")\n    public CompletableFuture<ResponseEntity<UserDTO>> updateUser(\n            @Parameter(description = \"User ID\", required = true) @RequestParam(name = \"id\", required = true) UUID id,\n            @RequestBody UserDTO updatedUser,\n            @AuthenticationPrincipal CustomUserDetails adminDetails) {\n        return userService.updateUserByAdmin(adminDetails, id, updatedUser)\n                .thenApply(ResponseEntity::ok);\n    }\n\n    @PutMapping(\"/update\")\n    @PreAuthorize(\"isAuthenticated()\")\n    public CompletableFuture<ResponseEntity<UserDTO>> updateMe(\n            @AuthenticationPrincipal CustomUserDetails userDetails,\n            @RequestBody UserDTO updatedUser) {\n        return userService.updateUserBySelf(userDetails, updatedUser)\n                .thenApply(ResponseEntity::ok);\n    }\n}"
        }
    ]
}