{
    "sourceFile": "deploy.sh",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1754144952203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1754147481839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,195 @@\n+#!/bin/bash\n+\n+# Скрипт для деплоя проекта Gleb\n+# Использование: ./deploy.sh [start|stop|restart|logs|status|clean]\n+\n+set -e\n+\n+PROJECT_NAME=\"gleb\"\n+\n+# Цвета для вывода\n+RED='\\033[0;31m'\n+GREEN='\\033[0;32m'\n+YELLOW='\\033[1;33m'\n+BLUE='\\033[0;34m'\n+NC='\\033[0m' # No Color\n+\n+# Функция для вывода сообщений\n+print_message() {\n+    echo -e \"${GREEN}[INFO]${NC} $1\"\n+}\n+\n+print_warning() {\n+    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n+}\n+\n+print_error() {\n+    echo -e \"${RED}[ERROR]${NC} $1\"\n+}\n+\n+print_header() {\n+    echo -e \"${BLUE}================================${NC}\"\n+    echo -e \"${BLUE}  GLEB MICROSERVICES DEPLOYMENT${NC}\"\n+    echo -e \"${BLUE}================================${NC}\"\n+}\n+\n+# Проверка наличия Docker и Docker Compose\n+check_dependencies() {\n+    if ! command -v docker &> /dev/null; then\n+        print_error \"Docker не установлен. Установите Docker и попробуйте снова.\"\n+        exit 1\n+    fi\n+    \n+    if ! command -v docker-compose &> /dev/null; then\n+        print_error \"Docker Compose не установлен. Установите Docker Compose и попробуйте снова.\"\n+        exit 1\n+    fi\n+}\n+\n+# Функция для запуска проекта\n+start_project() {\n+    print_message \"Запуск проекта $PROJECT_NAME...\"\n+    \n+    # Остановка существующих контейнеров\n+    docker-compose down 2>/dev/null || true\n+    \n+    # Сборка и запуск\n+    docker-compose up -d --build\n+    \n+    print_message \"Ожидание запуска сервисов...\"\n+    sleep 30\n+    \n+    # Проверка статуса сервисов\n+    check_services_status\n+    \n+    print_message \"Проект успешно запущен!\"\n+    print_service_urls\n+}\n+\n+# Функция для остановки проекта\n+stop_project() {\n+    print_message \"Остановка проекта $PROJECT_NAME...\"\n+    docker-compose down\n+    print_message \"Проект остановлен.\"\n+}\n+\n+# Функция для перезапуска проекта\n+restart_project() {\n+    print_message \"Перезапуск проекта $PROJECT_NAME...\"\n+    stop_project\n+    start_project\n+}\n+\n+# Функция для просмотра логов\n+show_logs() {\n+    if [ -z \"$1\" ]; then\n+        print_message \"Показать логи всех сервисов...\"\n+        docker-compose logs -f\n+    else\n+        print_message \"Показать логи сервиса $1...\"\n+        docker-compose logs -f \"$1\"\n+    fi\n+}\n+\n+# Функция для проверки статуса сервисов\n+check_services_status() {\n+    print_message \"Проверка статуса сервисов...\"\n+    \n+    services=(\"postgres\" \"rabbitmq\" \"prometheus\" \"grafana\" \"user-service\" \"point-service\" \"statistic-service\")\n+    \n+    for service in \"${services[@]}\"; do\n+        if docker-compose ps | grep -q \"$service.*Up\"; then\n+            print_message \"✅ $service - запущен\"\n+        else\n+            print_error \"❌ $service - не запущен\"\n+        fi\n+    done\n+}\n+\n+# Функция для показа URL сервисов\n+print_service_urls() {\n+    echo \"\"\n+    print_message \"Доступные сервисы:\"\n+    echo -e \"${BLUE}User Service:${NC} http://localhost:8090\"\n+    echo -e \"${BLUE}Point Service:${NC} http://localhost:8091\"\n+    echo -e \"${BLUE}Statistic Service:${NC} http://localhost:8095\"\n+    echo -e \"${BLUE}RabbitMQ Management:${NC} http://localhost:15673 (guest/guest)\"\n+    echo -e \"${BLUE}Prometheus:${NC} http://localhost:9090\"\n+    echo -e \"${BLUE}Grafana:${NC} http://localhost:3000 (admin/admin)\"\n+    echo \"\"\n+    print_message \"Метрики сервисов:\"\n+    echo -e \"${BLUE}User Service Metrics:${NC} http://localhost:8090/actuator/prometheus\"\n+    echo -e \"${BLUE}Point Service Metrics:${NC} http://localhost:8062/actuator/prometheus\"\n+    echo -e \"${BLUE}Statistic Service Metrics:${NC} http://localhost:8095/actuator/prometheus\"\n+}\n+\n+# Функция для очистки\n+clean_project() {\n+    print_warning \"Очистка проекта (удаление всех контейнеров, образов и томов)...\"\n+    read -p \"Вы уверены? (y/N): \" -n 1 -r\n+    echo\n+    if [[ $REPLY =~ ^[Yy]$ ]]; then\n+        docker-compose down -v --rmi all\n+        docker system prune -f\n+        print_message \"Очистка завершена.\"\n+    else\n+        print_message \"Очистка отменена.\"\n+    fi\n+}\n+\n+# Функция для показа статуса\n+show_status() {\n+    print_message \"Статус проекта $PROJECT_NAME:\"\n+    docker-compose ps\n+    echo \"\"\n+    check_services_status\n+}\n+\n+# Основная логика\n+main() {\n+    print_header\n+    \n+    check_dependencies\n+    \n+    case \"${1:-start}\" in\n+        \"start\")\n+            start_project\n+            ;;\n+        \"stop\")\n+            stop_project\n+            ;;\n+        \"restart\")\n+            restart_project\n+            ;;\n+        \"logs\")\n+            show_logs \"$2\"\n+            ;;\n+        \"status\")\n+            show_status\n+            ;;\n+        \"clean\")\n+            clean_project\n+            ;;\n+        \"help\"|\"-h\"|\"--help\")\n+            echo \"Использование: $0 [команда]\"\n+            echo \"\"\n+            echo \"Команды:\"\n+            echo \"  start     - Запустить проект (по умолчанию)\"\n+            echo \"  stop      - Остановить проект\"\n+            echo \"  restart   - Перезапустить проект\"\n+            echo \"  logs      - Показать логи всех сервисов\"\n+            echo \"  logs [service] - Показать логи конкретного сервиса\"\n+            echo \"  status    - Показать статус сервисов\"\n+            echo \"  clean     - Очистить все контейнеры и образы\"\n+            echo \"  help      - Показать эту справку\"\n+            ;;\n+        *)\n+            print_error \"Неизвестная команда: $1\"\n+            echo \"Используйте '$0 help' для справки.\"\n+            exit 1\n+            ;;\n+    esac\n+}\n+\n+# Запуск основной функции\n+main \"$@\" \n\\ No newline at end of file\n"
                },
                {
                    "date": 1754147568113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,203 +112,8 @@\n     print_message \"Доступные сервисы:\"\n     echo -e \"${BLUE}User Service:${NC} http://localhost:8090\"\n     echo -e \"${BLUE}Point Service:${NC} http://localhost:8091\"\n     echo -e \"${BLUE}Statistic Service:${NC} http://localhost:8095\"\n-    echo -e \"${BLUE}RabbitMQ Management:${NC} http://localhost:15673 (guest/guest)\"\n-    echo -e \"${BLUE}Prometheus:${NC} http://localhost:9090\"\n-    echo -e \"${BLUE}Grafana:${NC} http://localhost:3000 (admin/admin)\"\n-    echo \"\"\n-    print_message \"Метрики сервисов:\"\n-    echo -e \"${BLUE}User Service Metrics:${NC} http://localhost:8090/actuator/prometheus\"\n-    echo -e \"${BLUE}Point Service Metrics:${NC} http://localhost:8062/actuator/prometheus\"\n-    echo -e \"${BLUE}Statistic Service Metrics:${NC} http://localhost:8095/actuator/prometheus\"\n-}\n-\n-# Функция для очистки\n-clean_project() {\n-    print_warning \"Очистка проекта (удаление всех контейнеров, образов и томов)...\"\n-    read -p \"Вы уверены? (y/N): \" -n 1 -r\n-    echo\n-    if [[ $REPLY =~ ^[Yy]$ ]]; then\n-        docker-compose down -v --rmi all\n-        docker system prune -f\n-        print_message \"Очистка завершена.\"\n-    else\n-        print_message \"Очистка отменена.\"\n-    fi\n-}\n-\n-# Функция для показа статуса\n-show_status() {\n-    print_message \"Статус проекта $PROJECT_NAME:\"\n-    docker-compose ps\n-    echo \"\"\n-    check_services_status\n-}\n-\n-# Основная логика\n-main() {\n-    print_header\n-    \n-    check_dependencies\n-    \n-    case \"${1:-start}\" in\n-        \"start\")\n-            start_project\n-            ;;\n-        \"stop\")\n-            stop_project\n-            ;;\n-        \"restart\")\n-            restart_project\n-            ;;\n-        \"logs\")\n-            show_logs \"$2\"\n-            ;;\n-        \"status\")\n-            show_status\n-            ;;\n-        \"clean\")\n-            clean_project\n-            ;;\n-        \"help\"|\"-h\"|\"--help\")\n-            echo \"Использование: $0 [команда]\"\n-            echo \"\"\n-            echo \"Команды:\"\n-            echo \"  start     - Запустить проект (по умолчанию)\"\n-            echo \"  stop      - Остановить проект\"\n-            echo \"  restart   - Перезапустить проект\"\n-            echo \"  logs      - Показать логи всех сервисов\"\n-            echo \"  logs [service] - Показать логи конкретного сервиса\"\n-            echo \"  status    - Показать статус сервисов\"\n-            echo \"  clean     - Очистить все контейнеры и образы\"\n-            echo \"  help      - Показать эту справку\"\n-            ;;\n-        *)\n-            print_error \"Неизвестная команда: $1\"\n-            echo \"Используйте '$0 help' для справки.\"\n-            exit 1\n-            ;;\n-    esac\n-}\n-\n-# Запуск основной функции\n-main \"$@\" \n-#!/bin/bash\n-\n-# Скрипт для деплоя проекта Gleb\n-# Использование: ./deploy.sh [start|stop|restart|logs|status|clean]\n-\n-set -e\n-\n-PROJECT_NAME=\"gleb\"\n-\n-# Цвета для вывода\n-RED='\\033[0;31m'\n-GREEN='\\033[0;32m'\n-YELLOW='\\033[1;33m'\n-BLUE='\\033[0;34m'\n-NC='\\033[0m' # No Color\n-\n-# Функция для вывода сообщений\n-print_message() {\n-    echo -e \"${GREEN}[INFO]${NC} $1\"\n-}\n-\n-print_warning() {\n-    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n-}\n-\n-print_error() {\n-    echo -e \"${RED}[ERROR]${NC} $1\"\n-}\n-\n-print_header() {\n-    echo -e \"${BLUE}================================${NC}\"\n-    echo -e \"${BLUE}  GLEB MICROSERVICES DEPLOYMENT${NC}\"\n-    echo -e \"${BLUE}================================${NC}\"\n-}\n-\n-# Проверка наличия Docker и Docker Compose\n-check_dependencies() {\n-    if ! command -v docker &> /dev/null; then\n-        print_error \"Docker не установлен. Установите Docker и попробуйте снова.\"\n-        exit 1\n-    fi\n-    \n-    if ! command -v docker-compose &> /dev/null; then\n-        print_error \"Docker Compose не установлен. Установите Docker Compose и попробуйте снова.\"\n-        exit 1\n-    fi\n-}\n-\n-# Функция для запуска проекта\n-start_project() {\n-    print_message \"Запуск проекта $PROJECT_NAME...\"\n-    \n-    # Остановка существующих контейнеров\n-    docker-compose down 2>/dev/null || true\n-    \n-    # Сборка и запуск\n-    docker-compose up -d --build\n-    \n-    print_message \"Ожидание запуска сервисов...\"\n-    sleep 30\n-    \n-    # Проверка статуса сервисов\n-    check_services_status\n-    \n-    print_message \"Проект успешно запущен!\"\n-    print_service_urls\n-}\n-\n-# Функция для остановки проекта\n-stop_project() {\n-    print_message \"Остановка проекта $PROJECT_NAME...\"\n-    docker-compose down\n-    print_message \"Проект остановлен.\"\n-}\n-\n-# Функция для перезапуска проекта\n-restart_project() {\n-    print_message \"Перезапуск проекта $PROJECT_NAME...\"\n-    stop_project\n-    start_project\n-}\n-\n-# Функция для просмотра логов\n-show_logs() {\n-    if [ -z \"$1\" ]; then\n-        print_message \"Показать логи всех сервисов...\"\n-        docker-compose logs -f\n-    else\n-        print_message \"Показать логи сервиса $1...\"\n-        docker-compose logs -f \"$1\"\n-    fi\n-}\n-\n-# Функция для проверки статуса сервисов\n-check_services_status() {\n-    print_message \"Проверка статуса сервисов...\"\n-    \n-    services=(\"postgres\" \"rabbitmq\" \"prometheus\" \"grafana\" \"user-service\" \"point-service\" \"statistic-service\")\n-    \n-    for service in \"${services[@]}\"; do\n-        if docker-compose ps | grep -q \"$service.*Up\"; then\n-            print_message \"✅ $service - запущен\"\n-        else\n-            print_error \"❌ $service - не запущен\"\n-        fi\n-    done\n-}\n-\n-# Функция для показа URL сервисов\n-print_service_urls() {\n-    echo \"\"\n-    print_message \"Доступные сервисы:\"\n-    echo -e \"${BLUE}User Service:${NC} http://localhost:8090\"\n-    echo -e \"${BLUE}Point Service:${NC} http://localhost:8091\"\n-    echo -e \"${BLUE}Statistic Service:${NC} http://localhost:8095\"\n     echo -e \"${BLUE}RabbitMQ Management:${NC} http://localhost:15672 (guest/guest)\"\n     echo -e \"${BLUE}Prometheus:${NC} http://localhost:9090\"\n     echo -e \"${BLUE}Grafana:${NC} http://localhost:3000 (admin/admin)\"\n     echo \"\"\n"
                },
                {
                    "date": 1754176703970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,195 +1,250 @@\n #!/bin/bash\n \n-# Скрипт для деплоя проекта Gleb\n-# Использование: ./deploy.sh [start|stop|restart|logs|status|clean]\n+# Скрипт для быстрого деплоя проекта с кэшированием зависимостей\n+# Автор: Gleb\n+# Версия: 1.0\n \n-set -e\n+set -e  # Остановка при ошибке\n \n-PROJECT_NAME=\"gleb\"\n-\n # Цвета для вывода\n RED='\\033[0;31m'\n GREEN='\\033[0;32m'\n YELLOW='\\033[1;33m'\n BLUE='\\033[0;34m'\n NC='\\033[0m' # No Color\n \n-# Функция для вывода сообщений\n-print_message() {\n-    echo -e \"${GREEN}[INFO]${NC} $1\"\n+# Функции для вывода\n+print_info() {\n+    echo -e \"${BLUE}[INFO]${NC} $1\"\n }\n \n+print_success() {\n+    echo -e \"${GREEN}[SUCCESS]${NC} $1\"\n+}\n+\n print_warning() {\n     echo -e \"${YELLOW}[WARNING]${NC} $1\"\n }\n \n print_error() {\n     echo -e \"${RED}[ERROR]${NC} $1\"\n }\n \n-print_header() {\n-    echo -e \"${BLUE}================================${NC}\"\n-    echo -e \"${BLUE}  GLEB MICROSERVICES DEPLOYMENT${NC}\"\n-    echo -e \"${BLUE}================================${NC}\"\n+# Показать справку\n+show_help() {\n+    echo \"Использование: $0 [ОПЦИИ]\"\n+    echo \"\"\n+    echo \"ОПЦИИ:\"\n+    echo \"  -h, --help              Показать эту справку\"\n+    echo \"  -e, --env ENV           Окружение (dev/prod) [по умолчанию: dev]\"\n+    echo \"  -f, --force             Принудительная пересборка (без кэша)\"\n+    echo \"  -c, --clean             Очистить все контейнеры и образы\"\n+    echo \"  -s, --service SERVICE   Пересобрать только конкретный сервис\"\n+    echo \"  -d, --down              Остановить все сервисы\"\n+    echo \"  -l, --logs              Показать логи\"\n+    echo \"  -r, --restart           Перезапустить сервисы\"\n+    echo \"\"\n+    echo \"ПРИМЕРЫ:\"\n+    echo \"  $0                     # Быстрый деплой в dev режиме\"\n+    echo \"  $0 -e prod             # Деплой в production режиме\"\n+    echo \"  $0 -f                  # Принудительная пересборка\"\n+    echo \"  $0 -s user-service     # Пересобрать только user-service\"\n+    echo \"  $0 -c                  # Очистить всё\"\n+    echo \"  $0 -l                  # Показать логи\"\n }\n \n-# Проверка наличия Docker и Docker Compose\n-check_dependencies() {\n-    if ! command -v docker &> /dev/null; then\n-        print_error \"Docker не установлен. Установите Docker и попробуйте снова.\"\n-        exit 1\n-    fi\n-    \n-    if ! command -v docker-compose &> /dev/null; then\n-        print_error \"Docker Compose не установлен. Установите Docker Compose и попробуйте снова.\"\n-        exit 1\n-    fi\n-}\n+# Переменные по умолчанию\n+ENVIRONMENT=\"dev\"\n+FORCE_REBUILD=false\n+CLEAN_ALL=false\n+SERVICE_NAME=\"\"\n+STOP_SERVICES=false\n+SHOW_LOGS=false\n+RESTART_SERVICES=false\n \n-# Функция для запуска проекта\n-start_project() {\n-    print_message \"Запуск проекта $PROJECT_NAME...\"\n+# Парсинг аргументов\n+while [[ $# -gt 0 ]]; do\n+    case $1 in\n+        -h|--help)\n+            show_help\n+            exit 0\n+            ;;\n+        -e|--env)\n+            ENVIRONMENT=\"$2\"\n+            shift 2\n+            ;;\n+        -f|--force)\n+            FORCE_REBUILD=true\n+            shift\n+            ;;\n+        -c|--clean)\n+            CLEAN_ALL=true\n+            shift\n+            ;;\n+        -s|--service)\n+            SERVICE_NAME=\"$2\"\n+            shift 2\n+            ;;\n+        -d|--down)\n+            STOP_SERVICES=true\n+            shift\n+            ;;\n+        -l|--logs)\n+            SHOW_LOGS=true\n+            shift\n+            ;;\n+        -r|--restart)\n+            RESTART_SERVICES=true\n+            shift\n+            ;;\n+        *)\n+            print_error \"Неизвестная опция: $1\"\n+            show_help\n+            exit 1\n+            ;;\n+    esac\n+done\n+\n+# Определение файла docker-compose\n+if [ \"$ENVIRONMENT\" = \"prod\" ]; then\n+    COMPOSE_FILE=\"docker-compose.yml\"\n+    print_info \"Используется production конфигурация\"\n+else\n+    COMPOSE_FILE=\"docker-compose.dev.yml\"\n+    print_info \"Используется development конфигурация\"\n+fi\n+\n+# Проверка существования файла\n+if [ ! -f \"$COMPOSE_FILE\" ]; then\n+    print_error \"Файл $COMPOSE_FILE не найден!\"\n+    exit 1\n+fi\n+\n+# Функция очистки\n+clean_all() {\n+    print_info \"Очистка всех контейнеров и образов...\"\n     \n-    # Остановка существующих контейнеров\n-    docker-compose down 2>/dev/null || true\n+    # Остановка и удаление контейнеров\n+    docker-compose -f \"$COMPOSE_FILE\" down --volumes --remove-orphans 2>/dev/null || true\n     \n-    # Сборка и запуск\n-    docker-compose up -d --build\n+    # Удаление образов\n+    docker rmi $(docker images -q | grep gleb) 2>/dev/null || true\n     \n-    print_message \"Ожидание запуска сервисов...\"\n-    sleep 30\n+    # Очистка неиспользуемых ресурсов\n+    docker system prune -f\n     \n-    # Проверка статуса сервисов\n-    check_services_status\n-    \n-    print_message \"Проект успешно запущен!\"\n-    print_service_urls\n+    print_success \"Очистка завершена\"\n }\n \n-# Функция для остановки проекта\n-stop_project() {\n-    print_message \"Остановка проекта $PROJECT_NAME...\"\n-    docker-compose down\n-    print_message \"Проект остановлен.\"\n+# Функция остановки сервисов\n+stop_services() {\n+    print_info \"Остановка сервисов...\"\n+    docker-compose -f \"$COMPOSE_FILE\" down\n+    print_success \"Сервисы остановлены\"\n }\n \n-# Функция для перезапуска проекта\n-restart_project() {\n-    print_message \"Перезапуск проекта $PROJECT_NAME...\"\n-    stop_project\n-    start_project\n+# Функция показа логов\n+show_logs() {\n+    print_info \"Показ логов сервисов...\"\n+    docker-compose -f \"$COMPOSE_FILE\" logs -f\n }\n \n-# Функция для просмотра логов\n-show_logs() {\n-    if [ -z \"$1\" ]; then\n-        print_message \"Показать логи всех сервисов...\"\n-        docker-compose logs -f\n-    else\n-        print_message \"Показать логи сервиса $1...\"\n-        docker-compose logs -f \"$1\"\n-    fi\n+# Функция перезапуска\n+restart_services() {\n+    print_info \"Перезапуск сервисов...\"\n+    docker-compose -f \"$COMPOSE_FILE\" restart\n+    print_success \"Сервисы перезапущены\"\n }\n \n-# Функция для проверки статуса сервисов\n-check_services_status() {\n-    print_message \"Проверка статуса сервисов...\"\n+# Функция быстрой сборки с кэшированием\n+build_with_cache() {\n+    local service=$1\n+    local build_args=\"\"\n     \n-    services=(\"postgres\" \"rabbitmq\" \"prometheus\" \"grafana\" \"user-service\" \"point-service\" \"statistic-service\")\n+    if [ \"$FORCE_REBUILD\" = true ]; then\n+        print_warning \"Принудительная пересборка (без кэша)\"\n+        build_args=\"--no-cache\"\n+    else\n+        print_info \"Используется кэш зависимостей Maven\"\n+    fi\n     \n-    for service in \"${services[@]}\"; do\n-        if docker-compose ps | grep -q \"$service.*Up\"; then\n-            print_message \"✅ $service - запущен\"\n-        else\n-            print_error \"❌ $service - не запущен\"\n-        fi\n-    done\n-}\n-\n-# Функция для показа URL сервисов\n-print_service_urls() {\n-    echo \"\"\n-    print_message \"Доступные сервисы:\"\n-    echo -e \"${BLUE}User Service:${NC} http://localhost:8090\"\n-    echo -e \"${BLUE}Point Service:${NC} http://localhost:8091\"\n-    echo -e \"${BLUE}Statistic Service:${NC} http://localhost:8095\"\n-    echo -e \"${BLUE}RabbitMQ Management:${NC} http://localhost:15672 (guest/guest)\"\n-    echo -e \"${BLUE}Prometheus:${NC} http://localhost:9090\"\n-    echo -e \"${BLUE}Grafana:${NC} http://localhost:3000 (admin/admin)\"\n-    echo \"\"\n-    print_message \"Метрики сервисов:\"\n-    echo -e \"${BLUE}User Service Metrics:${NC} http://localhost:8090/actuator/prometheus\"\n-    echo -e \"${BLUE}Point Service Metrics:${NC} http://localhost:8062/actuator/prometheus\"\n-    echo -e \"${BLUE}Statistic Service Metrics:${NC} http://localhost:8095/actuator/prometheus\"\n-}\n-\n-# Функция для очистки\n-clean_project() {\n-    print_warning \"Очистка проекта (удаление всех контейнеров, образов и томов)...\"\n-    read -p \"Вы уверены? (y/N): \" -n 1 -r\n-    echo\n-    if [[ $REPLY =~ ^[Yy]$ ]]; then\n-        docker-compose down -v --rmi all\n-        docker system prune -f\n-        print_message \"Очистка завершена.\"\n+    if [ -n \"$service\" ]; then\n+        print_info \"Сборка сервиса: $service\"\n+        docker-compose -f \"$COMPOSE_FILE\" build $build_args \"$service\"\n     else\n-        print_message \"Очистка отменена.\"\n+        print_info \"Сборка всех сервисов...\"\n+        docker-compose -f \"$COMPOSE_FILE\" build $build_args\n     fi\n }\n \n-# Функция для показа статуса\n-show_status() {\n-    print_message \"Статус проекта $PROJECT_NAME:\"\n-    docker-compose ps\n-    echo \"\"\n-    check_services_status\n+# Функция деплоя\n+deploy() {\n+    print_info \"Начинаем деплой в режиме: $ENVIRONMENT\"\n+    \n+    # Сборка образов\n+    build_with_cache \"$SERVICE_NAME\"\n+    \n+    # Запуск сервисов\n+    print_info \"Запуск сервисов...\"\n+    docker-compose -f \"$COMPOSE_FILE\" up -d\n+    \n+    # Ожидание готовности сервисов\n+    print_info \"Ожидание готовности сервисов...\"\n+    sleep 10\n+    \n+    # Проверка статуса\n+    print_info \"Статус сервисов:\"\n+    docker-compose -f \"$COMPOSE_FILE\" ps\n+    \n+    print_success \"Деплой завершен успешно!\"\n+    print_info \"Доступные сервисы:\"\n+    echo \"  - User Service: http://localhost:8090\"\n+    echo \"  - Point Service: http://localhost:8091\"\n+    echo \"  - Statistic Service: http://localhost:8095\"\n+    echo \"  - Grafana: http://localhost:3000 (admin/admin)\"\n+    echo \"  - Prometheus: http://localhost:9090\"\n+    echo \"  - RabbitMQ Management: http://localhost:15673 (guest/guest)\"\n }\n \n # Основная логика\n main() {\n-    print_header\n+    print_info \"=== Скрипт быстрого деплоя проекта ===\"\n     \n-    check_dependencies\n+    # Проверка Docker\n+    if ! command -v docker &> /dev/null; then\n+        print_error \"Docker не установлен!\"\n+        exit 1\n+    fi\n     \n-    case \"${1:-start}\" in\n-        \"start\")\n-            start_project\n-            ;;\n-        \"stop\")\n-            stop_project\n-            ;;\n-        \"restart\")\n-            restart_project\n-            ;;\n-        \"logs\")\n-            show_logs \"$2\"\n-            ;;\n-        \"status\")\n-            show_status\n-            ;;\n-        \"clean\")\n-            clean_project\n-            ;;\n-        \"help\"|\"-h\"|\"--help\")\n-            echo \"Использование: $0 [команда]\"\n-            echo \"\"\n-            echo \"Команды:\"\n-            echo \"  start     - Запустить проект (по умолчанию)\"\n-            echo \"  stop      - Остановить проект\"\n-            echo \"  restart   - Перезапустить проект\"\n-            echo \"  logs      - Показать логи всех сервисов\"\n-            echo \"  logs [service] - Показать логи конкретного сервиса\"\n-            echo \"  status    - Показать статус сервисов\"\n-            echo \"  clean     - Очистить все контейнеры и образы\"\n-            echo \"  help      - Показать эту справку\"\n-            ;;\n-        *)\n-            print_error \"Неизвестная команда: $1\"\n-            echo \"Используйте '$0 help' для справки.\"\n-            exit 1\n-            ;;\n-    esac\n+    if ! command -v docker-compose &> /dev/null; then\n+        print_error \"Docker Compose не установлен!\"\n+        exit 1\n+    fi\n+    \n+    # Выполнение действий\n+    if [ \"$CLEAN_ALL\" = true ]; then\n+        clean_all\n+        exit 0\n+    fi\n+    \n+    if [ \"$STOP_SERVICES\" = true ]; then\n+        stop_services\n+        exit 0\n+    fi\n+    \n+    if [ \"$SHOW_LOGS\" = true ]; then\n+        show_logs\n+        exit 0\n+    fi\n+    \n+    if [ \"$RESTART_SERVICES\" = true ]; then\n+        restart_services\n+        exit 0\n+    fi\n+    \n+    # Основной деплой\n+    deploy\n }\n \n # Запуск основной функции\n main \"$@\" \n\\ No newline at end of file\n"
                }
            ],
            "date": 1754144952203,
            "name": "Commit-0",
            "content": "#!/bin/bash\n\n# Скрипт для деплоя проекта Gleb\n# Использование: ./deploy.sh [start|stop|restart|logs|status|clean]\n\nset -e\n\nPROJECT_NAME=\"gleb\"\n\n# Цвета для вывода\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Функция для вывода сообщений\nprint_message() {\n    echo -e \"${GREEN}[INFO]${NC} $1\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n}\n\nprint_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\nprint_header() {\n    echo -e \"${BLUE}================================${NC}\"\n    echo -e \"${BLUE}  GLEB MICROSERVICES DEPLOYMENT${NC}\"\n    echo -e \"${BLUE}================================${NC}\"\n}\n\n# Проверка наличия Docker и Docker Compose\ncheck_dependencies() {\n    if ! command -v docker &> /dev/null; then\n        print_error \"Docker не установлен. Установите Docker и попробуйте снова.\"\n        exit 1\n    fi\n    \n    if ! command -v docker-compose &> /dev/null; then\n        print_error \"Docker Compose не установлен. Установите Docker Compose и попробуйте снова.\"\n        exit 1\n    fi\n}\n\n# Функция для запуска проекта\nstart_project() {\n    print_message \"Запуск проекта $PROJECT_NAME...\"\n    \n    # Остановка существующих контейнеров\n    docker-compose down 2>/dev/null || true\n    \n    # Сборка и запуск\n    docker-compose up -d --build\n    \n    print_message \"Ожидание запуска сервисов...\"\n    sleep 30\n    \n    # Проверка статуса сервисов\n    check_services_status\n    \n    print_message \"Проект успешно запущен!\"\n    print_service_urls\n}\n\n# Функция для остановки проекта\nstop_project() {\n    print_message \"Остановка проекта $PROJECT_NAME...\"\n    docker-compose down\n    print_message \"Проект остановлен.\"\n}\n\n# Функция для перезапуска проекта\nrestart_project() {\n    print_message \"Перезапуск проекта $PROJECT_NAME...\"\n    stop_project\n    start_project\n}\n\n# Функция для просмотра логов\nshow_logs() {\n    if [ -z \"$1\" ]; then\n        print_message \"Показать логи всех сервисов...\"\n        docker-compose logs -f\n    else\n        print_message \"Показать логи сервиса $1...\"\n        docker-compose logs -f \"$1\"\n    fi\n}\n\n# Функция для проверки статуса сервисов\ncheck_services_status() {\n    print_message \"Проверка статуса сервисов...\"\n    \n    services=(\"postgres\" \"rabbitmq\" \"prometheus\" \"grafana\" \"user-service\" \"point-service\" \"statistic-service\")\n    \n    for service in \"${services[@]}\"; do\n        if docker-compose ps | grep -q \"$service.*Up\"; then\n            print_message \"✅ $service - запущен\"\n        else\n            print_error \"❌ $service - не запущен\"\n        fi\n    done\n}\n\n# Функция для показа URL сервисов\nprint_service_urls() {\n    echo \"\"\n    print_message \"Доступные сервисы:\"\n    echo -e \"${BLUE}User Service:${NC} http://localhost:8090\"\n    echo -e \"${BLUE}Point Service:${NC} http://localhost:8091\"\n    echo -e \"${BLUE}Statistic Service:${NC} http://localhost:8095\"\n    echo -e \"${BLUE}RabbitMQ Management:${NC} http://localhost:15672 (guest/guest)\"\n    echo -e \"${BLUE}Prometheus:${NC} http://localhost:9090\"\n    echo -e \"${BLUE}Grafana:${NC} http://localhost:3000 (admin/admin)\"\n    echo \"\"\n    print_message \"Метрики сервисов:\"\n    echo -e \"${BLUE}User Service Metrics:${NC} http://localhost:8090/actuator/prometheus\"\n    echo -e \"${BLUE}Point Service Metrics:${NC} http://localhost:8062/actuator/prometheus\"\n    echo -e \"${BLUE}Statistic Service Metrics:${NC} http://localhost:8095/actuator/prometheus\"\n}\n\n# Функция для очистки\nclean_project() {\n    print_warning \"Очистка проекта (удаление всех контейнеров, образов и томов)...\"\n    read -p \"Вы уверены? (y/N): \" -n 1 -r\n    echo\n    if [[ $REPLY =~ ^[Yy]$ ]]; then\n        docker-compose down -v --rmi all\n        docker system prune -f\n        print_message \"Очистка завершена.\"\n    else\n        print_message \"Очистка отменена.\"\n    fi\n}\n\n# Функция для показа статуса\nshow_status() {\n    print_message \"Статус проекта $PROJECT_NAME:\"\n    docker-compose ps\n    echo \"\"\n    check_services_status\n}\n\n# Основная логика\nmain() {\n    print_header\n    \n    check_dependencies\n    \n    case \"${1:-start}\" in\n        \"start\")\n            start_project\n            ;;\n        \"stop\")\n            stop_project\n            ;;\n        \"restart\")\n            restart_project\n            ;;\n        \"logs\")\n            show_logs \"$2\"\n            ;;\n        \"status\")\n            show_status\n            ;;\n        \"clean\")\n            clean_project\n            ;;\n        \"help\"|\"-h\"|\"--help\")\n            echo \"Использование: $0 [команда]\"\n            echo \"\"\n            echo \"Команды:\"\n            echo \"  start     - Запустить проект (по умолчанию)\"\n            echo \"  stop      - Остановить проект\"\n            echo \"  restart   - Перезапустить проект\"\n            echo \"  logs      - Показать логи всех сервисов\"\n            echo \"  logs [service] - Показать логи конкретного сервиса\"\n            echo \"  status    - Показать статус сервисов\"\n            echo \"  clean     - Очистить все контейнеры и образы\"\n            echo \"  help      - Показать эту справку\"\n            ;;\n        *)\n            print_error \"Неизвестная команда: $1\"\n            echo \"Используйте '$0 help' для справки.\"\n            exit 1\n            ;;\n    esac\n}\n\n# Запуск основной функции\nmain \"$@\" "
        }
    ]
}