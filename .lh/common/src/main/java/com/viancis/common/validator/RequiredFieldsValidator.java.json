{
    "sourceFile": "common/src/main/java/com/viancis/common/validator/RequiredFieldsValidator.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1754152080813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1754152080813,
            "name": "Commit-0",
            "content": "package com.viancis.common.validator;\n\nimport jakarta.validation.ConstraintValidator;\nimport jakarta.validation.ConstraintValidatorContext;\nimport java.lang.reflect.Field;\n\n/**\n * Валидатор для проверки обязательных полей\n */\npublic class RequiredFieldsValidator implements ConstraintValidator<RequiredFields, Object> {\n\n    @Override\n    public void initialize(RequiredFields constraintAnnotation) {\n    }\n\n    @Override\n    public boolean isValid(Object object, ConstraintValidatorContext context) {\n        if (object == null) {\n            return false;\n        }\n\n        try {\n            Field[] fields = object.getClass().getDeclaredFields();\n            for (Field field : fields) {\n                field.setAccessible(true);\n                \n                // Проверяем аннотации @NotNull и @NotBlank\n                if (field.isAnnotationPresent(jakarta.validation.constraints.NotNull.class) ||\n                    field.isAnnotationPresent(jakarta.validation.constraints.NotBlank.class)) {\n                    \n                    Object value = field.get(object);\n                    if (value == null) {\n                        // Добавляем сообщение об ошибке\n                        context.disableDefaultConstraintViolation();\n                        context.buildConstraintViolationWithTemplate(\n                            \"Поле '\" + field.getName() + \"' обязательно\"\n                        ).addConstraintViolation();\n                        return false;\n                    }\n                    \n                    // Дополнительная проверка для @NotBlank\n                    if (field.isAnnotationPresent(jakarta.validation.constraints.NotBlank.class) &&\n                        value instanceof String && ((String) value).trim().isEmpty()) {\n                        context.disableDefaultConstraintViolation();\n                        context.buildConstraintViolationWithTemplate(\n                            \"Поле '\" + field.getName() + \"' не может быть пустым\"\n                        ).addConstraintViolation();\n                        return false;\n                    }\n                }\n            }\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n} "
        }
    ]
}