{
    "sourceFile": "common/src/main/java/com/viancis/common/model/Point.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1754244998851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1754250213948,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n \n \n import com.fasterxml.jackson.annotation.JsonBackReference;\n import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.viancis.auth.model.User;\n import jakarta.persistence.*;\n import lombok.AllArgsConstructor;\n import lombok.Getter;\n import lombok.NoArgsConstructor;\n@@ -13,9 +14,8 @@\n \n import java.io.Serializable;\n import java.time.LocalDateTime;\n import java.util.Date;\n-import java.util.UUID;\n \n @Entity\n @Table(name = \"points\")\n @Getter\n@@ -48,20 +48,22 @@\n \n     @Column(nullable = false)\n     private long executionTime;\n \n-    @Column(name = \"user_id\", nullable = false)\n-    private UUID userId;\n+    @ManyToOne(fetch = FetchType.EAGER)\n+    @JoinColumn(name = \"user_id\", nullable = false)\n+    @JsonBackReference(value = \"user-points\")\n+    private User user;\n \n \n-    public Point(double x, double y, double r, boolean insideArea, Date timestamp, long executionTime, UUID userId) {\n+    public Point(double x, double y, double r, boolean insideArea, Date timestamp, long executionTime, User user) {\n         this.x = x;\n         this.y = y;\n         this.r = r;\n         this.insideArea = insideArea;\n         this.timestamp = timestamp;\n         this.executionTime = executionTime;\n-        this.userId = userId;\n+        this.user = user;\n     }\n \n \n     public Point checkInside() {\n"
                }
            ],
            "date": 1754244998851,
            "name": "Commit-0",
            "content": "package com.viancis.common.model;\n\n\nimport com.fasterxml.jackson.annotation.JsonBackReference;\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport jakarta.persistence.*;\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\nimport org.hibernate.annotations.CreationTimestamp;\nimport org.hibernate.annotations.GenericGenerator;\n\nimport java.io.Serializable;\nimport java.time.LocalDateTime;\nimport java.util.Date;\nimport java.util.UUID;\n\n@Entity\n@Table(name = \"points\")\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Point implements Serializable {\n\n    @Id\n    @GeneratedValue(generator = \"uuid\")\n    @GenericGenerator(name = \"uuid\", strategy = \"uuid2\")\n\n    private String id;\n\n    @Column(nullable = false)\n    private double x;\n\n    @Column(nullable = false)\n    private double y;\n\n    @Column(nullable = false)\n    private double r;\n\n    @Column(nullable = false)\n    private boolean insideArea;\n\n    @CreationTimestamp\n    @Column(updatable = false)\n    private Date timestamp;\n\n    @Column(nullable = false)\n    private long executionTime;\n\n    @Column(name = \"user_id\", nullable = false)\n    private UUID userId;\n\n\n    public Point(double x, double y, double r, boolean insideArea, Date timestamp, long executionTime, UUID userId) {\n        this.x = x;\n        this.y = y;\n        this.r = r;\n        this.insideArea = insideArea;\n        this.timestamp = timestamp;\n        this.executionTime = executionTime;\n        this.userId = userId;\n    }\n\n\n    public Point checkInside() {\n        if (x >= 0 && y >= 0) {\n            // Треугольник: x + y <= r * 2\n            this.insideArea = (x + y <= r * 2);\n        } else if (x <= 0 && y >= 0) {\n            // Круг: x^2 + y^2 <= r^2\n            this.insideArea = (x * x + y * y <= r * r);\n        } else if (x >= 0 && y <= 0) {\n            // Квадрат: x и y в пределах от -r * 2 до r * 2\n            this.insideArea = (x >= -r * 2 && x <= r * 2 && y >= -r * 2 && y <= r * 2);\n        } else {\n            // Для всех остальных случаев\n            this.insideArea = false;\n        }\n        return this;\n    }\n\n    public boolean isInside(){\n        return insideArea;\n    }\n}"
        }
    ]
}