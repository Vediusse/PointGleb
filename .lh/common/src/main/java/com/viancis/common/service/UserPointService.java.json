{
    "sourceFile": "common/src/main/java/com/viancis/common/service/UserPointService.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1754246230190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1754250213970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,33 +1,1 @@\n-package com.viancis.common.service;\n-\n-import com.viancis.common.model.Point;\n-import com.viancis.common.repository.PointRepository;\n-import com.viancis.common.dto.UserDTO;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.scheduling.annotation.Async;\n-import org.springframework.stereotype.Service;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-import java.util.List;\n-import java.util.UUID;\n-import java.util.concurrent.CompletableFuture;\n-import java.util.stream.Collectors;\n-\n-@Service\n-public class UserPointService {\n-\n-    @Autowired\n-    private PointRepository pointRepository;\n-\n-    @Async\n-    @Transactional\n-    public CompletableFuture<List<UserDTO>> getAllUsers() {\n-        // Временное решение - возвращаем пустой список\n-        // TODO: Реализовать после сборки auth модуля\n-        return CompletableFuture.completedFuture(List.of());\n-    }\n-\n-    public List<Point> getPointsByUserId(UUID userId) {\n-        return pointRepository.findByUserId(userId);\n-    }\n-} \n\\ No newline at end of file\n+ \n\\ No newline at end of file\n"
                }
            ],
            "date": 1754246230190,
            "name": "Commit-0",
            "content": "package com.viancis.common.service;\n\nimport com.viancis.common.model.Point;\nimport com.viancis.common.repository.PointRepository;\nimport com.viancis.common.dto.UserDTO;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.scheduling.annotation.Async;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.List;\nimport java.util.UUID;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.stream.Collectors;\n\n@Service\npublic class UserPointService {\n\n    @Autowired\n    private PointRepository pointRepository;\n\n    @Async\n    @Transactional\n    public CompletableFuture<List<UserDTO>> getAllUsers() {\n        // Временное решение - возвращаем пустой список\n        // TODO: Реализовать после сборки auth модуля\n        return CompletableFuture.completedFuture(List.of());\n    }\n\n    public List<Point> getPointsByUserId(UUID userId) {\n        return pointRepository.findByUserId(userId);\n    }\n} "
        }
    ]
}