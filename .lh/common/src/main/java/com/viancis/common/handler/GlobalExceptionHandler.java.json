{
    "sourceFile": "common/src/main/java/com/viancis/common/handler/GlobalExceptionHandler.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1754149860144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1754150508972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,9 @@\n import org.springframework.security.access.AccessDeniedException;\n import org.springframework.web.bind.annotation.ControllerAdvice;\n import org.springframework.web.bind.annotation.ExceptionHandler;\n import org.springframework.web.servlet.NoHandlerFoundException;\n+import jakarta.validation.ConstraintViolationException;\n \n \n @ControllerAdvice\n public class GlobalExceptionHandler {\n@@ -43,10 +44,18 @@\n     public ResponseEntity<Map<String, String>> handleIllegalArgument(IllegalArgumentException ex) {\n         return ResponseEntity.badRequest().body(Map.of(\"error\", ex.getMessage()));\n     }\n \n+    @ExceptionHandler(ConstraintViolationException.class)\n+    public ResponseEntity<Map<String, String>> handleConstraintViolation(ConstraintViolationException ex) {\n+        Map<String, String> errors = new HashMap<>();\n+        ex.getConstraintViolations()\n+           .forEach(violation -> errors.put(violation.getPropertyPath().toString(), violation.getMessage()));\n+        return ResponseEntity.badRequest().body(errors);\n+    }\n \n \n+\n     @ExceptionHandler(InvalidCredentialsException.class)\n     public ResponseEntity<String> handleInvalidCredentials(InvalidCredentialsException ex) {\n         return new ResponseEntity<>(ex.getMessage(), HttpStatus.UNAUTHORIZED);\n     }\n"
                },
                {
                    "date": 1754151195791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,14 +11,14 @@\n import java.util.Map;\n \n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n-import org.springframework.messaging.handler.annotation.support.MethodArgumentNotValidException;\n import org.springframework.security.access.AccessDeniedException;\n import org.springframework.web.bind.annotation.ControllerAdvice;\n import org.springframework.web.bind.annotation.ExceptionHandler;\n import org.springframework.web.servlet.NoHandlerFoundException;\n import jakarta.validation.ConstraintViolationException;\n+import org.springframework.web.bind.MethodArgumentNotValidException;\n \n \n @ControllerAdvice\n public class GlobalExceptionHandler {\n@@ -39,8 +39,16 @@\n            .forEach(error -> errors.put(error.getField(), error.getDefaultMessage()));\n         return ResponseEntity.badRequest().body(errors);\n     }\n \n+    @ExceptionHandler(org.springframework.web.bind.MethodArgumentNotValidException.class)\n+    public ResponseEntity<Map<String, String>> handleMethodArgumentNotValid(org.springframework.web.bind.MethodArgumentNotValidException ex) {\n+        Map<String, String> errors = new HashMap<>();\n+        ex.getBindingResult().getFieldErrors()\n+           .forEach(error -> errors.put(error.getField(), error.getDefaultMessage()));\n+        return ResponseEntity.badRequest().body(errors);\n+    }\n+\n     @ExceptionHandler(IllegalArgumentException.class)\n     public ResponseEntity<Map<String, String>> handleIllegalArgument(IllegalArgumentException ex) {\n         return ResponseEntity.badRequest().body(Map.of(\"error\", ex.getMessage()));\n     }\n"
                },
                {
                    "date": 1754177391371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,31 +24,24 @@\n public class GlobalExceptionHandler {\n \n     @ExceptionHandler(UserAlreadyExistsException.class)\n     public ResponseEntity<String> handleUserAlreadyExists(UserAlreadyExistsException ex) {\n-        return new ResponseEntity<>(ex.getMessage(), HttpStatus.BAD_REQUEST);\n+        return new ResponseEntity<>(ex.getMessage() + \" дикий огурец\", HttpStatus.BAD_REQUEST);\n     }\n \n     @ExceptionHandler(UserNotFoundException.class)\n     public ResponseEntity<String> handleUserNotFound(UserNotFoundException ex) {\n         return new ResponseEntity<>(ex.getMessage(), HttpStatus.NOT_FOUND);\n     }\n+\n     @ExceptionHandler(MethodArgumentNotValidException.class)\n     public ResponseEntity<Map<String, String>> handleValidationErrors(MethodArgumentNotValidException ex) {\n         Map<String, String> errors = new HashMap<>();\n         ex.getBindingResult().getFieldErrors()\n-           .forEach(error -> errors.put(error.getField(), error.getDefaultMessage()));\n+                .forEach(error -> errors.put(error.getField(), error.getDefaultMessage()));\n         return ResponseEntity.badRequest().body(errors);\n     }\n \n-    @ExceptionHandler(org.springframework.web.bind.MethodArgumentNotValidException.class)\n-    public ResponseEntity<Map<String, String>> handleMethodArgumentNotValid(org.springframework.web.bind.MethodArgumentNotValidException ex) {\n-        Map<String, String> errors = new HashMap<>();\n-        ex.getBindingResult().getFieldErrors()\n-           .forEach(error -> errors.put(error.getField(), error.getDefaultMessage()));\n-        return ResponseEntity.badRequest().body(errors);\n-    }\n-\n     @ExceptionHandler(IllegalArgumentException.class)\n     public ResponseEntity<Map<String, String>> handleIllegalArgument(IllegalArgumentException ex) {\n         return ResponseEntity.badRequest().body(Map.of(\"error\", ex.getMessage()));\n     }\n"
                },
                {
                    "date": 1754177443842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n     }\n \n     @ExceptionHandler(MethodArgumentNotValidException.class)\n     public ResponseEntity<Map<String, String>> handleValidationErrors(MethodArgumentNotValidException ex) {\n-        Map<String, String> errors = new HashMap<>();\n+        Map<String, String> errors = new HashMap<>(); \n         ex.getBindingResult().getFieldErrors()\n                 .forEach(error -> errors.put(error.getField(), error.getDefaultMessage()));\n         return ResponseEntity.badRequest().body(errors);\n     }\n"
                },
                {
                    "date": 1754177592356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n     }\n \n     @ExceptionHandler(MethodArgumentNotValidException.class)\n     public ResponseEntity<Map<String, String>> handleValidationErrors(MethodArgumentNotValidException ex) {\n-        Map<String, String> errors = new HashMap<>(); \n+        Map<String, String> errors = new HashMap<>();  \n         ex.getBindingResult().getFieldErrors()\n                 .forEach(error -> errors.put(error.getField(), error.getDefaultMessage()));\n         return ResponseEntity.badRequest().body(errors);\n     }\n"
                },
                {
                    "date": 1754250207188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,89 +1,53 @@\n package com.viancis.common.handler;\n \n-\n-import com.viancis.common.exception.CustomAuthenticationException;\n-import com.viancis.common.exception.InvalidCredentialsException;\n-import com.viancis.common.exception.UserAlreadyExistsException;\n-import com.viancis.common.exception.UserNotFoundException;\n-import io.jsonwebtoken.security.SignatureException;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.core.AuthenticationException;\n import org.springframework.web.bind.annotation.ControllerAdvice;\n import org.springframework.web.bind.annotation.ExceptionHandler;\n-import org.springframework.web.servlet.NoHandlerFoundException;\n-import jakarta.validation.ConstraintViolationException;\n-import org.springframework.web.bind.MethodArgumentNotValidException;\n+import org.springframework.web.context.request.WebRequest;\n \n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n \n @ControllerAdvice\n public class GlobalExceptionHandler {\n \n-    @ExceptionHandler(UserAlreadyExistsException.class)\n-    public ResponseEntity<String> handleUserAlreadyExists(UserAlreadyExistsException ex) {\n-        return new ResponseEntity<>(ex.getMessage() + \" дикий огурец\", HttpStatus.BAD_REQUEST);\n-    }\n+    @ExceptionHandler(AccessDeniedException.class)\n+    public ResponseEntity<Object> handleAccessDeniedException(AccessDeniedException ex, WebRequest request) {\n+        Map<String, Object> body = new HashMap<>();\n+        body.put(\"timestamp\", new Date());\n+        body.put(\"status\", HttpStatus.FORBIDDEN.value());\n+        body.put(\"error\", \"Access Denied\");\n+        body.put(\"message\", \"You don't have permission to access this resource\");\n+        body.put(\"path\", request.getDescription(false));\n \n-    @ExceptionHandler(UserNotFoundException.class)\n-    public ResponseEntity<String> handleUserNotFound(UserNotFoundException ex) {\n-        return new ResponseEntity<>(ex.getMessage(), HttpStatus.NOT_FOUND);\n+        return new ResponseEntity<>(body, HttpStatus.FORBIDDEN);\n     }\n \n-    @ExceptionHandler(MethodArgumentNotValidException.class)\n-    public ResponseEntity<Map<String, String>> handleValidationErrors(MethodArgumentNotValidException ex) {\n-        Map<String, String> errors = new HashMap<>();  \n-        ex.getBindingResult().getFieldErrors()\n-                .forEach(error -> errors.put(error.getField(), error.getDefaultMessage()));\n-        return ResponseEntity.badRequest().body(errors);\n-    }\n+    @ExceptionHandler(AuthenticationException.class)\n+    public ResponseEntity<Object> handleAuthenticationException(AuthenticationException ex, WebRequest request) {\n+        Map<String, Object> body = new HashMap<>();\n+        body.put(\"timestamp\", new Date());\n+        body.put(\"status\", HttpStatus.UNAUTHORIZED.value());\n+        body.put(\"error\", \"Unauthorized\");\n+        body.put(\"message\", \"Authentication failed: \" + ex.getMessage());\n+        body.put(\"path\", request.getDescription(false));\n \n-    @ExceptionHandler(IllegalArgumentException.class)\n-    public ResponseEntity<Map<String, String>> handleIllegalArgument(IllegalArgumentException ex) {\n-        return ResponseEntity.badRequest().body(Map.of(\"error\", ex.getMessage()));\n+        return new ResponseEntity<>(body, HttpStatus.UNAUTHORIZED);\n     }\n \n-    @ExceptionHandler(ConstraintViolationException.class)\n-    public ResponseEntity<Map<String, String>> handleConstraintViolation(ConstraintViolationException ex) {\n-        Map<String, String> errors = new HashMap<>();\n-        ex.getConstraintViolations()\n-           .forEach(violation -> errors.put(violation.getPropertyPath().toString(), violation.getMessage()));\n-        return ResponseEntity.badRequest().body(errors);\n-    }\n+    @ExceptionHandler(Exception.class)\n+    public ResponseEntity<Object> handleGlobalException(Exception ex, WebRequest request) {\n+        Map<String, Object> body = new HashMap<>();\n+        body.put(\"timestamp\", new Date());\n+        body.put(\"status\", HttpStatus.INTERNAL_SERVER_ERROR.value());\n+        body.put(\"error\", \"Internal Server Error\");\n+        body.put(\"message\", ex.getMessage());\n+        body.put(\"path\", request.getDescription(false));\n \n-\n-\n-    @ExceptionHandler(InvalidCredentialsException.class)\n-    public ResponseEntity<String> handleInvalidCredentials(InvalidCredentialsException ex) {\n-        return new ResponseEntity<>(ex.getMessage(), HttpStatus.UNAUTHORIZED);\n+        return new ResponseEntity<>(body, HttpStatus.INTERNAL_SERVER_ERROR);\n     }\n-\n-    @ExceptionHandler(CustomAuthenticationException.class)\n-    public ResponseEntity<String> handleCustomAuthenticationException(CustomAuthenticationException ex) {\n-        return new ResponseEntity<>(ex.getMessage(), HttpStatus.UNAUTHORIZED);\n-    }\n-\n-    @ExceptionHandler(SignatureException.class)\n-    public ResponseEntity<String> handleCustomAuthenticationException(SignatureException ex) {\n-        return new ResponseEntity<>(ex.getMessage(), HttpStatus.FORBIDDEN);\n-    }\n-\n-\n-\n-    @ExceptionHandler(AccessDeniedException.class)\n-    public ResponseEntity<String> handleAccessDenied(AccessDeniedException ex) {\n-        return new ResponseEntity<>(\"Access denied: \" + ex.getMessage(), HttpStatus.FORBIDDEN);\n-    }\n-\n-    @ExceptionHandler(NoHandlerFoundException.class)\n-    public ResponseEntity<String> handleNoHandlerFound(NoHandlerFoundException ex) {\n-        return new ResponseEntity<>(\"No handler found for the requested URL\", HttpStatus.NOT_FOUND);\n-    }\n-\n-\n-\n-\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754250213934,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,53 +1,60 @@\n package com.viancis.common.handler;\n \n+\n+import java.nio.file.AccessDeniedException;\n+import java.security.SignatureException;\n+import java.util.HashMap;\n+import java.util.Map;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n-import org.springframework.security.access.AccessDeniedException;\n-import org.springframework.security.core.AuthenticationException;\n import org.springframework.web.bind.annotation.ControllerAdvice;\n import org.springframework.web.bind.annotation.ExceptionHandler;\n-import org.springframework.web.context.request.WebRequest;\n+import org.springframework.web.servlet.NoHandlerFoundException;\n+import jakarta.validation.ConstraintViolationException;\n+import org.springframework.web.bind.MethodArgumentNotValidException;\n \n-import java.util.Date;\n-import java.util.HashMap;\n-import java.util.Map;\n \n+\n @ControllerAdvice\n public class GlobalExceptionHandler {\n+    @ExceptionHandler(MethodArgumentNotValidException.class)\n+    public ResponseEntity<Map<String, String>> handleValidationErrors(MethodArgumentNotValidException ex) {\n+        Map<String, String> errors = new HashMap<>();  \n+        ex.getBindingResult().getFieldErrors()\n+                .forEach(error -> errors.put(error.getField(), error.getDefaultMessage()));\n+        return ResponseEntity.badRequest().body(errors);\n+    }\n \n-    @ExceptionHandler(AccessDeniedException.class)\n-    public ResponseEntity<Object> handleAccessDeniedException(AccessDeniedException ex, WebRequest request) {\n-        Map<String, Object> body = new HashMap<>();\n-        body.put(\"timestamp\", new Date());\n-        body.put(\"status\", HttpStatus.FORBIDDEN.value());\n-        body.put(\"error\", \"Access Denied\");\n-        body.put(\"message\", \"You don't have permission to access this resource\");\n-        body.put(\"path\", request.getDescription(false));\n+    @ExceptionHandler(IllegalArgumentException.class)\n+    public ResponseEntity<Map<String, String>> handleIllegalArgument(IllegalArgumentException ex) {\n+        return ResponseEntity.badRequest().body(Map.of(\"error\", ex.getMessage()));\n+    }\n \n-        return new ResponseEntity<>(body, HttpStatus.FORBIDDEN);\n+    @ExceptionHandler(ConstraintViolationException.class)\n+    public ResponseEntity<Map<String, String>> handleConstraintViolation(ConstraintViolationException ex) {\n+        Map<String, String> errors = new HashMap<>();\n+        ex.getConstraintViolations()\n+           .forEach(violation -> errors.put(violation.getPropertyPath().toString(), violation.getMessage()));\n+        return ResponseEntity.badRequest().body(errors);\n     }\n \n-    @ExceptionHandler(AuthenticationException.class)\n-    public ResponseEntity<Object> handleAuthenticationException(AuthenticationException ex, WebRequest request) {\n-        Map<String, Object> body = new HashMap<>();\n-        body.put(\"timestamp\", new Date());\n-        body.put(\"status\", HttpStatus.UNAUTHORIZED.value());\n-        body.put(\"error\", \"Unauthorized\");\n-        body.put(\"message\", \"Authentication failed: \" + ex.getMessage());\n-        body.put(\"path\", request.getDescription(false));\n \n-        return new ResponseEntity<>(body, HttpStatus.UNAUTHORIZED);\n+\n+    @ExceptionHandler(SignatureException.class)\n+    public ResponseEntity<String> handleCustomAuthenticationException(SignatureException ex) {\n+        return new ResponseEntity<>(ex.getMessage(), HttpStatus.FORBIDDEN);\n     }\n \n-    @ExceptionHandler(Exception.class)\n-    public ResponseEntity<Object> handleGlobalException(Exception ex, WebRequest request) {\n-        Map<String, Object> body = new HashMap<>();\n-        body.put(\"timestamp\", new Date());\n-        body.put(\"status\", HttpStatus.INTERNAL_SERVER_ERROR.value());\n-        body.put(\"error\", \"Internal Server Error\");\n-        body.put(\"message\", ex.getMessage());\n-        body.put(\"path\", request.getDescription(false));\n \n-        return new ResponseEntity<>(body, HttpStatus.INTERNAL_SERVER_ERROR);\n+\n+\n+\n+    @ExceptionHandler(NoHandlerFoundException.class)\n+    public ResponseEntity<String> handleNoHandlerFound(NoHandlerFoundException ex) {\n+        return new ResponseEntity<>(\"No handler found for the requested URL\", HttpStatus.NOT_FOUND);\n     }\n+\n+\n+\n+\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1754149860144,
            "name": "Commit-0",
            "content": "package com.viancis.common.handler;\n\n\nimport com.viancis.common.exception.CustomAuthenticationException;\nimport com.viancis.common.exception.InvalidCredentialsException;\nimport com.viancis.common.exception.UserAlreadyExistsException;\nimport com.viancis.common.exception.UserNotFoundException;\nimport io.jsonwebtoken.security.SignatureException;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.messaging.handler.annotation.support.MethodArgumentNotValidException;\nimport org.springframework.security.access.AccessDeniedException;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.servlet.NoHandlerFoundException;\n\n\n@ControllerAdvice\npublic class GlobalExceptionHandler {\n\n    @ExceptionHandler(UserAlreadyExistsException.class)\n    public ResponseEntity<String> handleUserAlreadyExists(UserAlreadyExistsException ex) {\n        return new ResponseEntity<>(ex.getMessage(), HttpStatus.BAD_REQUEST);\n    }\n\n    @ExceptionHandler(UserNotFoundException.class)\n    public ResponseEntity<String> handleUserNotFound(UserNotFoundException ex) {\n        return new ResponseEntity<>(ex.getMessage(), HttpStatus.NOT_FOUND);\n    }\n    @ExceptionHandler(MethodArgumentNotValidException.class)\n    public ResponseEntity<Map<String, String>> handleValidationErrors(MethodArgumentNotValidException ex) {\n        Map<String, String> errors = new HashMap<>();\n        ex.getBindingResult().getFieldErrors()\n           .forEach(error -> errors.put(error.getField(), error.getDefaultMessage()));\n        return ResponseEntity.badRequest().body(errors);\n    }\n\n    @ExceptionHandler(IllegalArgumentException.class)\n    public ResponseEntity<Map<String, String>> handleIllegalArgument(IllegalArgumentException ex) {\n        return ResponseEntity.badRequest().body(Map.of(\"error\", ex.getMessage()));\n    }\n\n\n\n    @ExceptionHandler(InvalidCredentialsException.class)\n    public ResponseEntity<String> handleInvalidCredentials(InvalidCredentialsException ex) {\n        return new ResponseEntity<>(ex.getMessage(), HttpStatus.UNAUTHORIZED);\n    }\n\n    @ExceptionHandler(CustomAuthenticationException.class)\n    public ResponseEntity<String> handleCustomAuthenticationException(CustomAuthenticationException ex) {\n        return new ResponseEntity<>(ex.getMessage(), HttpStatus.UNAUTHORIZED);\n    }\n\n    @ExceptionHandler(SignatureException.class)\n    public ResponseEntity<String> handleCustomAuthenticationException(SignatureException ex) {\n        return new ResponseEntity<>(ex.getMessage(), HttpStatus.FORBIDDEN);\n    }\n\n\n\n    @ExceptionHandler(AccessDeniedException.class)\n    public ResponseEntity<String> handleAccessDenied(AccessDeniedException ex) {\n        return new ResponseEntity<>(\"Access denied: \" + ex.getMessage(), HttpStatus.FORBIDDEN);\n    }\n\n    @ExceptionHandler(NoHandlerFoundException.class)\n    public ResponseEntity<String> handleNoHandlerFound(NoHandlerFoundException ex) {\n        return new ResponseEntity<>(\"No handler found for the requested URL\", HttpStatus.NOT_FOUND);\n    }\n\n\n\n\n}"
        }
    ]
}