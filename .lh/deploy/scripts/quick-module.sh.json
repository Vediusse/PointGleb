{
    "sourceFile": "deploy/scripts/quick-module.sh",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1754242378686,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1754242378686,
            "name": "Commit-0",
            "content": "#!/bin/bash\n\n# Упрощенный скрипт для создания модуля без Maven операций\n# Автор: viancis\n\nset -e\n\n# Цвета для вывода\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m'\n\nprint_info() {\n    echo -e \"${BLUE}[INFO]${NC} $1\"\n}\n\nprint_success() {\n    echo -e \"${GREEN}[SUCCESS]${NC} $1\"\n}\n\nprint_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\nshow_help() {\n    echo \"Использование: $0 MODULE_NAME [PORT]\"\n    echo \"\"\n    echo \"ПРИМЕРЫ:\"\n    echo \"  $0 auth\"\n    echo \"  $0 payment 8093\"\n    echo \"  $0 notification 8094\"\n    echo \"\"\n}\n\n# Проверка аргументов\nif [ $# -eq 0 ]; then\n    print_error \"Необходимо указать имя модуля!\"\n    show_help\n    exit 1\nfi\n\nMODULE_NAME=\"$1\"\nPORT=\"${2:-8080}\"\n\n# Определение путей\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\nPROJECT_ROOT=\"$(dirname \"$SCRIPT_DIR\")\"\nMODULE_PATH=\"$PROJECT_ROOT/$MODULE_NAME\"\n\nprint_info \"Создание модуля: $MODULE_NAME\"\nprint_info \"Порт: $PORT\"\nprint_info \"Путь: $MODULE_PATH\"\n\n# Проверка существования\nif [ -d \"$MODULE_PATH\" ]; then\n    print_error \"Модуль $MODULE_NAME уже существует!\"\n    exit 1\nfi\n\n# Создание структуры\nprint_info \"Создание структуры директорий...\"\n\nmkdir -p \"$MODULE_PATH/src/main/java/com/viancis/$MODULE_NAME\"\nmkdir -p \"$MODULE_PATH/src/main/resources\"\nmkdir -p \"$MODULE_PATH/src/test/kotlin/com/viancis/$MODULE_NAME\"\nmkdir -p \"$MODULE_PATH/docker\"\n\n# Создание pom.xml\nprint_info \"Создание pom.xml...\"\n\ncat > \"$MODULE_PATH/pom.xml\" << EOF\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    \n    <parent>\n        <groupId>com.viancis</groupId>\n        <artifactId>gleb</artifactId>\n        <version>0.0.1-SNAPSHOT</version>\n        <relativePath>../pom.xml</relativePath>\n    </parent>\n    \n    <artifactId>$MODULE_NAME</artifactId>\n    <name>$MODULE_NAME</name>\n    <description>$MODULE_NAME module</description>\n    \n    <dependencies>\n        <dependency>\n            <groupId>com.viancis</groupId>\n            <artifactId>common</artifactId>\n            <version>\\${project.version}</version>\n        </dependency>\n    </dependencies>\n</project>\nEOF\n\n# Создание основного класса\nprint_info \"Создание основного класса...\"\n\ncat > \"$MODULE_PATH/src/main/java/com/viancis/$MODULE_NAME/${MODULE_NAME^}Application.java\" << EOF\npackage com.viancis.$MODULE_NAME;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class ${MODULE_NAME^}Application {\n    public static void main(String[] args) {\n        SpringApplication.run(${MODULE_NAME^}Application.class, args);\n    }\n}\nEOF\n\n# Создание application.properties\nprint_info \"Создание application.properties...\"\n\ncat > \"$MODULE_PATH/src/main/resources/application.properties\" << EOF\nserver.port=$PORT\nspring.application.name=$MODULE_NAME\n\n# Database configuration\nspring.datasource.url=jdbc:postgresql://postgres:5432/postgres\nspring.datasource.username=postgres\nspring.datasource.password=password\nspring.datasource.driver-class-name=org.postgresql.Driver\n\n# JPA configuration\nspring.jpa.hibernate.ddl-auto=update\nspring.jpa.show-sql=true\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect\n\n# RabbitMQ configuration\nspring.rabbitmq.host=rabbitmq\nspring.rabbitmq.port=5672\nspring.rabbitmq.username=guest\nspring.rabbitmq.password=guest\nEOF\n\n# Создание Dockerfile'ов\nprint_info \"Создание Dockerfile'ов...\"\n\n# Dockerfile.dev\ncat > \"$MODULE_PATH/docker/Dockerfile.dev\" << EOF\nFROM openjdk:21-jdk-slim\n\nWORKDIR /app\n\n# Копируем Maven wrapper и основные файлы\nCOPY ../../mvnw .\nCOPY ../../mvnw.cmd .\nCOPY ../../pom.xml .\nCOPY ../../.mvn .mvn\n\n# Копируем pom.xml файлы модулей\nCOPY ../../$MODULE_NAME/pom.xml ./$MODULE_NAME/pom.xml\nCOPY ../../common/pom.xml ./common/pom.xml\n\n# Загружаем зависимости\nRUN ./mvnw dependency:go-offline -pl $MODULE_NAME -am\n\n# Копируем исходный код\nCOPY ../../$MODULE_NAME/src ./$MODULE_NAME/src\nCOPY ../../common/src ./common/src\n\n# Компилируем\nRUN ./mvnw compile -pl $MODULE_NAME -am -DskipTests\n\n# Собираем JAR\nRUN ./mvnw package -pl $MODULE_NAME -am -DskipTests\n\n# Создаем директорию для JAR\nRUN mkdir -p /app/target\n\n# Копируем JAR файл\nRUN cp $MODULE_NAME/target/*.jar /app/target/app.jar\n\n# Открываем порты\nEXPOSE $PORT\n\n# Запускаем приложение\nCMD [\"java\", \"-jar\", \"/app/target/app.jar\"]\nEOF\n\n# Dockerfile\ncat > \"$MODULE_PATH/docker/Dockerfile\" << EOF\nFROM openjdk:21-jdk-slim\n\nWORKDIR /app\n\n# Копируем Maven wrapper и основные файлы\nCOPY ../../mvnw .\nCOPY ../../mvnw.cmd .\nCOPY ../../pom.xml .\nCOPY ../../.mvn .mvn\n\n# Копируем pom.xml файлы модулей\nCOPY ../../$MODULE_NAME/pom.xml ./$MODULE_NAME/pom.xml\nCOPY ../../common/pom.xml ./common/pom.xml\n\n# Копируем исходный код\nCOPY ../../$MODULE_NAME/src ./$MODULE_NAME/src\nCOPY ../../common/src ./common/src\n\n# Собираем JAR\nRUN ./mvnw clean package -pl $MODULE_NAME -am -DskipTests\n\n# Создаем директорию для JAR\nRUN mkdir -p /app/target\n\n# Копируем JAR файл\nRUN cp $MODULE_NAME/target/*.jar /app/target/app.jar\n\n# Открываем порты\nEXPOSE $PORT\n\n# Запускаем приложение\nCMD [\"java\", \"-jar\", \"/app/target/app.jar\"]\nEOF\n\n# Создание README\nprint_info \"Создание README...\"\n\ncat > \"$MODULE_PATH/README.md\" << EOF\n# $MODULE_NAME Module\n\nЭтот модуль является частью проекта Gleb.\n\n## Структура\n\n- \\`src/main/java/com/viancis/$MODULE_NAME/\\` - Основной код модуля\n- \\`src/main/resources/\\` - Ресурсы модуля\n- \\`src/test/kotlin/com/viancis/$MODULE_NAME/\\` - Тесты модуля\n- \\`docker/\\` - Docker конфигурация\n\n## Зависимости\n\n- common (базовый модуль)\n\n## Порт\n\nСервис работает на порту: $PORT\n\n## Использование\n\nМодуль автоматически подключается к основному проекту через Maven.\n\n### Запуск\n\n\\`\\`\\`bash\n# Создать сервис\n./scripts/service-generator.sh -n $MODULE_NAME-service -p $PORT -m $MODULE_NAME -d common\n\n# Запустить\nmake dev\n\\`\\`\\`\nEOF\n\nprint_success \"Модуль $MODULE_NAME успешно создан!\"\nprint_info \"Следующие шаги:\"\necho \"  1. Добавьте модуль в родительский pom.xml (если нужно)\"\necho \"  2. Создайте сервис: ./scripts/service-generator.sh -n $MODULE_NAME-service -p $PORT -m $MODULE_NAME -d common\"\necho \"  3. Добавьте бизнес-логику в $MODULE_PATH/src/main/java/com/viancis/$MODULE_NAME/\"\necho \"  4. Запустите: make dev\" "
        }
    ]
}