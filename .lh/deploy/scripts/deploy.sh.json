{
    "sourceFile": "deploy/scripts/deploy.sh",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1754178642277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1754180867961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,230 @@\n+#!/bin/bash\n+\n+# Скрипт для быстрого деплоя проекта с кэшированием зависимостей\n+# Автор: viancis\n+# Версия: 1.0\n+\n+set -e\n+\n+# Цвета для вывода\n+RED='\\033[0;31m'\n+GREEN='\\033[0;32m'\n+YELLOW='\\033[1;33m'\n+BLUE='\\033[0;34m'\n+NC='\\033[0m'\n+\n+print_info() {\n+    echo -e \"${BLUE}[INFO]${NC} $1\"\n+}\n+\n+print_success() {\n+    echo -e \"${GREEN}[SUCCESS]${NC} $1\"\n+}\n+\n+print_warning() {\n+    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n+}\n+\n+print_error() {\n+    echo -e \"${RED}[ERROR]${NC} $1\"\n+}\n+\n+show_help() {\n+    echo \"Использование: $0 [ОПЦИИ]\"\n+    echo \"\"\n+    echo \"ОПЦИИ:\"\n+    echo \"  -h, --help              Показать эту справку\"\n+    echo \"  -e, --env ENV           Окружение (dev/prod) [по умолчанию: dev]\"\n+    echo \"  -f, --force             Принудительная пересборка (без кэша)\"\n+    echo \"  -c, --clean             Очистить все контейнеры и образы\"\n+    echo \"  -s, --service SERVICE   Пересобрать только конкретный сервис\"\n+    echo \"  -d, --down              Остановить все сервисы\"\n+    echo \"  -l, --logs              Показать логи\"\n+    echo \"  -r, --restart           Перезапустить сервисы\"\n+    echo \"\"\n+    echo \"ПРИМЕРЫ:\"\n+    echo \"  $0                     # Быстрый деплой в dev режиме\"\n+    echo \"  $0 -e prod             # Деплой в production режиме\"\n+    echo \"  $0 -f                  # Принудительная пересборка\"\n+    echo \"  $0 -s user-service     # Пересобрать только user-service\"\n+    echo \"  $0 -c                  # Очистить всё\"\n+    echo \"  $0 -l                  # Показать логи\"\n+}\n+\n+# Переменные по умолчанию\n+ENVIRONMENT=\"dev\"\n+FORCE_REBUILD=false\n+CLEAN_ALL=false\n+SERVICE_NAME=\"\"\n+STOP_SERVICES=false\n+SHOW_LOGS=false\n+RESTART_SERVICES=false\n+\n+# Парсинг аргументов\n+while [[ $# -gt 0 ]]; do\n+    case $1 in\n+        -h|--help)\n+            show_help\n+            exit 0\n+            ;;\n+        -e|--env)\n+            ENVIRONMENT=\"$2\"\n+            shift 2\n+            ;;\n+        -f|--force)\n+            FORCE_REBUILD=true\n+            shift\n+            ;;\n+        -c|--clean)\n+            CLEAN_ALL=true\n+            shift\n+            ;;\n+        -s|--service)\n+            SERVICE_NAME=\"$2\"\n+            shift 2\n+            ;;\n+        -d|--down)\n+            STOP_SERVICES=true\n+            shift\n+            ;;\n+        -l|--logs)\n+            SHOW_LOGS=true\n+            shift\n+            ;;\n+        -r|--restart)\n+            RESTART_SERVICES=true\n+            shift\n+            ;;\n+        *)\n+            print_error \"Неизвестная опция: $1\"\n+            show_help\n+            exit 1\n+            ;;\n+    esac\n+done\n+\n+# Определение файла docker-compose\n+if [ \"$ENVIRONMENT\" = \"prod\" ]; then\n+    COMPOSE_FILE=\"../docker-compose.yml\"\n+    print_info \"Используется production конфигурация\"\n+else\n+    COMPOSE_FILE=\"../docker-compose.dev.yml\"\n+    print_info \"Используется development конфигурация\"\n+fi\n+\n+# Проверка существования файла\n+if [ ! -f \"$COMPOSE_FILE\" ]; then\n+    print_error \"Файл $COMPOSE_FILE не найден!\"\n+    exit 1\n+fi\n+\n+clean_all() {\n+    print_info \"Очистка всех контейнеров и образов...\"\n+    \n+    docker-compose -f \"$COMPOSE_FILE\" down --volumes --remove-orphans 2>/dev/null || true\n+    \n+    docker rmi $(docker images -q | grep gleb) 2>/dev/null || true\n+    \n+    docker system prune -f\n+    \n+    print_success \"Очистка завершена\"\n+}\n+\n+stop_services() {\n+    print_info \"Остановка сервисов...\"\n+    docker-compose -f \"$COMPOSE_FILE\" down\n+    print_success \"Сервисы остановлены\"\n+}\n+\n+show_logs() {\n+    print_info \"Показ логов сервисов...\"\n+    docker-compose -f \"$COMPOSE_FILE\" logs -f\n+}\n+\n+restart_services() {\n+    print_info \"Перезапуск сервисов...\"\n+    docker-compose -f \"$COMPOSE_FILE\" restart\n+    print_success \"Сервисы перезапущены\"\n+}\n+\n+build_with_cache() {\n+    local service=$1\n+    local build_args=\"\"\n+    \n+    if [ \"$FORCE_REBUILD\" = true ]; then\n+        print_warning \"Принудительная пересборка (без кэша)\"\n+        build_args=\"--no-cache\"\n+    else\n+        print_info \"Используется кэш зависимостей Maven\"\n+    fi\n+    \n+    if [ -n \"$service\" ]; then\n+        print_info \"Сборка сервиса: $service\"\n+        docker-compose -f \"$COMPOSE_FILE\" build $build_args \"$service\"\n+    else\n+        print_info \"Сборка всех сервисов...\"\n+        docker-compose -f \"$COMPOSE_FILE\" build $build_args\n+    fi\n+}\n+\n+deploy() {\n+    print_info \"Начинаем деплой в режиме: $ENVIRONMENT\"\n+    \n+    build_with_cache \"$SERVICE_NAME\"\n+    \n+    print_info \"Запуск сервисов...\"\n+    docker-compose -f \"$COMPOSE_FILE\" up -d\n+    \n+    print_info \"Ожидание готовности сервисов...\"\n+    sleep 10\n+    \n+    print_info \"Статус сервисов:\"\n+    docker-compose -f \"$COMPOSE_FILE\" ps\n+    \n+    print_success \"Деплой завершен успешно!\"\n+    print_info \"Доступные сервисы:\"\n+    echo \"  - User Service: http://localhost:8090\"\n+    echo \"  - Point Service: http://localhost:8091\"\n+    echo \"  - Statistic Service: http://localhost:8095\"\n+    echo \"  - Grafana: http://localhost:3000 (admin/admin)\"\n+    echo \"  - Prometheus: http://localhost:9090\"\n+    echo \"  - RabbitMQ Management: http://localhost:15673 (guest/guest)\"\n+}\n+\n+main() {\n+    print_info \"=== Скрипт быстрого деплоя проекта ===\"\n+    \n+    if ! command -v docker &> /dev/null; then\n+        print_error \"Docker не установлен!\"\n+        exit 1\n+    fi\n+    \n+    if ! command -v docker-compose &> /dev/null; then\n+        print_error \"Docker Compose не установлен!\"\n+        exit 1\n+    fi\n+    \n+    if [ \"$CLEAN_ALL\" = true ]; then\n+        clean_all\n+        exit 0\n+    fi\n+    \n+    if [ \"$STOP_SERVICES\" = true ]; then\n+        stop_services\n+        exit 0\n+    fi\n+    \n+    if [ \"$SHOW_LOGS\" = true ]; then\n+        show_logs\n+        exit 0\n+    fi\n+    \n+    if [ \"$RESTART_SERVICES\" = true ]; then\n+        restart_services\n+        exit 0\n+    fi\n+    \n+    deploy\n+}\n+\n+main \"$@\" \n\\ No newline at end of file\n"
                },
                {
                    "date": 1754182007282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,15 +41,8 @@\n     echo \"  -d, --down              Остановить все сервисы\"\n     echo \"  -l, --logs              Показать логи\"\n     echo \"  -r, --restart           Перезапустить сервисы\"\n     echo \"\"\n-    echo \"ПРИМЕРЫ:\"\n-    echo \"  $0                     # Быстрый деплой в dev режиме\"\n-    echo \"  $0 -e prod             # Деплой в production режиме\"\n-    echo \"  $0 -f                  # Принудительная пересборка\"\n-    echo \"  $0 -s user-service     # Пересобрать только user-service\"\n-    echo \"  $0 -c                  # Очистить всё\"\n-    echo \"  $0 -l                  # Показать логи\"\n }\n \n # Переменные по умолчанию\n ENVIRONMENT=\"dev\"\n@@ -226,235 +219,5 @@\n     \n     deploy\n }\n \n-main \"$@\" \n-#!/bin/bash\n-\n-# Скрипт для быстрого деплоя проекта с кэшированием зависимостей\n-# Автор: viancis\n-# Версия: 1.0\n-\n-set -e\n-\n-# Цвета для вывода\n-RED='\\033[0;31m'\n-GREEN='\\033[0;32m'\n-YELLOW='\\033[1;33m'\n-BLUE='\\033[0;34m'\n-NC='\\033[0m'\n-\n-print_info() {\n-    echo -e \"${BLUE}[INFO]${NC} $1\"\n-}\n-\n-print_success() {\n-    echo -e \"${GREEN}[SUCCESS]${NC} $1\"\n-}\n-\n-print_warning() {\n-    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n-}\n-\n-print_error() {\n-    echo -e \"${RED}[ERROR]${NC} $1\"\n-}\n-\n-show_help() {\n-    echo \"Использование: $0 [ОПЦИИ]\"\n-    echo \"\"\n-    echo \"ОПЦИИ:\"\n-    echo \"  -h, --help              Показать эту справку\"\n-    echo \"  -e, --env ENV           Окружение (dev/prod) [по умолчанию: dev]\"\n-    echo \"  -f, --force             Принудительная пересборка (без кэша)\"\n-    echo \"  -c, --clean             Очистить все контейнеры и образы\"\n-    echo \"  -s, --service SERVICE   Пересобрать только конкретный сервис\"\n-    echo \"  -d, --down              Остановить все сервисы\"\n-    echo \"  -l, --logs              Показать логи\"\n-    echo \"  -r, --restart           Перезапустить сервисы\"\n-    echo \"\"\n-    echo \"ПРИМЕРЫ:\"\n-    echo \"  $0                     # Быстрый деплой в dev режиме\"\n-    echo \"  $0 -e prod             # Деплой в production режиме\"\n-    echo \"  $0 -f                  # Принудительная пересборка\"\n-    echo \"  $0 -s user-service     # Пересобрать только user-service\"\n-    echo \"  $0 -c                  # Очистить всё\"\n-    echo \"  $0 -l                  # Показать логи\"\n-}\n-\n-# Переменные по умолчанию\n-ENVIRONMENT=\"dev\"\n-FORCE_REBUILD=false\n-CLEAN_ALL=false\n-SERVICE_NAME=\"\"\n-STOP_SERVICES=false\n-SHOW_LOGS=false\n-RESTART_SERVICES=false\n-\n-# Парсинг аргументов\n-while [[ $# -gt 0 ]]; do\n-    case $1 in\n-        -h|--help)\n-            show_help\n-            exit 0\n-            ;;\n-        -e|--env)\n-            ENVIRONMENT=\"$2\"\n-            shift 2\n-            ;;\n-        -f|--force)\n-            FORCE_REBUILD=true\n-            shift\n-            ;;\n-        -c|--clean)\n-            CLEAN_ALL=true\n-            shift\n-            ;;\n-        -s|--service)\n-            SERVICE_NAME=\"$2\"\n-            shift 2\n-            ;;\n-        -d|--down)\n-            STOP_SERVICES=true\n-            shift\n-            ;;\n-        -l|--logs)\n-            SHOW_LOGS=true\n-            shift\n-            ;;\n-        -r|--restart)\n-            RESTART_SERVICES=true\n-            shift\n-            ;;\n-        *)\n-            print_error \"Неизвестная опция: $1\"\n-            show_help\n-            exit 1\n-            ;;\n-    esac\n-done\n-\n-# Определение файла docker-compose\n-if [ \"$ENVIRONMENT\" = \"prod\" ]; then\n-    COMPOSE_FILE=\"../docker-compose.yml\"\n-    print_info \"Используется production конфигурация\"\n-else\n-    COMPOSE_FILE=\"../docker-compose.dev.yml\"\n-    print_info \"Используется development конфигурация\"\n-fi\n-\n-# Проверка существования файла\n-if [ ! -f \"$COMPOSE_FILE\" ]; then\n-    print_error \"Файл $COMPOSE_FILE не найден!\"\n-    exit 1\n-fi\n-\n-clean_all() {\n-    print_info \"Очистка всех контейнеров и образов...\"\n-    \n-    docker-compose -f \"$COMPOSE_FILE\" down --volumes --remove-orphans 2>/dev/null || true\n-    \n-    docker rmi $(docker images -q | grep gleb) 2>/dev/null || true\n-    \n-    docker system prune -f\n-    \n-    print_success \"Очистка завершена\"\n-}\n-\n-stop_services() {\n-    print_info \"Остановка сервисов...\"\n-    docker-compose -f \"$COMPOSE_FILE\" down\n-    print_success \"Сервисы остановлены\"\n-}\n-\n-show_logs() {\n-    print_info \"Показ логов сервисов...\"\n-    docker-compose -f \"$COMPOSE_FILE\" logs -f\n-}\n-\n-restart_services() {\n-    print_info \"Перезапуск сервисов...\"\n-    docker-compose -f \"$COMPOSE_FILE\" restart\n-    print_success \"Сервисы перезапущены\"\n-}\n-\n-build_with_cache() {\n-    local service=$1\n-    local build_args=\"\"\n-    \n-    if [ \"$FORCE_REBUILD\" = true ]; then\n-        print_warning \"Принудительная пересборка (без кэша)\"\n-        build_args=\"--no-cache\"\n-    else\n-        print_info \"Используется кэш зависимостей Maven\"\n-    fi\n-    \n-    if [ -n \"$service\" ]; then\n-        print_info \"Сборка сервиса: $service\"\n-        docker-compose -f \"$COMPOSE_FILE\" build $build_args \"$service\"\n-    else\n-        print_info \"Сборка всех сервисов...\"\n-        docker-compose -f \"$COMPOSE_FILE\" build $build_args\n-    fi\n-}\n-\n-deploy() {\n-    print_info \"Начинаем деплой в режиме: $ENVIRONMENT\"\n-    \n-    build_with_cache \"$SERVICE_NAME\"\n-    \n-    print_info \"Запуск сервисов...\"\n-    docker-compose -f \"$COMPOSE_FILE\" up -d\n-    \n-    print_info \"Ожидание готовности сервисов...\"\n-    sleep 10\n-    \n-    print_info \"Статус сервисов:\"\n-    docker-compose -f \"$COMPOSE_FILE\" ps\n-    \n-    print_success \"Деплой завершен успешно!\"\n-    print_info \"Доступные сервисы:\"\n-    echo \"  - User Service: http://localhost:8090\"\n-    echo \"  - Point Service: http://localhost:8091\"\n-    echo \"  - Statistic Service: http://localhost:8095\"\n-    echo \"  - Grafana: http://localhost:3000 (admin/admin)\"\n-    echo \"  - Prometheus: http://localhost:9090\"\n-    echo \"  - RabbitMQ Management: http://localhost:15673 (guest/guest)\"\n-}\n-\n-main() {\n-    print_info \"=== Скрипт быстрого деплоя проекта ===\"\n-    \n-    if ! command -v docker &> /dev/null; then\n-        print_error \"Docker не установлен!\"\n-        exit 1\n-    fi\n-    \n-    if ! command -v docker-compose &> /dev/null; then\n-        print_error \"Docker Compose не установлен!\"\n-        exit 1\n-    fi\n-    \n-    if [ \"$CLEAN_ALL\" = true ]; then\n-        clean_all\n-        exit 0\n-    fi\n-    \n-    if [ \"$STOP_SERVICES\" = true ]; then\n-        stop_services\n-        exit 0\n-    fi\n-    \n-    if [ \"$SHOW_LOGS\" = true ]; then\n-        show_logs\n-        exit 0\n-    fi\n-    \n-    if [ \"$RESTART_SERVICES\" = true ]; then\n-        restart_services\n-        exit 0\n-    fi\n-    \n-    deploy\n-}\n-\n main \"$@\" \n\\ No newline at end of file\n"
                }
            ],
            "date": 1754178642277,
            "name": "Commit-0",
            "content": "#!/bin/bash\n\n# Скрипт для быстрого деплоя проекта с кэшированием зависимостей\n# Автор: viancis\n# Версия: 1.0\n\nset -e\n\n# Цвета для вывода\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m'\n\nprint_info() {\n    echo -e \"${BLUE}[INFO]${NC} $1\"\n}\n\nprint_success() {\n    echo -e \"${GREEN}[SUCCESS]${NC} $1\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n}\n\nprint_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\nshow_help() {\n    echo \"Использование: $0 [ОПЦИИ]\"\n    echo \"\"\n    echo \"ОПЦИИ:\"\n    echo \"  -h, --help              Показать эту справку\"\n    echo \"  -e, --env ENV           Окружение (dev/prod) [по умолчанию: dev]\"\n    echo \"  -f, --force             Принудительная пересборка (без кэша)\"\n    echo \"  -c, --clean             Очистить все контейнеры и образы\"\n    echo \"  -s, --service SERVICE   Пересобрать только конкретный сервис\"\n    echo \"  -d, --down              Остановить все сервисы\"\n    echo \"  -l, --logs              Показать логи\"\n    echo \"  -r, --restart           Перезапустить сервисы\"\n    echo \"\"\n    echo \"ПРИМЕРЫ:\"\n    echo \"  $0                     # Быстрый деплой в dev режиме\"\n    echo \"  $0 -e prod             # Деплой в production режиме\"\n    echo \"  $0 -f                  # Принудительная пересборка\"\n    echo \"  $0 -s user-service     # Пересобрать только user-service\"\n    echo \"  $0 -c                  # Очистить всё\"\n    echo \"  $0 -l                  # Показать логи\"\n}\n\n# Переменные по умолчанию\nENVIRONMENT=\"dev\"\nFORCE_REBUILD=false\nCLEAN_ALL=false\nSERVICE_NAME=\"\"\nSTOP_SERVICES=false\nSHOW_LOGS=false\nRESTART_SERVICES=false\n\n# Парсинг аргументов\nwhile [[ $# -gt 0 ]]; do\n    case $1 in\n        -h|--help)\n            show_help\n            exit 0\n            ;;\n        -e|--env)\n            ENVIRONMENT=\"$2\"\n            shift 2\n            ;;\n        -f|--force)\n            FORCE_REBUILD=true\n            shift\n            ;;\n        -c|--clean)\n            CLEAN_ALL=true\n            shift\n            ;;\n        -s|--service)\n            SERVICE_NAME=\"$2\"\n            shift 2\n            ;;\n        -d|--down)\n            STOP_SERVICES=true\n            shift\n            ;;\n        -l|--logs)\n            SHOW_LOGS=true\n            shift\n            ;;\n        -r|--restart)\n            RESTART_SERVICES=true\n            shift\n            ;;\n        *)\n            print_error \"Неизвестная опция: $1\"\n            show_help\n            exit 1\n            ;;\n    esac\ndone\n\n# Определение файла docker-compose\nif [ \"$ENVIRONMENT\" = \"prod\" ]; then\n    COMPOSE_FILE=\"../docker-compose.yml\"\n    print_info \"Используется production конфигурация\"\nelse\n    COMPOSE_FILE=\"../docker-compose.dev.yml\"\n    print_info \"Используется development конфигурация\"\nfi\n\n# Проверка существования файла\nif [ ! -f \"$COMPOSE_FILE\" ]; then\n    print_error \"Файл $COMPOSE_FILE не найден!\"\n    exit 1\nfi\n\nclean_all() {\n    print_info \"Очистка всех контейнеров и образов...\"\n    \n    docker-compose -f \"$COMPOSE_FILE\" down --volumes --remove-orphans 2>/dev/null || true\n    \n    docker rmi $(docker images -q | grep gleb) 2>/dev/null || true\n    \n    docker system prune -f\n    \n    print_success \"Очистка завершена\"\n}\n\nstop_services() {\n    print_info \"Остановка сервисов...\"\n    docker-compose -f \"$COMPOSE_FILE\" down\n    print_success \"Сервисы остановлены\"\n}\n\nshow_logs() {\n    print_info \"Показ логов сервисов...\"\n    docker-compose -f \"$COMPOSE_FILE\" logs -f\n}\n\nrestart_services() {\n    print_info \"Перезапуск сервисов...\"\n    docker-compose -f \"$COMPOSE_FILE\" restart\n    print_success \"Сервисы перезапущены\"\n}\n\nbuild_with_cache() {\n    local service=$1\n    local build_args=\"\"\n    \n    if [ \"$FORCE_REBUILD\" = true ]; then\n        print_warning \"Принудительная пересборка (без кэша)\"\n        build_args=\"--no-cache\"\n    else\n        print_info \"Используется кэш зависимостей Maven\"\n    fi\n    \n    if [ -n \"$service\" ]; then\n        print_info \"Сборка сервиса: $service\"\n        docker-compose -f \"$COMPOSE_FILE\" build $build_args \"$service\"\n    else\n        print_info \"Сборка всех сервисов...\"\n        docker-compose -f \"$COMPOSE_FILE\" build $build_args\n    fi\n}\n\ndeploy() {\n    print_info \"Начинаем деплой в режиме: $ENVIRONMENT\"\n    \n    build_with_cache \"$SERVICE_NAME\"\n    \n    print_info \"Запуск сервисов...\"\n    docker-compose -f \"$COMPOSE_FILE\" up -d\n    \n    print_info \"Ожидание готовности сервисов...\"\n    sleep 10\n    \n    print_info \"Статус сервисов:\"\n    docker-compose -f \"$COMPOSE_FILE\" ps\n    \n    print_success \"Деплой завершен успешно!\"\n    print_info \"Доступные сервисы:\"\n    echo \"  - User Service: http://localhost:8090\"\n    echo \"  - Point Service: http://localhost:8091\"\n    echo \"  - Statistic Service: http://localhost:8095\"\n    echo \"  - Grafana: http://localhost:3000 (admin/admin)\"\n    echo \"  - Prometheus: http://localhost:9090\"\n    echo \"  - RabbitMQ Management: http://localhost:15673 (guest/guest)\"\n}\n\nmain() {\n    print_info \"=== Скрипт быстрого деплоя проекта ===\"\n    \n    if ! command -v docker &> /dev/null; then\n        print_error \"Docker не установлен!\"\n        exit 1\n    fi\n    \n    if ! command -v docker-compose &> /dev/null; then\n        print_error \"Docker Compose не установлен!\"\n        exit 1\n    fi\n    \n    if [ \"$CLEAN_ALL\" = true ]; then\n        clean_all\n        exit 0\n    fi\n    \n    if [ \"$STOP_SERVICES\" = true ]; then\n        stop_services\n        exit 0\n    fi\n    \n    if [ \"$SHOW_LOGS\" = true ]; then\n        show_logs\n        exit 0\n    fi\n    \n    if [ \"$RESTART_SERVICES\" = true ]; then\n        restart_services\n        exit 0\n    fi\n    \n    deploy\n}\n\nmain \"$@\" "
        }
    ]
}