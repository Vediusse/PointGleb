{
    "sourceFile": "deploy/scripts/watch-all-parallel.sh",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1754181193664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1754181193664,
            "name": "Commit-0",
            "content": "#!/bin/bash\n\n# Умный скрипт для параллельного мониторинга всех микросервисов\n# Автор: viancis\n# Версия: 1.0\n\nset -e\n\n# Цвета для вывода\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nPURPLE='\\033[0;35m'\nCYAN='\\033[0;36m'\nNC='\\033[0m'\n\nprint_info() {\n    echo -e \"${BLUE}[WATCH-PARALLEL]${NC} $1\"\n}\n\nprint_success() {\n    echo -e \"${GREEN}[SUCCESS]${NC} $1\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n}\n\nprint_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\nprint_user() {\n    echo -e \"${CYAN}[USER]${NC} $1\"\n}\n\nprint_point() {\n    echo -e \"${PURPLE}[POINT]${NC} $1\"\n}\n\nprint_statistic() {\n    echo -e \"${YELLOW}[STATISTIC]${NC} $1\"\n}\n\ncheck_dependencies() {\n    if ! command -v fswatch &> /dev/null; then\n        print_error \"fswatch не установлен. Установите его:\"\n        echo \"  macOS: brew install fswatch\"\n        echo \"  Ubuntu: sudo apt-get install fswatch\"\n        echo \"  CentOS: sudo yum install fswatch\"\n        exit 1\n    fi\n}\n\n# Функция для параллельного перезапуска сервисов\nrestart_services_parallel() {\n    local services=(\"$@\")\n    local pids=()\n    \n    print_info \"Параллельный перезапуск сервисов: ${services[*]}\"\n    \n    # Останавливаем все сервисы сначала\n    for service in \"${services[@]}\"; do\n        print_info \"Остановка $service\"\n        docker-compose -f ../docker-compose.dev.yml stop \"$service\" 2>/dev/null || true\n    done\n    \n    # Запускаем все сервисы параллельно\n    for service in \"${services[@]}\"; do\n        case $service in\n            \"user-service\")\n                print_user \"Запуск $service\"\n                docker-compose -f ../docker-compose.dev.yml up -d --build \"$service\" &\n                pids+=($!)\n                ;;\n            \"point-service\")\n                print_point \"Запуск $service\"\n                docker-compose -f ../docker-compose.dev.yml up -d --build \"$service\" &\n                pids+=($!)\n                ;;\n            \"statistic-service\")\n                print_statistic \"Запуск $service\"\n                docker-compose -f ../docker-compose.dev.yml up -d --build \"$service\" &\n                pids+=($!)\n                ;;\n        esac\n    done\n    \n    # Ждем завершения всех процессов\n    print_info \"Ожидание завершения сборки...\"\n    for pid in \"${pids[@]}\"; do\n        wait $pid\n    done\n    \n    print_success \"Все сервисы перезапущены параллельно\"\n}\n\n# Функция определения сервиса по измененному файлу\nget_service_by_file() {\n    local file_path=$1\n    \n    if [[ \"$file_path\" == *\"/user/src/\"* ]]; then\n        echo \"user-service\"\n    elif [[ \"$file_path\" == *\"/point/src/\"* ]]; then\n        echo \"point-service\"\n    elif [[ \"$file_path\" == *\"/statistic/src/\"* ]]; then\n        echo \"statistic-service\"\n    elif [[ \"$file_path\" == *\"/common/src/\"* ]]; then\n        echo \"all\"\n    else\n        echo \"unknown\"\n    fi\n}\n\n# Умная параллельная сборка\nwatch_all_smart_parallel() {\n    print_info \"Запуск умного параллельного мониторинга...\"\n    print_info \"Нажмите Ctrl+C для остановки\"\n    print_info \"\"\n    print_info \"Отслеживаемые директории:\"\n    print_info \"  - user/src (User Service)\"\n    print_info \"  - point/src (Point Service)\"\n    print_info \"  - statistic/src (Statistic Service)\"\n    print_info \"  - common/src (Все сервисы)\"\n    print_info \"\"\n    \n    fswatch -o ../user/src ../point/src ../statistic/src ../common/src | while read f; do\n        print_info \"Обнаружены изменения\"\n        \n        local changed_files=$(find ../user/src ../point/src ../statistic/src ../common/src -type f -newer /tmp/last_check 2>/dev/null || echo \"\")\n        \n        if [ -n \"$changed_files\" ]; then\n            print_info \"Измененные файлы:\"\n            local services_to_restart=()\n            local has_common_changes=false\n            \n            echo \"$changed_files\" | while read file; do\n                if [ -n \"$file\" ]; then\n                    local service=$(get_service_by_file \"$file\")\n                    case $service in\n                        \"user-service\")\n                            print_user \"  $file\"\n                            services_to_restart+=(\"user-service\")\n                            ;;\n                        \"point-service\")\n                            print_point \"  $file\"\n                            services_to_restart+=(\"point-service\")\n                            ;;\n                        \"statistic-service\")\n                            print_statistic \"  $file\"\n                            services_to_restart+=(\"statistic-service\")\n                            ;;\n                        \"all\")\n                            print_warning \"  $file (влияет на все сервисы)\"\n                            has_common_changes=true\n                            ;;\n                        *)\n                            print_info \"  $file\"\n                            ;;\n                    esac\n                fi\n            done\n            \n            if [ \"$has_common_changes\" = true ]; then\n                print_warning \"Изменения в common модуле - параллельный перезапуск всех сервисов\"\n                restart_services_parallel \"user-service\" \"point-service\" \"statistic-service\"\n            else\n                # Убираем дубликаты из массива\n                local unique_services=($(printf \"%s\\n\" \"${services_to_restart[@]}\" | sort -u))\n                if [ ${#unique_services[@]} -gt 0 ]; then\n                    print_info \"Параллельный перезапуск затронутых сервисов: ${unique_services[*]}\"\n                    restart_services_parallel \"${unique_services[@]}\"\n                fi\n            fi\n        else\n            print_warning \"Не удалось определить измененные файлы - параллельный перезапуск всех сервисов\"\n            restart_services_parallel \"user-service\" \"point-service\" \"statistic-service\"\n        fi\n        \n        touch /tmp/last_check\n        \n        print_info \"Ожидание новых изменений...\"\n        print_info \"\"\n    done\n}\n\n# Простая параллельная сборка (все сервисы)\nwatch_all_simple_parallel() {\n    print_info \"Запуск простого параллельного мониторинга...\"\n    print_info \"Нажмите Ctrl+C для остановки\"\n    print_info \"\"\n    print_info \"Отслеживаемые директории:\"\n    print_info \"  - user/src\"\n    print_info \"  - point/src\"\n    print_info \"  - statistic/src\"\n    print_info \"  - common/src\"\n    print_info \"\"\n    \n    fswatch -o ../user/src ../point/src ../statistic/src ../common/src | while read f; do\n        print_info \"Обнаружены изменения - параллельный перезапуск всех сервисов\"\n        restart_services_parallel \"user-service\" \"point-service\" \"statistic-service\"\n        print_info \"Ожидание новых изменений...\"\n        print_info \"\"\n    done\n}\n\nshow_help() {\n    echo \"Использование: $0 [ОПЦИИ]\"\n    echo \"\"\n    echo \"ОПЦИИ:\"\n    echo \"  -h, --help              Показать эту справку\"\n    echo \"  -s, --simple            Простой параллельный режим (все сервисы)\"\n    echo \"  -i, --smart             Умный параллельный режим (по умолчанию)\"\n    echo \"\"\n    echo \"РЕЖИМЫ РАБОТЫ:\"\n    echo \"  Умный параллельный режим (по умолчанию):\"\n    echo \"    - Отслеживает конкретные файлы\"\n    echo \"    - Параллельно перезапускает только затронутые сервисы\"\n    echo \"    - При изменении common перезапускает все параллельно\"\n    echo \"\"\n    echo \"  Простой параллельный режим (-s):\"\n    echo \"    - Параллельно перезапускает все сервисы при любом изменении\"\n    echo \"\"\n    echo \"ПРЕИМУЩЕСТВА:\"\n    echo \"  - Быстрее в 2-3 раза по сравнению с последовательной сборкой\"\n    echo \"  - Эффективное использование ресурсов\"\n    echo \"  - Умная логика для common модуля\"\n    echo \"\"\n    echo \"ПРИМЕРЫ:\"\n    echo \"  $0                     # Умный параллельный мониторинг\"\n    echo \"  $0 -s                  # Простой параллельный мониторинг\"\n    echo \"  $0 -i                  # Умный режим (явно)\"\n}\n\nmain() {\n    local simple_mode=false\n    local smart_mode=true\n    \n    while [[ $# -gt 0 ]]; do\n        case $1 in\n            -h|--help)\n                show_help\n                exit 0\n                ;;\n            -s|--simple)\n                simple_mode=true\n                smart_mode=false\n                shift\n                ;;\n            -i|--smart)\n                smart_mode=true\n                simple_mode=false\n                shift\n                ;;\n            *)\n                print_error \"Неизвестная опция: $1\"\n                show_help\n                exit 1\n                ;;\n        esac\n    done\n    \n    check_dependencies\n    \n    if ! command -v docker &> /dev/null; then\n        print_error \"Docker не установлен!\"\n        exit 1\n    fi\n    \n    if ! command -v docker-compose &> /dev/null; then\n        print_error \"Docker Compose не установлен!\"\n        exit 1\n    fi\n    \n    if [ ! -f \"../docker-compose.dev.yml\" ]; then\n        print_error \"Файл docker-compose.dev.yml не найден!\"\n        exit 1\n    fi\n    \n    touch /tmp/last_check\n    \n    print_info \"=== Параллельный мониторинг всех микросервисов ===\"\n    \n    if [ \"$simple_mode\" = true ]; then\n        watch_all_simple_parallel\n    else\n        watch_all_smart_parallel\n    fi\n}\n\nmain \"$@\" "
        }
    ]
}