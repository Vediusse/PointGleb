{
    "sourceFile": "deploy/scripts/module-manager.sh",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1754241665621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1754242469076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,8 +113,15 @@\n SCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\n PROJECT_ROOT=\"$(dirname \"$SCRIPT_DIR\")\"\n PARENT_POM=\"$PROJECT_ROOT/pom.xml\"\n \n+# Проверяем, что мы в правильной директории\n+if [ ! -f \"$PROJECT_ROOT/pom.xml\" ]; then\n+    print_error \"Родительский pom.xml не найден в $PROJECT_ROOT\"\n+    print_info \"Убедитесь, что запускаете скрипт из директории deploy/\"\n+    exit 1\n+fi\n+\n # Функция для получения списка модулей из pom.xml\n get_modules_from_pom() {\n     local pom_file=\"$1\"\n     if [ -f \"$pom_file\" ]; then\n@@ -371,9 +378,9 @@\n     # Переходим в директорию проекта\n     cd \"$PROJECT_ROOT\"\n     \n     # Обновляем зависимости Maven\n-    ./mvnw dependency:resolve -pl \"$module_name\" -am\n+    \"$MVN_WRAPPER\" dependency:resolve -pl \"$module_name\" -am\n     \n     print_success \"Зависимости модуля $module_name обновлены\"\n }\n \n@@ -392,9 +399,9 @@\n     # Переходим в директорию проекта\n     cd \"$PROJECT_ROOT\"\n     \n     # Очищаем и пересобираем модуль\n-    ./mvnw clean compile -pl \"$module_name\" -am -DskipTests\n+    \"$MVN_WRAPPER\" clean compile -pl \"$module_name\" -am -DskipTests\n     \n     print_success \"Модуль $module_name пересобран\"\n }\n \n@@ -486,14 +493,27 @@\n # Основная функция\n main() {\n     print_header \"Менеджер мультимодульных зависимостей\"\n     \n-    # Проверка Maven\n-    if [ ! -f \"$PROJECT_ROOT/mvnw\" ]; then\n-        print_error \"Maven wrapper не найден!\"\n+    # Проверка Maven wrapper (ищем в нескольких местах)\n+    MVN_WRAPPER=\"\"\n+    if [ -f \"$PROJECT_ROOT/mvnw\" ]; then\n+        MVN_WRAPPER=\"$PROJECT_ROOT/mvnw\"\n+    elif [ -f \"$PROJECT_ROOT/../mvnw\" ]; then\n+        MVN_WRAPPER=\"$PROJECT_ROOT/../mvnw\"\n+    elif [ -f \"$PROJECT_ROOT/../../mvnw\" ]; then\n+        MVN_WRAPPER=\"$PROJECT_ROOT/../../mvnw\"\n+    else\n+        print_error \"Maven wrapper не найден! Убедитесь, что находитесь в правильной директории.\"\n+        print_info \"Ищем mvnw в:\"\n+        print_info \"  - $PROJECT_ROOT/mvnw\"\n+        print_info \"  - $PROJECT_ROOT/../mvnw\"\n+        print_info \"  - $PROJECT_ROOT/../../mvnw\"\n         exit 1\n     fi\n     \n+    print_info \"Найден Maven wrapper: $MVN_WRAPPER\"\n+    \n     # Показать список модулей\n     if [ \"$LIST_MODULES\" = true ]; then\n         list_modules\n         exit 0\n"
                }
            ],
            "date": 1754241665621,
            "name": "Commit-0",
            "content": "#!/bin/bash\n\n# Скрипт для управления мультимодульными зависимостями\n# Автор: viancis\n# Версия: 1.0\n\nset -e\n\n# Цвета для вывода\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nPURPLE='\\033[0;35m'\nCYAN='\\033[0;36m'\nNC='\\033[0m'\n\nprint_info() {\n    echo -e \"${BLUE}[INFO]${NC} $1\"\n}\n\nprint_success() {\n    echo -e \"${GREEN}[SUCCESS]${NC} $1\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n}\n\nprint_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\nprint_header() {\n    echo -e \"${PURPLE}=== $1 ===${NC}\"\n}\n\nshow_help() {\n    echo \"Использование: $0 [ОПЦИИ]\"\n    echo \"\"\n    echo \"ОПЦИИ:\"\n    echo \"  -a, --add MODULE           Добавить модуль в проект\"\n    echo \"  -d, --deps TARGET,DEPS     Добавить зависимости к модулю\"\n    echo \"  -r, --remove MODULE        Удалить модуль из проекта\"\n    echo \"  -l, --list                 Показать список модулей\"\n    echo \"  -s, --show MODULE          Показать зависимости модуля\"\n    echo \"  -u, --update MODULE        Обновить зависимости модуля\"\n    echo \"  -b, --build MODULE         Пересобрать модуль\"\n    echo \"  -h, --help                 Показать эту справку\"\n    echo \"\"\n    echo \"ПРИМЕРЫ:\"\n    echo \"  $0 -a auth                 # Добавить модуль auth\"\n    echo \"  $0 -d user,common          # Добавить зависимости common к user\"\n    echo \"  $0 -l                      # Показать все модули\"\n    echo \"  $0 -s user                 # Показать зависимости user\"\n    echo \"  $0 -b point                # Пересобрать point модуль\"\n    echo \"\"\n}\n\n# Переменные\nADD_MODULE=\"\"\nDEPENDENCIES=\"\"\nREMOVE_MODULE=\"\"\nLIST_MODULES=false\nSHOW_MODULE=\"\"\nUPDATE_MODULE=\"\"\nBUILD_MODULE=\"\"\n\n# Парсинг аргументов\nwhile [[ $# -gt 0 ]]; do\n    case $1 in\n        -h|--help)\n            show_help\n            exit 0\n            ;;\n        -a|--add)\n            ADD_MODULE=\"$2\"\n            shift 2\n            ;;\n        -d|--deps)\n            DEPENDENCIES=\"$2\"\n            shift 2\n            ;;\n        -r|--remove)\n            REMOVE_MODULE=\"$2\"\n            shift 2\n            ;;\n        -l|--list)\n            LIST_MODULES=true\n            shift\n            ;;\n        -s|--show)\n            SHOW_MODULE=\"$2\"\n            shift 2\n            ;;\n        -u|--update)\n            UPDATE_MODULE=\"$2\"\n            shift 2\n            ;;\n        -b|--build)\n            BUILD_MODULE=\"$2\"\n            shift 2\n            ;;\n        *)\n            print_error \"Неизвестная опция: $1\"\n            show_help\n            exit 1\n            ;;\n    esac\ndone\n\n# Определение путей\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\nPROJECT_ROOT=\"$(dirname \"$SCRIPT_DIR\")\"\nPARENT_POM=\"$PROJECT_ROOT/pom.xml\"\n\n# Функция для получения списка модулей из pom.xml\nget_modules_from_pom() {\n    local pom_file=\"$1\"\n    if [ -f \"$pom_file\" ]; then\n        grep -A 20 \"<modules>\" \"$pom_file\" | grep \"<module>\" | sed 's/.*<module>\\(.*\\)<\\/module>.*/\\1/' | tr '\\n' ' '\n    fi\n}\n\n# Функция для создания нового модуля\ncreate_module() {\n    local module_name=\"$1\"\n    local module_path=\"$PROJECT_ROOT/$module_name\"\n    \n    if [ -d \"$module_path\" ]; then\n        print_warning \"Модуль $module_name уже существует\"\n        return 1\n    fi\n    \n    print_info \"Создание модуля $module_name...\"\n    \n    # Создаем структуру директорий\n    mkdir -p \"$module_path/src/main/java/com/viancis/$module_name\"\n    mkdir -p \"$module_path/src/main/resources\"\n    mkdir -p \"$module_path/src/test/kotlin/com/viancis/$module_name\"\n    mkdir -p \"$module_path/docker\"\n    \n    # Создаем pom.xml для модуля\n    cat > \"$module_path/pom.xml\" << EOF\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    \n    <parent>\n        <groupId>com.viancis</groupId>\n        <artifactId>gleb</artifactId>\n        <version>0.0.1-SNAPSHOT</version>\n        <relativePath>../pom.xml</relativePath>\n    </parent>\n    \n    <artifactId>$module_name</artifactId>\n    <name>$module_name</name>\n    <description>$module_name module</description>\n    \n    <dependencies>\n        <dependency>\n            <groupId>com.viancis</groupId>\n            <artifactId>common</artifactId>\n            <version>\\${project.version}</version>\n        </dependency>\n    </dependencies>\n</project>\nEOF\n    \n    # Создаем основной класс\n    cat > \"$module_path/src/main/java/com/viancis/$module_name/${module_name^}Module.java\" << EOF\npackage com.viancis.$module_name;\n\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class ${module_name^}Module {\n    \n    public ${module_name^}Module() {\n        // Инициализация модуля\n    }\n    \n    public String getModuleName() {\n        return \"$module_name\";\n    }\n}\nEOF\n    \n    # Создаем README для модуля\n    cat > \"$module_path/README.md\" << EOF\n# $module_name Module\n\nЭтот модуль является частью проекта Gleb.\n\n## Структура\n\n- \\`src/main/java/com/viancis/$module_name/\\` - Основной код модуля\n- \\`src/main/resources/\\` - Ресурсы модуля\n- \\`src/test/kotlin/com/viancis/$module_name/\\` - Тесты модуля\n- \\`docker/\\` - Docker конфигурация\n\n## Зависимости\n\n- common (базовый модуль)\n\n## Использование\n\nМодуль автоматически подключается к основному проекту через Maven.\nEOF\n    \n    # Добавляем модуль в родительский pom.xml\n    add_module_to_parent_pom \"$module_name\"\n    \n    print_success \"Модуль $module_name создан\"\n}\n\n# Функция для добавления модуля в родительский pom.xml\nadd_module_to_parent_pom() {\n    local module_name=\"$1\"\n    \n    if [ ! -f \"$PARENT_POM\" ]; then\n        print_error \"Родительский pom.xml не найден!\"\n        return 1\n    fi\n    \n    # Проверяем, есть ли уже модуль в списке\n    if grep -q \"<module>$module_name</module>\" \"$PARENT_POM\"; then\n        print_warning \"Модуль $module_name уже добавлен в родительский pom.xml\"\n        return 0\n    fi\n    \n    # Находим секцию modules и добавляем новый модуль\n    sed -i.bak \"/<modules>/,/<\\/modules>/ s/<\\/modules>/    <module>$module_name<\\/module>\\n  <\\/modules>/\" \"$PARENT_POM\"\n    rm -f \"$PARENT_POM.bak\"\n    \n    print_success \"Модуль $module_name добавлен в родительский pom.xml\"\n}\n\n# Функция для добавления зависимостей к модулю\nadd_dependencies_to_module() {\n    local target_module=\"$1\"\n    local dependencies=\"$2\"\n    \n    local module_pom=\"$PROJECT_ROOT/$target_module/pom.xml\"\n    \n    if [ ! -f \"$module_pom\" ]; then\n        print_error \"Модуль $target_module не найден!\"\n        return 1\n    fi\n    \n    print_info \"Добавление зависимостей к модулю $target_module...\"\n    \n    IFS=',' read -ra DEPS <<< \"$dependencies\"\n    for dep in \"${DEPS[@]}\"; do\n        dep=$(echo \"$dep\" | xargs)  # Убираем пробелы\n        \n        # Проверяем существование модуля-зависимости\n        if [ ! -d \"$PROJECT_ROOT/$dep\" ]; then\n            print_warning \"Модуль $dep не существует, пропускаем\"\n            continue\n        fi\n        \n        # Проверяем, есть ли уже зависимость\n        if grep -q \"<artifactId>$dep</artifactId>\" \"$module_pom\"; then\n            print_warning \"Зависимость $dep уже добавлена в $target_module\"\n            continue\n        fi\n        \n        # Добавляем зависимость в pom.xml\n        sed -i.bak \"/<dependencies>/,/<\\/dependencies>/ s/<\\/dependencies>/        <dependency>\\n            <groupId>com.viancis<\\/groupId>\\n            <artifactId>$dep<\\/artifactId>\\n            <version>\\${project.version}<\\/version>\\n        <\\/dependency>\\n    <\\/dependencies>/\" \"$module_pom\"\n        rm -f \"$module_pom.bak\"\n        \n        print_success \"Добавлена зависимость $dep к модулю $target_module\"\n    done\n}\n\n# Функция для удаления модуля\nremove_module() {\n    local module_name=\"$1\"\n    local module_path=\"$PROJECT_ROOT/$module_name\"\n    \n    if [ ! -d \"$module_path\" ]; then\n        print_error \"Модуль $module_name не найден!\"\n        return 1\n    fi\n    \n    print_info \"Удаление модуля $module_name...\"\n    \n    # Удаляем модуль из родительского pom.xml\n    if [ -f \"$PARENT_POM\" ]; then\n        sed -i.bak \"/<module>$module_name<\\/module>/d\" \"$PARENT_POM\"\n        rm -f \"$PARENT_POM.bak\"\n        print_success \"Модуль $module_name удален из родительского pom.xml\"\n    fi\n    \n    # Удаляем директорию модуля\n    rm -rf \"$module_path\"\n    print_success \"Директория модуля $module_name удалена\"\n    \n    # Удаляем зависимости на этот модуль из других модулей\n    for pom_file in \"$PROJECT_ROOT\"/*/pom.xml; do\n        if [ -f \"$pom_file\" ]; then\n            sed -i.bak \"/<artifactId>$module_name<\\/artifactId>/,/<\\/dependency>/d\" \"$pom_file\"\n            rm -f \"$pom_file.bak\" 2>/dev/null || true\n        fi\n    done\n    \n    print_success \"Модуль $module_name полностью удален\"\n}\n\n# Функция для показа списка модулей\nlist_modules() {\n    print_header \"Модули проекта\"\n    \n    local modules=$(get_modules_from_pom \"$PARENT_POM\")\n    \n    if [ -z \"$modules\" ]; then\n        echo \"Модули не найдены\"\n        return\n    fi\n    \n    echo \"Найденные модули:\"\n    for module in $modules; do\n        local module_path=\"$PROJECT_ROOT/$module\"\n        if [ -d \"$module_path\" ]; then\n            echo \"  ✓ $module\"\n        else\n            echo \"  ✗ $module (директория отсутствует)\"\n        fi\n    done\n}\n\n# Функция для показа зависимостей модуля\nshow_module_dependencies() {\n    local module_name=\"$1\"\n    local module_pom=\"$PROJECT_ROOT/$module_name/pom.xml\"\n    \n    if [ ! -f \"$module_pom\" ]; then\n        print_error \"Модуль $module_name не найден!\"\n        return 1\n    fi\n    \n    print_header \"Зависимости модуля $module_name\"\n    \n    local dependencies=$(grep -A 3 \"<artifactId>\" \"$module_pom\" | grep -B 1 -A 1 \"com.viancis\" | grep \"<artifactId>\" | sed 's/.*<artifactId>\\(.*\\)<\\/artifactId>.*/\\1/')\n    \n    if [ -z \"$dependencies\" ]; then\n        echo \"Зависимости не найдены\"\n    else\n        echo \"Зависимости:\"\n        for dep in $dependencies; do\n            echo \"  - $dep\"\n        done\n    fi\n}\n\n# Функция для обновления зависимостей модуля\nupdate_module_dependencies() {\n    local module_name=\"$1\"\n    local module_path=\"$PROJECT_ROOT/$module_name\"\n    \n    if [ ! -d \"$module_path\" ]; then\n        print_error \"Модуль $module_name не найден!\"\n        return 1\n    fi\n    \n    print_info \"Обновление зависимостей модуля $module_name...\"\n    \n    # Переходим в директорию проекта\n    cd \"$PROJECT_ROOT\"\n    \n    # Обновляем зависимости Maven\n    ./mvnw dependency:resolve -pl \"$module_name\" -am\n    \n    print_success \"Зависимости модуля $module_name обновлены\"\n}\n\n# Функция для пересборки модуля\nbuild_module() {\n    local module_name=\"$1\"\n    local module_path=\"$PROJECT_ROOT/$module_name\"\n    \n    if [ ! -d \"$module_path\" ]; then\n        print_error \"Модуль $module_name не найден!\"\n        return 1\n    fi\n    \n    print_info \"Пересборка модуля $module_name...\"\n    \n    # Переходим в директорию проекта\n    cd \"$PROJECT_ROOT\"\n    \n    # Очищаем и пересобираем модуль\n    ./mvnw clean compile -pl \"$module_name\" -am -DskipTests\n    \n    print_success \"Модуль $module_name пересобран\"\n}\n\n# Функция для создания Dockerfile для модуля\ncreate_module_dockerfile() {\n    local module_name=\"$1\"\n    local module_path=\"$PROJECT_ROOT/$module_name\"\n    local docker_path=\"$module_path/docker\"\n    \n    mkdir -p \"$docker_path\"\n    \n    # Создаем Dockerfile.dev\n    cat > \"$docker_path/Dockerfile.dev\" << EOF\nFROM openjdk:21-jdk-slim\n\nWORKDIR /app\n\n# Копируем Maven wrapper и основные файлы\nCOPY ../../mvnw .\nCOPY ../../mvnw.cmd .\nCOPY ../../pom.xml .\nCOPY ../../.mvn .mvn\n\n# Копируем pom.xml файлы модулей\nCOPY ../../$module_name/pom.xml ./$module_name/pom.xml\n\n# Копируем исходный код\nCOPY ../../$module_name/src ./$module_name/src\n\n# Загружаем зависимости\nRUN ./mvnw dependency:go-offline -pl $module_name -am\n\n# Компилируем\nRUN ./mvnw compile -pl $module_name -am -DskipTests\n\n# Собираем JAR\nRUN ./mvnw package -pl $module_name -am -DskipTests\n\n# Создаем директорию для JAR\nRUN mkdir -p /app/target\n\n# Копируем JAR файл\nRUN cp $module_name/target/*.jar /app/target/app.jar\n\n# Открываем порты\nEXPOSE 8080\n\n# Запускаем приложение\nCMD [\"java\", \"-jar\", \"/app/target/app.jar\"]\nEOF\n    \n    # Создаем Dockerfile\n    cat > \"$docker_path/Dockerfile\" << EOF\nFROM openjdk:21-jdk-slim\n\nWORKDIR /app\n\n# Копируем Maven wrapper и основные файлы\nCOPY ../../mvnw .\nCOPY ../../mvnw.cmd .\nCOPY ../../pom.xml .\nCOPY ../../.mvn .mvn\n\n# Копируем pom.xml файлы модулей\nCOPY ../../$module_name/pom.xml ./$module_name/pom.xml\n\n# Копируем исходный код\nCOPY ../../$module_name/src ./$module_name/src\n\n# Собираем JAR\nRUN ./mvnw clean package -pl $module_name -am -DskipTests\n\n# Создаем директорию для JAR\nRUN mkdir -p /app/target\n\n# Копируем JAR файл\nRUN cp $module_name/target/*.jar /app/target/app.jar\n\n# Открываем порты\nEXPOSE 8080\n\n# Запускаем приложение\nCMD [\"java\", \"-jar\", \"/app/target/app.jar\"]\nEOF\n    \n    print_success \"Dockerfile'ы созданы для модуля $module_name\"\n}\n\n# Основная функция\nmain() {\n    print_header \"Менеджер мультимодульных зависимостей\"\n    \n    # Проверка Maven\n    if [ ! -f \"$PROJECT_ROOT/mvnw\" ]; then\n        print_error \"Maven wrapper не найден!\"\n        exit 1\n    fi\n    \n    # Показать список модулей\n    if [ \"$LIST_MODULES\" = true ]; then\n        list_modules\n        exit 0\n    fi\n    \n    # Показать зависимости модуля\n    if [ -n \"$SHOW_MODULE\" ]; then\n        show_module_dependencies \"$SHOW_MODULE\"\n        exit 0\n    fi\n    \n    # Добавление модуля\n    if [ -n \"$ADD_MODULE\" ]; then\n        create_module \"$ADD_MODULE\"\n        create_module_dockerfile \"$ADD_MODULE\"\n        exit 0\n    fi\n    \n    # Добавление зависимостей\n    if [ -n \"$DEPENDENCIES\" ]; then\n        # Извлекаем целевой модуль из строки зависимостей\n        local target_module=$(echo \"$DEPENDENCIES\" | cut -d',' -f1)\n        local deps=$(echo \"$DEPENDENCIES\" | cut -d',' -f2-)\n        \n        add_dependencies_to_module \"$target_module\" \"$deps\"\n        exit 0\n    fi\n    \n    # Удаление модуля\n    if [ -n \"$REMOVE_MODULE\" ]; then\n        remove_module \"$REMOVE_MODULE\"\n        exit 0\n    fi\n    \n    # Обновление зависимостей модуля\n    if [ -n \"$UPDATE_MODULE\" ]; then\n        update_module_dependencies \"$UPDATE_MODULE\"\n        exit 0\n    fi\n    \n    # Пересборка модуля\n    if [ -n \"$BUILD_MODULE\" ]; then\n        build_module \"$BUILD_MODULE\"\n        exit 0\n    fi\n    \n    # Если не переданы аргументы, показываем справку\n    show_help\n}\n\nmain \"$@\" "
        }
    ]
}