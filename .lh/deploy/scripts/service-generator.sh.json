{
    "sourceFile": "deploy/scripts/service-generator.sh",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1754241373474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1754241373474,
            "name": "Commit-0",
            "content": "#!/bin/bash\n\n# Скрипт для автоматического добавления новых сервисов в docker-compose\n# Автор: viancis\n# Версия: 1.0\n\nset -e\n\n# Цвета для вывода\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nPURPLE='\\033[0;35m'\nCYAN='\\033[0;36m'\nNC='\\033[0m'\n\nprint_info() {\n    echo -e \"${BLUE}[INFO]${NC} $1\"\n}\n\nprint_success() {\n    echo -e \"${GREEN}[SUCCESS]${NC} $1\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n}\n\nprint_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\nprint_header() {\n    echo -e \"${PURPLE}=== $1 ===${NC}\"\n}\n\nshow_help() {\n    echo \"Использование: $0 [ОПЦИИ]\"\n    echo \"\"\n    echo \"ОПЦИИ:\"\n    echo \"  -n, --name NAME           Имя нового сервиса (обязательно)\"\n    echo \"  -p, --port PORT           Порт для сервиса (обязательно)\"\n    echo \"  -m, --module MODULE       Основной модуль (по умолчанию: имя сервиса)\"\n    echo \"  -d, --deps DEPENDENCIES   Зависимые модули через запятую\"\n    echo \"  -e, --env ENV             Окружение (dev/prod) [по умолчанию: dev]\"\n    echo \"  -f, --force               Принудительная перезапись файлов\"\n    echo \"  -l, --list                Показать список существующих сервисов\"\n    echo \"  -r, --remove NAME         Удалить сервис\"\n    echo \"  -h, --help                Показать эту справку\"\n    echo \"\"\n    echo \"ПРИМЕРЫ:\"\n    echo \"  $0 -n auth-service -p 8092 -m auth -d common\"\n    echo \"  $0 -n payment-service -p 8093 -m payment -d common,user\"\n    echo \"  $0 -l\"\n    echo \"  $0 -r auth-service\"\n    echo \"\"\n}\n\n# Переменные\nSERVICE_NAME=\"\"\nSERVICE_PORT=\"\"\nMAIN_MODULE=\"\"\nDEPENDENCIES=\"\"\nENVIRONMENT=\"dev\"\nFORCE_OVERWRITE=false\nLIST_SERVICES=false\nREMOVE_SERVICE=\"\"\n\n# Парсинг аргументов\nwhile [[ $# -gt 0 ]]; do\n    case $1 in\n        -h|--help)\n            show_help\n            exit 0\n            ;;\n        -n|--name)\n            SERVICE_NAME=\"$2\"\n            shift 2\n            ;;\n        -p|--port)\n            SERVICE_PORT=\"$2\"\n            shift 2\n            ;;\n        -m|--module)\n            MAIN_MODULE=\"$2\"\n            shift 2\n            ;;\n        -d|--deps)\n            DEPENDENCIES=\"$2\"\n            shift 2\n            ;;\n        -e|--env)\n            ENVIRONMENT=\"$2\"\n            shift 2\n            ;;\n        -f|--force)\n            FORCE_OVERWRITE=true\n            shift\n            ;;\n        -l|--list)\n            LIST_SERVICES=true\n            shift\n            ;;\n        -r|--remove)\n            REMOVE_SERVICE=\"$2\"\n            shift 2\n            ;;\n        *)\n            print_error \"Неизвестная опция: $1\"\n            show_help\n            exit 1\n            ;;\n    esac\ndone\n\n# Определение путей\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\nPROJECT_ROOT=\"$(dirname \"$SCRIPT_DIR\")\"\nCOMPOSE_DEV=\"$PROJECT_ROOT/docker-compose.dev.yml\"\nCOMPOSE_PROD=\"$PROJECT_ROOT/docker-compose.yml\"\n\n# Проверка существования файлов docker-compose\nif [ ! -f \"$COMPOSE_DEV\" ]; then\n    print_error \"Файл $COMPOSE_DEV не найден!\"\n    exit 1\nfi\n\nif [ ! -f \"$COMPOSE_PROD\" ]; then\n    print_error \"Файл $COMPOSE_PROD не найден!\"\n    exit 1\nfi\n\n# Функция для извлечения существующих сервисов из docker-compose\nget_existing_services() {\n    local compose_file=\"$1\"\n    grep -E \"^  [a-zA-Z0-9_-]+:\" \"$compose_file\" | sed 's/^  //' | sed 's/:$//' | grep -v \"version\\|services\\|volumes\\|networks\"\n}\n\n# Функция для проверки существования порта\ncheck_port_availability() {\n    local port=\"$1\"\n    local compose_file=\"$2\"\n    \n    if grep -q \"ports:\" -A 10 \"$compose_file\" | grep -q \":$port:\"; then\n        return 1\n    fi\n    return 0\n}\n\n# Функция для генерации Dockerfile\ngenerate_dockerfile() {\n    local service_name=\"$1\"\n    local main_module=\"$2\"\n    local dependencies=\"$3\"\n    local is_dev=\"$4\"\n    \n    local dockerfile_path=\"$PROJECT_ROOT/$service_name/docker\"\n    local dockerfile_name=\"Dockerfile\"\n    \n    if [ \"$is_dev\" = true ]; then\n        dockerfile_name=\"Dockerfile.dev\"\n    fi\n    \n    mkdir -p \"$dockerfile_path\"\n    \n    cat > \"$dockerfile_path/$dockerfile_name\" << EOF\nFROM openjdk:21-jdk-slim\n\nWORKDIR /app\n\n# Копируем Maven wrapper и основные файлы\nCOPY ../../mvnw .\nCOPY ../../mvnw.cmd .\nCOPY ../../pom.xml .\nCOPY ../../.mvn .mvn\n\n# Копируем pom.xml файлы модулей\nCOPY ../../$main_module/pom.xml ./$main_module/pom.xml\nEOF\n\n    # Добавляем зависимости\n    if [ -n \"$dependencies\" ]; then\n        IFS=',' read -ra DEPS <<< \"$dependencies\"\n        for dep in \"${DEPS[@]}\"; do\n            dep=$(echo \"$dep\" | xargs)  # Убираем пробелы\n            if [ -d \"$PROJECT_ROOT/$dep\" ]; then\n                echo \"COPY ../../$dep/pom.xml ./$dep/pom.xml\" >> \"$dockerfile_path/$dockerfile_name\"\n            fi\n        done\n    fi\n\n    # Добавляем common модуль если он существует\n    if [ -d \"$PROJECT_ROOT/common\" ]; then\n        echo \"COPY ../../common/pom.xml ./common/pom.xml\" >> \"$dockerfile_path/$dockerfile_name\"\n    fi\n\n    cat >> \"$dockerfile_path/$dockerfile_name\" << EOF\n\n# Загружаем зависимости (только для dev)\nEOF\n\n    if [ \"$is_dev\" = true ]; then\n        echo \"RUN ./mvnw dependency:go-offline -pl $main_module -am\" >> \"$dockerfile_path/$dockerfile_name\"\n    fi\n\n    cat >> \"$dockerfile_path/$dockerfile_name\" << EOF\n\n# Копируем исходный код\nCOPY ../../$main_module/src ./$main_module/src\nEOF\n\n    # Копируем исходный код зависимостей\n    if [ -n \"$dependencies\" ]; then\n        IFS=',' read -ra DEPS <<< \"$dependencies\"\n        for dep in \"${DEPS[@]}\"; do\n            dep=$(echo \"$dep\" | xargs)\n            if [ -d \"$PROJECT_ROOT/$dep\" ]; then\n                echo \"COPY ../../$dep/src ./$dep/src\" >> \"$dockerfile_path/$dockerfile_name\"\n            fi\n        done\n    fi\n\n    # Добавляем common модуль\n    if [ -d \"$PROJECT_ROOT/common\" ]; then\n        echo \"COPY ../../common/src ./common/src\" >> \"$dockerfile_path/$dockerfile_name\"\n    fi\n\n    cat >> \"$dockerfile_path/$dockerfile_name\" << EOF\n\n# Компилируем (только для dev)\nEOF\n\n    if [ \"$is_dev\" = true ]; then\n        echo \"RUN ./mvnw compile -pl $main_module -am -DskipTests\" >> \"$dockerfile_path/$dockerfile_name\"\n    fi\n\n    cat >> \"$dockerfile_path/$dockerfile_name\" << EOF\n\n# Собираем JAR\nRUN ./mvnw package -pl $main_module -am -DskipTests\n\n# Создаем директорию для JAR\nRUN mkdir -p /app/target\n\n# Копируем JAR файл\nRUN cp $main_module/target/*.jar /app/target/app.jar\n\n# Открываем порты\nEXPOSE $SERVICE_PORT\n\n# Запускаем приложение\nCMD [\"java\", \"-jar\", \"/app/target/app.jar\"]\nEOF\n\n    print_success \"Создан Dockerfile: $dockerfile_path/$dockerfile_name\"\n}\n\n# Функция для генерации docker-compose конфигурации\ngenerate_compose_config() {\n    local service_name=\"$1\"\n    local port=\"$2\"\n    local main_module=\"$3\"\n    local dependencies=\"$4\"\n    local is_dev=\"$5\"\n    \n    local compose_file=\"$COMPOSE_DEV\"\n    if [ \"$is_dev\" = false ]; then\n        compose_file=\"$COMPOSE_PROD\"\n    fi\n    \n    # Создаем временный файл с новой конфигурацией\n    local temp_file=$(mktemp)\n    \n    # Читаем файл и добавляем сервис перед volumes секцией\n    local in_services=false\n    local added_service=false\n    \n    while IFS= read -r line; do\n        echo \"$line\" >> \"$temp_file\"\n        \n        # Находим секцию services\n        if [[ \"$line\" =~ ^services:$ ]]; then\n            in_services=true\n            continue\n        fi\n        \n        # Если мы в секции services и встретили volumes или networks\n        if [ \"$in_services\" = true ] && [[ \"$line\" =~ ^[[:space:]]*(volumes|networks): ]]; then\n            # Добавляем наш сервис перед этой секцией\n            if [ \"$added_service\" = false ]; then\n                echo \"\" >> \"$temp_file\"\n                echo \"  $service_name:\" >> \"$temp_file\"\n                echo \"    build:\" >> \"$temp_file\"\n                echo \"      context: .\" >> \"$temp_file\"\n                echo \"      dockerfile: $service_name/docker/Dockerfile$(if [ \"$is_dev\" = true ]; then echo \".dev\"; fi)\" >> \"$temp_file\"\n                echo \"    container_name: gleb-$service_name-$(if [ \"$is_dev\" = true ]; then echo \"dev\"; else echo \"prod\"; fi)\" >> \"$temp_file\"\n                echo \"    ports:\" >> \"$temp_file\"\n                echo \"      - \\\"$port:$port\\\"\" >> \"$temp_file\"\n                echo \"    environment:\" >> \"$temp_file\"\n                echo \"      SPRING_PROFILES_ACTIVE: docker\" >> \"$temp_file\"\n                \n                if [ \"$is_dev\" = true ]; then\n                    echo \"      SPRING_DEVTOOLS_RESTART_ENABLED: \\\"true\\\"\" >> \"$temp_file\"\n                    echo \"      SPRING_DEVTOOLS_LIVERELOAD_ENABLED: \\\"true\\\"\" >> \"$temp_file\"\n                    echo \"    volumes:\" >> \"$temp_file\"\n                    echo \"      - ./$service_name/src:/app/$service_name/src\" >> \"$temp_file\"\n                    if [ -d \"$PROJECT_ROOT/common\" ]; then\n                        echo \"      - ./common/src:/app/common/src\" >> \"$temp_file\"\n                    fi\n                    echo \"      - maven_cache:/root/.m2\" >> \"$temp_file\"\n                    echo \"      - ./$service_name/target:/app/$service_name/target\" >> \"$temp_file\"\n                fi\n                \n                echo \"    networks:\" >> \"$temp_file\"\n                echo \"      - gleb-network\" >> \"$temp_file\"\n                echo \"    depends_on:\" >> \"$temp_file\"\n                echo \"      postgres:\" >> \"$temp_file\"\n                echo \"        condition: service_healthy\" >> \"$temp_file\"\n                echo \"      rabbitmq:\" >> \"$temp_file\"\n                echo \"        condition: service_healthy\" >> \"$temp_file\"\n                echo \"    restart: unless-stopped\" >> \"$temp_file\"\n                added_service=true\n            fi\n        fi\n    done < \"$compose_file\"\n    \n    # Заменяем оригинальный файл\n    mv \"$temp_file\" \"$compose_file\"\n    \n    print_success \"Добавлен сервис $service_name в $compose_file\"\n}\n\n# Функция для удаления сервиса\nremove_service() {\n    local service_name=\"$1\"\n    \n    print_info \"Удаление сервиса $service_name...\"\n    \n    # Удаляем из docker-compose.dev.yml\n    if [ -f \"$COMPOSE_DEV\" ]; then\n        sed -i.bak \"/^  $service_name:/,/^  [a-zA-Z]/{ /^  [a-zA-Z]/!d; }\" \"$COMPOSE_DEV\"\n        sed -i.bak \"/^  $service_name:/d\" \"$COMPOSE_DEV\"\n        rm -f \"$COMPOSE_DEV.bak\"\n    fi\n    \n    # Удаляем из docker-compose.yml\n    if [ -f \"$COMPOSE_PROD\" ]; then\n        sed -i.bak \"/^  $service_name:/,/^  [a-zA-Z]/{ /^  [a-zA-Z]/!d; }\" \"$COMPOSE_PROD\"\n        sed -i.bak \"/^  $service_name:/d\" \"$COMPOSE_PROD\"\n        rm -f \"$COMPOSE_PROD.bak\"\n    fi\n    \n    # Удаляем директорию сервиса\n    if [ -d \"$PROJECT_ROOT/$service_name\" ]; then\n        rm -rf \"$PROJECT_ROOT/$service_name\"\n        print_success \"Удалена директория $PROJECT_ROOT/$service_name\"\n    fi\n    \n    print_success \"Сервис $service_name удален\"\n}\n\n# Функция для показа списка сервисов\nlist_services() {\n    print_header \"Существующие сервисы в dev окружении\"\n    echo \"Сервисы в $COMPOSE_DEV:\"\n    get_existing_services \"$COMPOSE_DEV\" | while read -r service; do\n        echo \"  - $service\"\n    done\n    \n    echo \"\"\n    print_header \"Существующие сервисы в prod окружении\"\n    echo \"Сервисы в $COMPOSE_PROD:\"\n    get_existing_services \"$COMPOSE_PROD\" | while read -r service; do\n        echo \"  - $service\"\n    done\n}\n\n# Функция для создания структуры модуля\ncreate_module_structure() {\n    local service_name=\"$1\"\n    local main_module=\"$2\"\n    \n    local module_path=\"$PROJECT_ROOT/$main_module\"\n    \n    if [ ! -d \"$module_path\" ]; then\n        mkdir -p \"$module_path/src/main/java/com/viancis/$main_module\"\n        mkdir -p \"$module_path/src/main/resources\"\n        mkdir -p \"$module_path/src/test/kotlin/com/viancis/$main_module\"\n        \n        # Создаем pom.xml для модуля\n        cat > \"$module_path/pom.xml\" << EOF\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    \n    <parent>\n        <groupId>com.viancis</groupId>\n        <artifactId>gleb</artifactId>\n        <version>0.0.1-SNAPSHOT</version>\n        <relativePath>../../pom.xml</relativePath>\n    </parent>\n    \n    <artifactId>$main_module</artifactId>\n    <name>$main_module</name>\n    <description>$main_module module</description>\n    \n    <dependencies>\n        <dependency>\n            <groupId>com.viancis</groupId>\n            <artifactId>common</artifactId>\n            <version>\\${project.version}</version>\n        </dependency>\n    </dependencies>\n</project>\nEOF\n        \n        # Создаем основной класс приложения\n        cat > \"$module_path/src/main/java/com/viancis/$main_module/${main_module^}Application.java\" << EOF\npackage com.viancis.$main_module;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class ${main_module^}Application {\n    public static void main(String[] args) {\n        SpringApplication.run(${main_module^}Application.class, args);\n    }\n}\nEOF\n        \n        # Создаем application.properties\n        cat > \"$module_path/src/main/resources/application.properties\" << EOF\nserver.port=$SERVICE_PORT\nspring.application.name=$main_module\n\n# Database configuration\nspring.datasource.url=jdbc:postgresql://postgres:5432/postgres\nspring.datasource.username=postgres\nspring.datasource.password=password\nspring.datasource.driver-class-name=org.postgresql.Driver\n\n# JPA configuration\nspring.jpa.hibernate.ddl-auto=update\nspring.jpa.show-sql=true\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect\n\n# RabbitMQ configuration\nspring.rabbitmq.host=rabbitmq\nspring.rabbitmq.port=5672\nspring.rabbitmq.username=guest\nspring.rabbitmq.password=guest\nEOF\n        \n        # Создаем docker конфигурацию\n        mkdir -p \"$module_path/docker\"\n        \n        print_success \"Создана структура модуля: $module_path\"\n    fi\n}\n\n# Функция для обновления родительского pom.xml\nupdate_parent_pom() {\n    local main_module=\"$1\"\n    local pom_file=\"$PROJECT_ROOT/pom.xml\"\n    \n    if [ -f \"$pom_file\" ]; then\n        # Проверяем, есть ли уже модуль в списке\n        if ! grep -q \"<module>$main_module</module>\" \"$pom_file\"; then\n            # Находим секцию modules и добавляем новый модуль\n            sed -i.bak \"/<modules>/,/<\\/modules>/ s/<\\/modules>/    <module>$main_module<\\/module>\\n  <\\/modules>/\" \"$pom_file\"\n            rm -f \"$pom_file.bak\"\n            print_success \"Добавлен модуль $main_module в родительский pom.xml\"\n        fi\n    fi\n}\n\n# Основная функция\nmain() {\n    print_header \"Генератор сервисов для docker-compose\"\n    \n    # Проверка Docker\n    if ! command -v docker &> /dev/null; then\n        print_error \"Docker не установлен!\"\n        exit 1\n    fi\n    \n    # Показать список сервисов\n    if [ \"$LIST_SERVICES\" = true ]; then\n        list_services\n        exit 0\n    fi\n    \n    # Удаление сервиса\n    if [ -n \"$REMOVE_SERVICE\" ]; then\n        remove_service \"$REMOVE_SERVICE\"\n        exit 0\n    fi\n    \n    # Проверка обязательных параметров\n    if [ -z \"$SERVICE_NAME\" ]; then\n        print_error \"Имя сервиса обязательно! Используйте -n или --name\"\n        show_help\n        exit 1\n    fi\n    \n    if [ -z \"$SERVICE_PORT\" ]; then\n        print_error \"Порт сервиса обязателен! Используйте -p или --port\"\n        show_help\n        exit 1\n    fi\n    \n    # Устанавливаем основной модуль по умолчанию\n    if [ -z \"$MAIN_MODULE\" ]; then\n        MAIN_MODULE=\"$SERVICE_NAME\"\n    fi\n    \n    # Проверка доступности порта\n    if ! check_port_availability \"$SERVICE_PORT\" \"$COMPOSE_DEV\"; then\n        print_error \"Порт $SERVICE_PORT уже используется!\"\n        exit 1\n    fi\n    \n    if ! check_port_availability \"$SERVICE_PORT\" \"$COMPOSE_PROD\"; then\n        print_error \"Порт $SERVICE_PORT уже используется!\"\n        exit 1\n    fi\n    \n    print_info \"Создание сервиса: $SERVICE_NAME\"\n    print_info \"Порт: $SERVICE_PORT\"\n    print_info \"Основной модуль: $MAIN_MODULE\"\n    print_info \"Зависимости: ${DEPENDENCIES:-none}\"\n    print_info \"Окружение: $ENVIRONMENT\"\n    \n    # Создаем структуру модуля\n    create_module_structure \"$SERVICE_NAME\" \"$MAIN_MODULE\"\n    \n    # Обновляем родительский pom.xml\n    update_parent_pom \"$MAIN_MODULE\"\n    \n    # Генерируем Dockerfile'ы\n    generate_dockerfile \"$SERVICE_NAME\" \"$MAIN_MODULE\" \"$DEPENDENCIES\" true   # dev\n    generate_dockerfile \"$SERVICE_NAME\" \"$MAIN_MODULE\" \"$DEPENDENCIES\" false  # prod\n    \n    # Генерируем конфигурацию docker-compose\n    generate_compose_config \"$SERVICE_NAME\" \"$SERVICE_PORT\" \"$MAIN_MODULE\" \"$DEPENDENCIES\" true   # dev\n    generate_compose_config \"$SERVICE_NAME\" \"$SERVICE_PORT\" \"$MAIN_MODULE\" \"$DEPENDENCIES\" false  # prod\n    \n    print_success \"Сервис $SERVICE_NAME успешно создан!\"\n    print_info \"Следующие шаги:\"\n    echo \"  1. Добавьте бизнес-логику в $PROJECT_ROOT/$MAIN_MODULE/src\"\n    echo \"  2. Настройте зависимости в $PROJECT_ROOT/$MAIN_MODULE/pom.xml\"\n    echo \"  3. Запустите: cd $PROJECT_ROOT/deploy && ./scripts/deploy.sh\"\n    echo \"  4. Или используйте: make dev\"\n}\n\nmain \"$@\" "
        }
    ]
}