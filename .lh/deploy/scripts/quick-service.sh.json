{
    "sourceFile": "deploy/scripts/quick-service.sh",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1754242376553,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1754242376553,
            "name": "Commit-0",
            "content": "#!/bin/bash\n\n# Упрощенный скрипт для создания сервиса без Maven операций\n# Автор: viancis\n\nset -e\n\n# Цвета для вывода\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m'\n\nprint_info() {\n    echo -e \"${BLUE}[INFO]${NC} $1\"\n}\n\nprint_success() {\n    echo -e \"${GREEN}[SUCCESS]${NC} $1\"\n}\n\nprint_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\nshow_help() {\n    echo \"Использование: $0 SERVICE_NAME PORT [MODULE_NAME]\"\n    echo \"\"\n    echo \"ПРИМЕРЫ:\"\n    echo \"  $0 auth-service 8092 auth\"\n    echo \"  $0 payment-service 8093 payment\"\n    echo \"  $0 notification-service 8094 notification\"\n    echo \"\"\n}\n\n# Проверка аргументов\nif [ $# -lt 2 ]; then\n    print_error \"Необходимо указать имя сервиса и порт!\"\n    show_help\n    exit 1\nfi\n\nSERVICE_NAME=\"$1\"\nPORT=\"$2\"\nMODULE_NAME=\"${3:-$SERVICE_NAME}\"\n\n# Определение путей\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\nPROJECT_ROOT=\"$(dirname \"$SCRIPT_DIR\")\"\nCOMPOSE_DEV=\"$PROJECT_ROOT/docker-compose.dev.yml\"\nCOMPOSE_PROD=\"$PROJECT_ROOT/docker-compose.yml\"\n\nprint_info \"Создание сервиса: $SERVICE_NAME\"\nprint_info \"Порт: $PORT\"\nprint_info \"Модуль: $MODULE_NAME\"\n\n# Проверка существования модуля\nMODULE_PATH=\"$PROJECT_ROOT/$MODULE_NAME\"\nif [ ! -d \"$MODULE_PATH\" ]; then\n    print_error \"Модуль $MODULE_NAME не найден! Сначала создайте модуль:\"\n    echo \"  ./scripts/quick-module.sh $MODULE_NAME $PORT\"\n    exit 1\nfi\n\n# Проверка docker-compose файлов\nif [ ! -f \"$COMPOSE_DEV\" ]; then\n    print_error \"Файл $COMPOSE_DEV не найден!\"\n    exit 1\nfi\n\nif [ ! -f \"$COMPOSE_PROD\" ]; then\n    print_error \"Файл $COMPOSE_PROD не найден!\"\n    exit 1\nfi\n\n# Создание конфигурации docker-compose для dev\nprint_info \"Добавление сервиса в docker-compose.dev.yml...\"\n\n# Создаем временный файл\nTEMP_FILE=$(mktemp)\n\n# Читаем файл и добавляем сервис перед volumes секцией\nin_services=false\nadded_service=false\n\nwhile IFS= read -r line; do\n    echo \"$line\" >> \"$TEMP_FILE\"\n    \n    # Находим секцию services\n    if [[ \"$line\" =~ ^services:$ ]]; then\n        in_services=true\n        continue\n    fi\n    \n    # Если мы в секции services и встретили volumes или networks\n    if [ \"$in_services\" = true ] && [[ \"$line\" =~ ^[[:space:]]*(volumes|networks): ]]; then\n        # Добавляем наш сервис перед этой секцией\n        if [ \"$added_service\" = false ]; then\n            echo \"\" >> \"$TEMP_FILE\"\n            echo \"  $SERVICE_NAME:\" >> \"$TEMP_FILE\"\n            echo \"    build:\" >> \"$TEMP_FILE\"\n            echo \"      context: .\" >> \"$TEMP_FILE\"\n            echo \"      dockerfile: $MODULE_NAME/docker/Dockerfile.dev\" >> \"$TEMP_FILE\"\n            echo \"    container_name: gleb-$SERVICE_NAME-dev\" >> \"$TEMP_FILE\"\n            echo \"    ports:\" >> \"$TEMP_FILE\"\n            echo \"      - \\\"$PORT:$PORT\\\"\" >> \"$TEMP_FILE\"\n            echo \"    environment:\" >> \"$TEMP_FILE\"\n            echo \"      SPRING_PROFILES_ACTIVE: docker\" >> \"$TEMP_FILE\"\n            echo \"      SPRING_DEVTOOLS_RESTART_ENABLED: \\\"true\\\"\" >> \"$TEMP_FILE\"\n            echo \"      SPRING_DEVTOOLS_LIVERELOAD_ENABLED: \\\"true\\\"\" >> \"$TEMP_FILE\"\n            echo \"    volumes:\" >> \"$TEMP_FILE\"\n            echo \"      - ./$MODULE_NAME/src:/app/$MODULE_NAME/src\" >> \"$TEMP_FILE\"\n            echo \"      - ./common/src:/app/common/src\" >> \"$TEMP_FILE\"\n            echo \"      - maven_cache:/root/.m2\" >> \"$TEMP_FILE\"\n            echo \"      - ./$MODULE_NAME/target:/app/$MODULE_NAME/target\" >> \"$TEMP_FILE\"\n            echo \"    networks:\" >> \"$TEMP_FILE\"\n            echo \"      - gleb-network\" >> \"$TEMP_FILE\"\n            echo \"    depends_on:\" >> \"$TEMP_FILE\"\n            echo \"      postgres:\" >> \"$TEMP_FILE\"\n            echo \"        condition: service_healthy\" >> \"$TEMP_FILE\"\n            echo \"      rabbitmq:\" >> \"$TEMP_FILE\"\n            echo \"        condition: service_healthy\" >> \"$TEMP_FILE\"\n            echo \"    restart: unless-stopped\" >> \"$TEMP_FILE\"\n            added_service=true\n        fi\n    fi\ndone < \"$COMPOSE_DEV\"\n\n# Заменяем оригинальный файл\nmv \"$TEMP_FILE\" \"$COMPOSE_DEV\"\n\nprint_success \"Сервис $SERVICE_NAME добавлен в docker-compose.dev.yml\"\n\n# Создание конфигурации docker-compose для prod\nprint_info \"Добавление сервиса в docker-compose.yml...\"\n\n# Создаем временный файл\nTEMP_FILE=$(mktemp)\n\n# Читаем файл и добавляем сервис перед volumes секцией\nin_services=false\nadded_service=false\n\nwhile IFS= read -r line; do\n    echo \"$line\" >> \"$TEMP_FILE\"\n    \n    # Находим секцию services\n    if [[ \"$line\" =~ ^services:$ ]]; then\n        in_services=true\n        continue\n    fi\n    \n    # Если мы в секции services и встретили volumes или networks\n    if [ \"$in_services\" = true ] && [[ \"$line\" =~ ^[[:space:]]*(volumes|networks): ]]; then\n        # Добавляем наш сервис перед этой секцией\n        if [ \"$added_service\" = false ]; then\n            echo \"\" >> \"$TEMP_FILE\"\n            echo \"  $SERVICE_NAME:\" >> \"$TEMP_FILE\"\n            echo \"    build:\" >> \"$TEMP_FILE\"\n            echo \"      context: .\" >> \"$TEMP_FILE\"\n            echo \"      dockerfile: $MODULE_NAME/docker/Dockerfile\" >> \"$TEMP_FILE\"\n            echo \"    container_name: gleb-$SERVICE_NAME-prod\" >> \"$TEMP_FILE\"\n            echo \"    ports:\" >> \"$TEMP_FILE\"\n            echo \"      - \\\"$PORT:$PORT\\\"\" >> \"$TEMP_FILE\"\n            echo \"    environment:\" >> \"$TEMP_FILE\"\n            echo \"      SPRING_PROFILES_ACTIVE: docker\" >> \"$TEMP_FILE\"\n            echo \"    networks:\" >> \"$TEMP_FILE\"\n            echo \"      - gleb-network\" >> \"$TEMP_FILE\"\n            echo \"    depends_on:\" >> \"$TEMP_FILE\"\n            echo \"      postgres:\" >> \"$TEMP_FILE\"\n            echo \"        condition: service_healthy\" >> \"$TEMP_FILE\"\n            echo \"      rabbitmq:\" >> \"$TEMP_FILE\"\n            echo \"        condition: service_healthy\" >> \"$TEMP_FILE\"\n            echo \"    restart: unless-stopped\" >> \"$TEMP_FILE\"\n            added_service=true\n        fi\n    fi\ndone < \"$COMPOSE_PROD\"\n\n# Заменяем оригинальный файл\nmv \"$TEMP_FILE\" \"$COMPOSE_PROD\"\n\nprint_success \"Сервис $SERVICE_NAME добавлен в docker-compose.yml\"\n\nprint_success \"Сервис $SERVICE_NAME успешно создан!\"\nprint_info \"Следующие шаги:\"\necho \"  1. Добавьте бизнес-логику в $MODULE_PATH/src/main/java/com/viancis/$MODULE_NAME/\"\necho \"  2. Запустите: make dev\"\necho \"  3. Или: ./scripts/deploy.sh\"\necho \"\"\nprint_info \"Доступные сервисы:\"\necho \"  - $SERVICE_NAME: http://localhost:$PORT\" "
        }
    ]
}