{
    "sourceFile": "deploy/docs/EXAMPLES.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1754241665622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1754241665622,
            "name": "Commit-0",
            "content": "# Примеры использования генераторов сервисов\n\nЭтот документ содержит практические примеры использования скриптов для создания новых сервисов и модулей.\n\n## Пример 1: Создание сервиса аутентификации\n\n### Шаг 1: Создание модуля аутентификации\n\n```bash\n# Переходим в директорию deploy\ncd deploy\n\n# Создаем модуль аутентификации\n./scripts/module-manager.sh -a auth\n\n# Добавляем зависимости к модулю\n./scripts/module-manager.sh -d auth,common\n```\n\n### Шаг 2: Создание сервиса аутентификации\n\n```bash\n# Создаем сервис, использующий модуль auth\n./scripts/service-generator.sh -n auth-service -p 8092 -m auth -d common\n```\n\n### Шаг 3: Проверка созданной структуры\n\n```bash\n# Показать список модулей\n./scripts/module-manager.sh -l\n\n# Показать зависимости модуля auth\n./scripts/module-manager.sh -s auth\n\n# Показать список сервисов\n./scripts/service-generator.sh -l\n```\n\n### Шаг 4: Запуск сервиса\n\n```bash\n# Запустить все сервисы\n./scripts/deploy.sh\n\n# Или через make\nmake dev\n```\n\n## Пример 2: Создание платежного сервиса с множественными зависимостями\n\n### Шаг 1: Создание модуля платежей\n\n```bash\n# Создаем модуль платежей\n./scripts/module-manager.sh -a payment\n\n# Добавляем множественные зависимости\n./scripts/module-manager.sh -d payment,common,user\n```\n\n### Шаг 2: Создание платежного сервиса\n\n```bash\n# Создаем сервис с множественными зависимостями\n./scripts/service-generator.sh -n payment-service -p 8093 -m payment -d common,user\n```\n\n### Шаг 3: Пересборка модулей\n\n```bash\n# Пересобираем модуль payment\n./scripts/module-manager.sh -b payment\n\n# Обновляем зависимости\n./scripts/module-manager.sh -u payment\n```\n\n## Пример 3: Создание уведомлений с интеграцией\n\n### Шаг 1: Создание модуля уведомлений\n\n```bash\n# Создаем модуль уведомлений\n./scripts/module-manager.sh -a notification\n\n# Добавляем зависимости\n./scripts/module-manager.sh -d notification,common,user\n```\n\n### Шаг 2: Создание сервиса уведомлений\n\n```bash\n# Создаем сервис уведомлений\n./scripts/service-generator.sh -n notification-service -p 8094 -m notification -d common,user\n```\n\n### Шаг 3: Интеграция с существующими сервисами\n\n```bash\n# Добавляем зависимость от notification к user\n./scripts/module-manager.sh -d user,notification\n\n# Пересобираем user модуль\n./scripts/module-manager.sh -b user\n```\n\n## Пример 4: Создание API Gateway\n\n### Шаг 1: Создание модуля gateway\n\n```bash\n# Создаем модуль gateway\n./scripts/module-manager.sh -a gateway\n\n# Добавляем зависимости от всех основных модулей\n./scripts/module-manager.sh -d gateway,common,user,point,statistic\n```\n\n### Шаг 2: Создание сервиса gateway\n\n```bash\n# Создаем API Gateway сервис\n./scripts/service-generator.sh -n gateway-service -p 8080 -m gateway -d common,user,point,statistic\n```\n\n## Пример 5: Управление зависимостями\n\n### Просмотр зависимостей\n\n```bash\n# Показать зависимости user модуля\n./scripts/module-manager.sh -s user\n\n# Показать зависимости point модуля\n./scripts/module-manager.sh -s point\n```\n\n### Добавление новых зависимостей\n\n```bash\n# Добавить зависимость от auth к user\n./scripts/module-manager.sh -d user,auth\n\n# Добавить зависимость от payment к point\n./scripts/module-manager.sh -d point,payment\n```\n\n### Обновление зависимостей\n\n```bash\n# Обновить зависимости user модуля\n./scripts/module-manager.sh -u user\n\n# Обновить зависимости point модуля\n./scripts/module-manager.sh -u point\n```\n\n## Пример 6: Удаление сервисов и модулей\n\n### Удаление сервиса\n\n```bash\n# Удалить сервис auth-service\n./scripts/service-generator.sh -r auth-service\n```\n\n### Удаление модуля\n\n```bash\n# Удалить модуль auth\n./scripts/module-manager.sh -r auth\n```\n\n## Пример 7: Полный workflow разработки\n\n### Создание нового функционала\n\n```bash\n# 1. Создаем модуль для новой функциональности\n./scripts/module-manager.sh -a analytics\n\n# 2. Добавляем зависимости\n./scripts/module-manager.sh -d analytics,common,user,point\n\n# 3. Создаем сервис\n./scripts/service-generator.sh -n analytics-service -p 8095 -m analytics -d common,user,point\n\n# 4. Пересобираем модули\n./scripts/module-manager.sh -b analytics\n./scripts/module-manager.sh -b user\n./scripts/module-manager.sh -b point\n\n# 5. Запускаем сервисы\n./scripts/deploy.sh\n```\n\n## Пример 8: Работа с production окружением\n\n### Создание сервиса для production\n\n```bash\n# Создаем сервис с указанием production окружения\n./scripts/service-generator.sh -n production-service -p 8096 -m production -d common -e prod\n```\n\n### Проверка конфигурации\n\n```bash\n# Показать сервисы в dev окружении\n./scripts/service-generator.sh -l\n\n# Показать сервисы в prod окружении\n# (скрипт автоматически проверяет оба файла docker-compose)\n```\n\n## Пример 9: Интеграция с существующими сервисами\n\n### Добавление нового модуля к существующему сервису\n\n```bash\n# 1. Создаем новый модуль\n./scripts/module-manager.sh -a security\n\n# 2. Добавляем security к user сервису\n./scripts/module-manager.sh -d user,security\n\n# 3. Пересобираем user сервис\n./scripts/module-manager.sh -b user\n\n# 4. Перезапускаем user-service\nmake rebuild-user\n```\n\n## Пример 10: Мониторинг и отладка\n\n### Просмотр состояния\n\n```bash\n# Показать все модули\n./scripts/module-manager.sh -l\n\n# Показать все сервисы\n./scripts/service-generator.sh -l\n\n# Показать зависимости конкретного модуля\n./scripts/module-manager.sh -s user\n```\n\n### Пересборка и обновление\n\n```bash\n# Пересобрать конкретный модуль\n./scripts/module-manager.sh -b point\n\n# Обновить зависимости модуля\n./scripts/module-manager.sh -u point\n\n# Перезапустить конкретный сервис\nmake rebuild-point\n```\n\n## Структура созданных файлов\n\nПосле выполнения примеров у вас будет следующая структура:\n\n```\nproject/\n├── auth/                          # Модуль аутентификации\n│   ├── src/main/java/com/viancis/auth/\n│   ├── docker/\n│   │   ├── Dockerfile\n│   │   └── Dockerfile.dev\n│   └── pom.xml\n├── payment/                       # Модуль платежей\n│   ├── src/main/java/com/viancis/payment/\n│   ├── docker/\n│   └── pom.xml\n├── auth-service/                  # Сервис аутентификации\n│   └── docker/\n├── payment-service/               # Сервис платежей\n│   └── docker/\n├── docker-compose.dev.yml         # Обновленный с новыми сервисами\n├── docker-compose.yml             # Обновленный с новыми сервисами\n└── pom.xml                       # Обновленный с новыми модулями\n```\n\n## Полезные команды\n\n### Быстрые команды через make\n\n```bash\n# Показать справку по генератору сервисов\nmake service-generator\n\n# Показать справку по менеджеру модулей\nmake module-manager\n\n# Запустить все сервисы\nmake dev\n\n# Очистить и пересобрать\nmake clean && make dev\n```\n\n### Отладка\n\n```bash\n# Показать логи всех сервисов\nmake logs\n\n# Показать статус сервисов\nmake status\n\n# Перезапустить все сервисы\nmake restart\n```\n\n## Заключение\n\nЭти примеры демонстрируют полный workflow создания новых сервисов и модулей в вашем проекте. Скрипты автоматизируют большую часть рутинной работы и обеспечивают консистентность архитектуры. "
        }
    ]
}