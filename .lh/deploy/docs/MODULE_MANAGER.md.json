{
    "sourceFile": "deploy/docs/MODULE_MANAGER.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1754241665621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1754241665621,
            "name": "Commit-0",
            "content": "# Менеджер мультимодульных зависимостей\n\nЭтот скрипт управляет мультимодульной архитектурой Maven, позволяя создавать новые модули, управлять зависимостями между ними и интегрировать их в существующие сервисы.\n\n## Возможности\n\n- ✅ Создание новых Maven модулей\n- ✅ Управление зависимостями между модулями\n- ✅ Автоматическое обновление родительского pom.xml\n- ✅ Генерация Dockerfile'ов для модулей\n- ✅ Просмотр списка модулей и их зависимостей\n- ✅ Пересборка отдельных модулей\n- ✅ Удаление модулей с очисткой зависимостей\n\n## Использование\n\n### Создание модулей\n\n```bash\n# Создать простой модуль\n./scripts/module-manager.sh -a auth\n\n# Создать модуль с зависимостями\n./scripts/module-manager.sh -a payment\n./scripts/module-manager.sh -d payment,common,user\n```\n\n### Управление зависимостями\n\n```bash\n# Добавить зависимости к модулю\n./scripts/module-manager.sh -d user,common\n\n# Показать зависимости модуля\n./scripts/module-manager.sh -s user\n\n# Обновить зависимости модуля\n./scripts/module-manager.sh -u point\n```\n\n### Просмотр и управление\n\n```bash\n# Показать список всех модулей\n./scripts/module-manager.sh -l\n\n# Пересобрать модуль\n./scripts/module-manager.sh -b point\n\n# Удалить модуль\n./scripts/module-manager.sh -r auth\n\n# Показать справку\n./scripts/module-manager.sh -h\n```\n\n### Через Makefile\n\n```bash\n# Показать справку по менеджеру модулей\nmake module-manager\n```\n\n## Параметры\n\n| Параметр | Описание | Обязательный |\n|----------|----------|--------------|\n| `-a, --add` | Добавить модуль в проект | Нет |\n| `-d, --deps` | Добавить зависимости к модулю (формат: TARGET,DEPS) | Нет |\n| `-r, --remove` | Удалить модуль из проекта | Нет |\n| `-l, --list` | Показать список модулей | Нет |\n| `-s, --show` | Показать зависимости модуля | Нет |\n| `-u, --update` | Обновить зависимости модуля | Нет |\n| `-b, --build` | Пересобрать модуль | Нет |\n| `-h, --help` | Показать справку | Нет |\n\n## Что создается\n\n### 1. Структура модуля\n\n```\nmodule-name/\n├── src/\n│   ├── main/\n│   │   ├── java/com/viancis/module-name/\n│   │   │   └── ModuleNameModule.java\n│   │   └── resources/\n│   └── test/\n│       └── kotlin/com/viancis/module-name/\n├── docker/\n│   ├── Dockerfile\n│   └── Dockerfile.dev\n├── pom.xml\n└── README.md\n```\n\n### 2. Maven конфигурация\n\nСоздается `pom.xml` с:\n- Родительским проектом\n- Базовыми зависимостями\n- Автоматическим добавлением в родительский `pom.xml`\n\n### 3. Dockerfile'ы\n\nГенерируются Dockerfile'ы для контейнеризации модуля:\n- `Dockerfile` - для production\n- `Dockerfile.dev` - для development\n\n## Примеры\n\n### Создание модуля аутентификации\n\n```bash\n# Создать модуль\n./scripts/module-manager.sh -a auth\n\n# Добавить зависимости\n./scripts/module-manager.sh -d auth,common\n```\n\nРезультат:\n- Модуль `auth` в `auth/`\n- Зависимость от `common` модуля\n- Dockerfile'ы в `auth/docker/`\n- Обновленный родительский `pom.xml`\n\n### Создание платежного модуля\n\n```bash\n# Создать модуль\n./scripts/module-manager.sh -a payment\n\n# Добавить множественные зависимости\n./scripts/module-manager.sh -d payment,common,user\n```\n\nРезультат:\n- Модуль `payment` с зависимостями от `common` и `user`\n- Полная Maven структура\n- Готовые Dockerfile'ы\n\n### Интеграция с сервисами\n\nПосле создания модуля его можно использовать в сервисах:\n\n```bash\n# Создать сервис, использующий модуль\n./scripts/service-generator.sh -n payment-service -p 8093 -m payment -d common,user\n```\n\n## Управление зависимостями\n\n### Добавление зависимостей\n\n```bash\n# Добавить одну зависимость\n./scripts/module-manager.sh -d user,common\n\n# Добавить несколько зависимостей\n./scripts/module-manager.sh -d payment,common,user,auth\n```\n\n### Просмотр зависимостей\n\n```bash\n# Показать зависимости модуля\n./scripts/module-manager.sh -s user\n```\n\nВывод:\n```\n=== Зависимости модуля user ===\nЗависимости:\n  - common\n  - auth\n```\n\n### Обновление зависимостей\n\n```bash\n# Обновить зависимости модуля\n./scripts/module-manager.sh -u point\n```\n\n## Пересборка модулей\n\n```bash\n# Пересобрать конкретный модуль\n./scripts/module-manager.sh -b point\n\n# Пересобрать с зависимостями\n./scripts/module-manager.sh -b user\n```\n\n## Удаление модулей\n\n```bash\n# Удалить модуль\n./scripts/module-manager.sh -r auth\n```\n\nПри удалении модуля:\n- Удаляется директория модуля\n- Удаляется из родительского `pom.xml`\n- Удаляются зависимости на этот модуль из других модулей\n\n## Интеграция с docker-compose\n\nМодули автоматически интегрируются в docker-compose через:\n\n1. **Dockerfile'ы** - генерируются для каждого модуля\n2. **Maven зависимости** - автоматически подключаются\n3. **Volume mounts** - для development hot reload\n4. **Сетевые настройки** - использование общей сети\n\n## Пример полного workflow\n\n```bash\n# 1. Создать модуль аутентификации\n./scripts/module-manager.sh -a auth\n\n# 2. Добавить зависимости к модулю\n./scripts/module-manager.sh -d auth,common\n\n# 3. Создать сервис, использующий модуль\n./scripts/service-generator.sh -n auth-service -p 8092 -m auth -d common\n\n# 4. Пересобрать модуль\n./scripts/module-manager.sh -b auth\n\n# 5. Запустить сервисы\ncd deploy && ./scripts/deploy.sh\n```\n\n## Структура pom.xml\n\n### Родительский pom.xml\n\n```xml\n<modules>\n    <module>common</module>\n    <module>user</module>\n    <module>point</module>\n    <module>statistic</module>\n    <module>auth</module>  <!-- Новый модуль -->\n</modules>\n```\n\n### Модульный pom.xml\n\n```xml\n<dependencies>\n    <dependency>\n        <groupId>com.viancis</groupId>\n        <artifactId>common</artifactId>\n        <version>${project.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>com.viancis</groupId>\n        <artifactId>user</artifactId>\n        <version>${project.version}</version>\n    </dependency>\n</dependencies>\n```\n\n## Устранение неполадок\n\n### Модуль уже существует\n```\n[WARNING] Модуль auth уже существует\n```\nРешение: Используйте другое имя или удалите существующий модуль.\n\n### Зависимость не найдена\n```\n[WARNING] Модуль unknown не существует, пропускаем\n```\nРешение: Проверьте правильность имени модуля.\n\n### Maven wrapper не найден\n```\n[ERROR] Maven wrapper не найден!\n```\nРешение: Убедитесь, что находитесь в корневой директории проекта.\n\n### Ошибка сборки\n```\n[ERROR] Ошибка компиляции модуля\n```\nРешение: Проверьте зависимости и синтаксис кода.\n\n## Автор\n\nСкрипт создан viancis для автоматизации управления мультимодульной архитектурой. "
        }
    ]
}