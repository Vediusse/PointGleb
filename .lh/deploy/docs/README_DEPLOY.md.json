{
    "sourceFile": "deploy/docs/README_DEPLOY.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1754180867955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1754180867955,
            "name": "Commit-0",
            "content": "# Система быстрого деплоя проекта\n\nЭтот набор скриптов позволяет быстро деплоить ваш микросервисный проект с кэшированием зависимостей Maven и автоматическим мониторингом изменений.\n\n## Содержание\n\n- [Быстрый старт](#быстрый-старт)\n- [Основные команды](#основные-команды)\n- [Скрипты](#скрипты)\n- [Makefile](#makefile)\n- [Мониторинг изменений](#мониторинг-изменений)\n- [Устранение неполадок](#устранение-неполадок)\n\n## Быстрый старт\n\n### 1. Установка зависимостей\n\n```bash\n# Установка fswatch для мониторинга изменений (macOS)\nbrew install fswatch\n\n# Установка fswatch (Ubuntu/Debian)\nsudo apt-get install fswatch\n\n# Установка fswatch (CentOS/RHEL)\nsudo yum install fswatch\n```\n\n### 2. Настройка прав доступа\n\n```bash\n# Установка прав на выполнение скриптов\ncd deploy\nmake setup\n```\n\n### 3. Первый запуск\n\n```bash\n# Быстрый деплой в dev режиме\ncd deploy\nmake dev\n\n# Или используя скрипт\ncd deploy/scripts\n./deploy.sh\n```\n\n## Основные команды\n\n### Использование Makefile (рекомендуется)\n\n```bash\ncd deploy\n\n# Быстрый деплой\nmake dev\n\n# Принудительная пересборка (при изменении зависимостей)\nmake force\n\n# Очистка всего\nmake clean\n\n# Мониторинг изменений в user-service\nmake watch-user\n\n# Пересборка только одного сервиса\nmake rebuild-user\n```\n\n### Использование скриптов\n\n```bash\ncd deploy/scripts\n\n# Быстрый деплой\n./deploy.sh\n\n# Принудительная пересборка\n./deploy.sh -f\n\n# Деплой в production\n./deploy.sh -e prod\n\n# Пересборка только user-service\n./deploy.sh -s user-service\n\n# Очистка всего\n./deploy.sh -c\n```\n\n## Скрипты\n\n### deploy.sh - Основной скрипт деплоя\n\n**Опции:**\n- `-h, --help` - Показать справку\n- `-e, --env ENV` - Окружение (dev/prod) [по умолчанию: dev]\n- `-f, --force` - Принудительная пересборка (без кэша)\n- `-c, --clean` - Очистить все контейнеры и образы\n- `-s, --service SERVICE` - Пересобрать только конкретный сервис\n- `-d, --down` - Остановить все сервисы\n- `-l, --logs` - Показать логи\n- `-r, --restart` - Перезапустить сервисы\n\n**Примеры:**\n```bash\n./deploy.sh                     # Быстрый деплой в dev режиме\n./deploy.sh -e prod             # Деплой в production режиме\n./deploy.sh -f                  # Принудительная пересборка\n./deploy.sh -s user-service     # Пересобрать только user-service\n./deploy.sh -c                  # Очистить всё\n./deploy.sh -l                  # Показать логи\n```\n\n### watch.sh - Мониторинг изменений\n\n**Опции:**\n- `-h, --help` - Показать справку\n- `-s, --service SERVICE` - Сервис для мониторинга\n\n**Примеры:**\n```bash\n./watch.sh -s user-service     # Мониторинг user-service\n./watch.sh -s point-service    # Мониторинг point-service\n./watch.sh -s statistic-service # Мониторинг statistic-service\n```\n\n### local-start.sh - Локальный запуск\n\n**Команды:**\n- `start` - Запуск всех сервисов\n- `stop` - Остановка всех сервисов\n- `restart` - Перезапуск всех сервисов\n- `status` - Статус всех сервисов\n- `build` - Только сборка проекта\n- `logs` - Показать логи\n- `clean` - Очистка логов и PID файлов\n\n**Примеры:**\n```bash\n./local-start.sh start         # Запуск всех сервисов\n./local-start.sh stop          # Остановка всех сервисов\n./local-start.sh status        # Проверка статуса\n```\n\n## Makefile\n\n### Основные команды\n\n```bash\ncd deploy\n\nmake help              # Показать справку\nmake dev               # Быстрый деплой в dev режиме\nmake prod              # Деплой в production режиме\nmake build             # Сборка образов\nmake up                # Запуск сервисов\nmake down              # Остановка сервисов\nmake restart           # Перезапуск сервисов\nmake logs              # Показать логи\n```\n\n### Управление кэшем\n\n```bash\nmake force             # Принудительная пересборка (без кэша)\nmake clean             # Очистить все контейнеры и образы\n```\n\n### Мониторинг изменений\n\n```bash\nmake watch-user        # Автоматический перезапуск user-service\nmake watch-point       # Автоматический перезапуск point-service\nmake watch-statistic   # Автоматический перезапуск statistic-service\nmake watch-all         # Мониторинг всех сервисов (умный режим)\nmake watch-all-simple  # Мониторинг всех сервисов (упрощенный режим)\nmake watch-all-ultra   # Ультра-простой мониторинг (рекомендуется)\n```\n\n### Отдельные сервисы\n\n```bash\nmake build-user        # Сборка только user-service\nmake build-point       # Сборка только point-service\nmake build-statistic   # Сборка только statistic-service\nmake rebuild-user      # Быстрая пересборка user-service\nmake rebuild-point     # Быстрая пересборка point-service\nmake rebuild-statistic # Быстрая пересборка statistic-service\n```\n\n## Мониторинг изменений\n\nСистема автоматически отслеживает изменения в коде и перезапускает соответствующие сервисы:\n\n### Запуск мониторинга\n\n```bash\ncd deploy\n\n# Мониторинг user-service\nmake watch-user\n\n# Мониторинг point-service\nmake watch-point\n\n# Мониторинг statistic-service\nmake watch-statistic\n\n# Мониторинг всех сервисов (умный режим)\nmake watch-all\n\n# Мониторинг всех сервисов (упрощенный режим)\nmake watch-all-simple\n```\n\n### Что отслеживается\n\n- **user-service**: `../user/src`, `../common/src`\n- **point-service**: `../point/src`, `../common/src`\n- **statistic-service**: `../statistic/src`, `../common/src`\n\n### Режимы мониторинга всех сервисов\n\n#### Умный режим (`make watch-all`)\n- Отслеживает конкретные файлы\n- Перезапускает только затронутые сервисы\n- При изменении `common/src` перезапускает все сервисы\n- Более эффективно, но сложнее\n\n#### Упрощенный режим (`make watch-all-simple`)\n- Перезапускает все сервисы при любом изменении\n- Проще и быстрее\n- Менее эффективно при частых изменениях\n\n### Преимущества\n\n- Изменения в коде сразу фиксируются в деплое\n- Не нужно вручную перезапускать сервисы\n- Кэширование зависимостей Maven\n- Быстрая пересборка только измененных сервисов\n\n## Рабочий процесс разработки\n\n### 1. Первый запуск\n```bash\ncd deploy\nmake dev\n```\n\n### 2. Разработка с автоматическим перезапуском\n```bash\n# В одном терминале\ncd deploy\nmake watch-all\n\n# В другом терминале редактируете код\n# Сервис автоматически перезапустится при сохранении\n```\n\n### 3. При изменении зависимостей\n```bash\ncd deploy\nmake force\n```\n\n### 4. Быстрая пересборка одного сервиса\n```bash\ncd deploy\nmake rebuild-user\n```\n\n## Доступные сервисы\n\nПосле успешного деплоя доступны:\n\n- **User Service**: http://localhost:8090\n- **Point Service**: http://localhost:8091\n- **Statistic Service**: http://localhost:8095\n- **Grafana**: http://localhost:3000 (admin/admin)\n- **Prometheus**: http://localhost:9090\n- **RabbitMQ Management**: http://localhost:15673 (guest/guest)\n\n## Настройка\n\n### Переменные окружения\n\nСкрипты автоматически определяют окружение:\n- **dev**: использует `../docker-compose.dev.yml`\n- **prod**: использует `../docker-compose.yml`\n\n\n## Логи\n\n### Просмотр логов\n\n```bash\ncd deploy\n\n# Все сервисы\nmake logs\n\n# Конкретный сервис\ndocker-compose -f ../docker-compose.dev.yml logs -f user-service\n```\n\n\n\n"
        }
    ]
}