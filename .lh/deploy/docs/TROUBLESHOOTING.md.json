{
    "sourceFile": "deploy/docs/TROUBLESHOOTING.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1754242469070,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1754242469070,
            "name": "Commit-0",
            "content": "# Устранение неполадок\n\nЭтот документ содержит решения для часто встречающихся проблем при использовании генераторов сервисов.\n\n## Проблема: Maven wrapper не найден\n\n### Ошибка\n```\n[ERROR] Maven wrapper не найден!\n```\n\n### Решение\n\n#### Вариант 1: Использование упрощенных скриптов\n```bash\n# Вместо module-manager.sh используйте quick-module.sh\n./scripts/quick-module.sh auth 8092\n\n# Вместо service-generator.sh используйте quick-service.sh\n./scripts/quick-service.sh auth-service 8092 auth\n\n# Или используйте полный скрипт\n./scripts/create-service.sh auth-service 8092\n```\n\n#### Вариант 2: Проверка путей\n```bash\n# Запустите тест путей\n./scripts/test-paths.sh\n\n# Убедитесь, что находитесь в правильной директории\ncd deploy\n```\n\n#### Вариант 3: Ручное создание mvnw\n```bash\n# Если mvnw отсутствует, создайте его\ncd /path/to/project/root\nmvn wrapper:wrapper\n```\n\n## Проблема: Порт уже используется\n\n### Ошибка\n```\n[ERROR] Порт 8092 уже используется!\n```\n\n### Решение\n```bash\n# Выберите другой порт\n./scripts/create-service.sh auth-service 8093\n\n# Или удалите существующий сервис\n./scripts/service-generator.sh -r auth-service\n```\n\n## Проблема: Модуль уже существует\n\n### Ошибка\n```\n[WARNING] Модуль auth уже существует\n```\n\n### Решение\n```bash\n# Используйте другое имя модуля\n./scripts/create-service.sh auth-service 8092 auth-new\n\n# Или удалите существующий модуль\n./scripts/module-manager.sh -r auth\n```\n\n## Проблема: Docker не установлен\n\n### Ошибка\n```\n[ERROR] Docker не установлен!\n```\n\n### Решение\n```bash\n# Установите Docker\n# macOS\nbrew install docker\n\n# Ubuntu\nsudo apt-get install docker.io docker-compose\n\n# CentOS\nsudo yum install docker docker-compose\n```\n\n## Проблема: Файлы docker-compose не найдены\n\n### Ошибка\n```\n[ERROR] Файл docker-compose.dev.yml не найден!\n```\n\n### Решение\n```bash\n# Убедитесь, что находитесь в правильной директории\ncd deploy\n\n# Проверьте наличие файлов\nls -la ../docker-compose*.yml\n\n# Если файлы отсутствуют, создайте их или скопируйте из примера\n```\n\n## Проблема: Неправильные пути в скриптах\n\n### Ошибка\n```\n[ERROR] Родительский pom.xml не найден в /path/to/project\n```\n\n### Решение\n```bash\n# Запустите тест путей\n./scripts/test-paths.sh\n\n# Убедитесь, что структура проекта правильная\ntree -L 2 ../\n\n# Должно быть:\n# ../\n# ├── common/\n# ├── user/\n# ├── point/\n# ├── statistic/\n# ├── deploy/\n# ├── pom.xml\n# ├── mvnw\n# └── docker-compose*.yml\n```\n\n## Быстрые решения\n\n### 1. Полное создание сервиса (рекомендуется)\n```bash\ncd deploy\n./scripts/create-service.sh auth-service 8092\n```\n\n### 2. Пошаговое создание\n```bash\ncd deploy\n\n# Шаг 1: Создать модуль\n./scripts/quick-module.sh auth 8092\n\n# Шаг 2: Создать сервис\n./scripts/quick-service.sh auth-service 8092 auth\n\n# Шаг 3: Запустить\nmake dev\n```\n\n### 3. Проверка и исправление\n```bash\ncd deploy\n\n# Проверить пути\n./scripts/test-paths.sh\n\n# Показать справку\nmake help\n\n# Показать доступные команды\nmake service-generator\nmake module-manager\n```\n\n## Альтернативные команды\n\n### Если основные скрипты не работают\n\n#### Создание модуля\n```bash\n# Простое создание структуры\nmkdir -p auth/src/main/java/com/viancis/auth\nmkdir -p auth/src/main/resources\nmkdir -p auth/docker\n\n# Создание основного класса\ncat > auth/src/main/java/com/viancis/auth/AuthApplication.java << 'EOF'\npackage com.viancis.auth;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class AuthApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(AuthApplication.class, args);\n    }\n}\nEOF\n```\n\n#### Создание сервиса\n```bash\n# Добавить в docker-compose.dev.yml\necho \"  auth-service:\" >> docker-compose.dev.yml\necho \"    build:\" >> docker-compose.dev.yml\necho \"      context: .\" >> docker-compose.dev.yml\necho \"      dockerfile: auth/docker/Dockerfile.dev\" >> docker-compose.dev.yml\necho \"    ports:\" >> docker-compose.dev.yml\necho \"      - \\\"8092:8092\\\"\" >> docker-compose.dev.yml\n```\n\n## Полезные команды для отладки\n\n```bash\n# Проверить структуру проекта\nfind . -name \"*.yml\" -o -name \"*.yaml\"\nfind . -name \"mvnw\"\nfind . -name \"pom.xml\"\n\n# Проверить Docker\ndocker --version\ndocker-compose --version\n\n# Проверить Maven\n./mvnw --version\n\n# Проверить порты\nnetstat -an | grep 8092\nlsof -i :8092\n```\n\n## Контакты\n\nЕсли проблема не решена, проверьте:\n1. Версию Docker и Docker Compose\n2. Права доступа к файлам\n3. Структуру проекта\n4. Логи ошибок\n\nСоздано viancis для автоматизации разработки микросервисов. "
        }
    ]
}